(window.webpackJsonp=window.webpackJsonp||[]).push([[481],{1146:function(s,r,e){"use strict";e.r(r);var a=e(14),t=Object(a.a)({},(function(){var s=this,r=s._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h1",{attrs:{id:"安装配置supervisor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装配置supervisor"}},[s._v("#")]),s._v(" 安装配置supervisor")]),s._v(" "),r("h2",{attrs:{id:"_1-安装supervisor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装supervisor"}},[s._v("#")]),s._v(" 1.安装supervisor")]),s._v(" "),r("p",[s._v("本文使用yum方式，其他系统可自行查询合适的安装工具")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("yum install supervisor\n不报错,跳过1.1\n")])])]),r("h3",{attrs:{id:"_1-1-报错解决办法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-报错解决办法"}},[s._v("#")]),s._v(" 1.1 报错解决办法：")]),s._v(" "),r("p",[s._v("一、扩展包更新包")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("yum install epel-release\n执行完毕,重新安装,执行还报错,使用下一个方法\n")])])]),r("p",[s._v("二、更新yum源#")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("yum update\n执行完毕,重新安装,执行还报错,找开发部\n")])])]),r("p",[s._v("下载完成后此文件为空,为正常现象")]),s._v(" "),r("p",[r("img",{attrs:{src:"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/drEaQ4y39TYQ09nZ/595cb7d4ee21492597a0b499b2f0a3080081.png",alt:"image"}})]),s._v(" "),r("h2",{attrs:{id:"_2-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置"}},[s._v("#")]),s._v(" 2.配置")]),s._v(" "),r("p",[s._v("打开/etc下的supervisord.conf文件")]),s._v(" "),r("p",[s._v("插入以下内容")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("[inet_http_server]         ; inet (TCP) server disabled by default\nport=*:8018        ; (ip_address:port specifier, *:port for all iface)\nusername=geecity              ; (default is no username (open server))\npassword=89892528              ; (default is no password (open server))\n")])])]),r("p",[s._v("修改以下内容")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("[include]\nfiles = supervisord.d/*.conf\n")])])]),r("h3",{attrs:{id:"_2-1-配置子文件-supervisord-d目录下新建boot-saas-conf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-配置子文件-supervisord-d目录下新建boot-saas-conf"}},[s._v("#")]),s._v(" 2.1 配置子文件 supervisord.d目录下新建boot-saas.conf")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("[program:boot-saas]\nenvironment=JAVA_HOME=/usr/local/jdk1.8.0_261/bin\ndirectory=/java-project/ ; 程序的启动目录\n\ncommand=   /usr/local/jdk1.8.0_261/bin/java -jar -server springbootdemo.jar \n; 启动命令,注意:一定不要和第5行 在一行\nautostart=true     ; 在 supervisord 启动的时候也自动启动\nstartsecs=30        ; 启动 30 秒后没有异常退出，就当作已经正常启动了\nautorestart=true   ; 程序异常退出后自动重启\nstartretries=3     ; 启动失败自动重试次数，默认是 3\nuser=root          ; 用哪个用户启动\nredirect_stderr=true  ; 把 stderr 重定向到 stdout，默认 false\nstdout_logfile_maxbytes=100MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups=20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录\nstdout_logfile=/opt/qianyan-nohup.out ;应用日志目录\ntderr_logfile=/opt/blog_stderr.out\n")])])]),r("p",[s._v("修改内容注意：")]),s._v(" "),r("ol",[r("li",[r("p",[s._v("environment为JDK安装路径,可参考下方查看java安装路径,如果环境变量没有配置,自行百度。")])]),s._v(" "),r("li",[r("p",[s._v("directory为程序的启动目录")])]),s._v(" "),r("li",[r("p",[s._v("command 为启动命令（environment变量+java -jar +包名）")])])]),s._v(" "),r("p",[s._v("特别注意：包名后不可存在；符号")]),s._v(" "),r("p",[s._v("查看java安装路径")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("vim /etc/profile\n")])])]),r("p",[r("img",{attrs:{src:"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/a/drEaQ4y39TYQ09nZ/4421963986c74d9585b05148a600d18d0081.png",alt:"image"}})]),s._v(" "),r("h2",{attrs:{id:"_3-设置插件开机自启"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置插件开机自启"}},[s._v("#")]),s._v(" 3.设置插件开机自启")]),s._v(" "),r("p",[s._v("新建文件supervisord.service")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("[Unit] \nDescription=Supervisor daemon\n\n[Service] \nType=forking \nExecStart=/usr/bin/supervisord -c /etc/supervisord.conf \nExecStop=/usr/bin/supervisorctl shutdown \nExecReload=/usr/bin/supervisorctl reload \nKillMode=process \nRestart=on-failure \nRestartSec=42s\n\n[Install] \nWantedBy=multi-user.target\n")])])]),r("p",[s._v("将文件拷贝到/usr/lib/systemd/system")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("启动服务\nsystemctl enable supervisord\n验证一下是否为开机启动\nsystemctl is-enabled supervisord\n返回enabled就正确了\n")])])]),r("h2",{attrs:{id:"_4-supervisorctl的用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-supervisorctl的用法"}},[s._v("#")]),s._v(" 4.supervisorctl的用法")]),s._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[s._v("supervisord : 启动supervisor\nsupervisorctl reload :修改完配置文件后重新启动supervisor\nsupervisorctl status :查看supervisor监管的进程状态\nsupervisorctl start 进程名 ：启动XXX进程\nsupervisorctl stop 进程名 ：停止XXX进程\nsupervisorctl stop all：停止全部进程，注：start、restart、stop都不会载入最新的配置文件。\nsupervisorctl update：根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启\n")])])]),r("h2",{attrs:{id:"_5-linux开放端口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-linux开放端口"}},[s._v("#")]),s._v(" 5.Linux开放端口")]),s._v(" "),r("p",[s._v("操作步骤：")]),s._v(" "),r("p",[s._v("1、登陆到linux系统")]),s._v(" "),r("p",[s._v("2、输入防火墙开放端口命令：firewall-cmd --zone=public --add-port=3306/tcp --permanent")]),s._v(" "),r("p",[s._v("3、刷新防火墙：firewall-cmd --reload")]),s._v(" "),r("p",[s._v("* 注意：–add-port=后面接需要开放的端口")]),s._v(" "),r("h2",{attrs:{id:"_6-路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-路径"}},[s._v("#")]),s._v(" 6.路径")]),s._v(" "),r("p",[s._v("/etc/supervisord.conf  总配置文件默认路径")]),s._v(" "),r("p",[s._v("/etc/supervisord.d/xxx.conf  子配置文件设定路径")])])}),[],!1,null,null,null);r.default=t.exports}}]);