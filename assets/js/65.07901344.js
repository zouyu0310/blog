(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{1082:function(t,e,n){"use strict";n.r(e);var s=n(14),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_37-ribbon的负载均衡和rest调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_37-ribbon的负载均衡和rest调用"}},[t._v("#")]),t._v(" 37_Ribbon的负载均衡和Rest调用")]),t._v(" "),e("p",[e("strong",[t._v("架构说明")])]),t._v(" "),e("p",[t._v("总结：Ribbon其实就是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，和Eureka结合只是其中的一个实例。")]),t._v(" "),e("p",[e("img",{attrs:{src:n(565),alt:"image-20211226182731028"}})]),t._v(" "),e("p",[t._v("Ribbon在工作时分成两步：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("第一步先选择EurekaServer ,它优先选择在同一个区域内负载较少的server。\n\n第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。\n")])])]),e("p",[t._v("其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。")]),t._v(" "),e("p",[t._v("POM")]),t._v(" "),e("p",[t._v("先前工程项目没有引入spring-cloud-starter-ribbon也可以使用ribbon。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<dependency>\n    <groupld>org.springframework.cloud</groupld>\n    <artifactld>spring-cloud-starter-netflix-ribbon</artifactid>\n</dependency>\n\n")])])]),e("p",[t._v("这是因为spring-cloud-starter-netflix-eureka-client自带了spring-cloud-starter-ribbon引用。")]),t._v(" "),e("p",[e("img",{attrs:{src:n(566),alt:"image-20211226183704403"}})]),t._v(" "),e("p",[t._v("二说RestTemplate的使用")]),t._v(" "),e("p",[t._v("RestTemplate Java Doc")]),t._v(" "),e("p",[t._v("getForObject() / getForEntity() - GET请求方法")]),t._v(" "),e("p",[t._v("getForObject()：返回对象为响应体中数据转化成的对象，基本上可以理解为Json。")]),t._v(" "),e("p",[t._v("getForEntity()：返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等。")]),t._v(" "),e("p",[e("strong",[t._v("postForObject() / postForEntity()")]),t._v(" - POST请求方法")]),t._v(" "),e("p",[t._v("下面熟悉方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    @GetMapping("/consumer/payment/getForEntity/{id}")\n    public CommonResult<Payment> getPayment2(@PathVariable("id") Long id){\n        ResponseEntity<CommonResult> entity = restTemplate.getForEntity(PAYMENT_URL + "/payment/get/" + id, CommonResult.class);\n\n        //判断编码\n        if(entity.getStatusCode().is2xxSuccessful()){\n            //2xx开头 为成功\n            return  entity.getBody();\n        }else {\n            //返回失败\n            return new CommonResult<>(500,"操作失败,请重试.");\n        }\n    }\n')])])])])}),[],!1,null,null,null);e.default=r.exports},565:function(t,e,n){t.exports=n.p+"assets/img/20211226182738.17f17c17.png"},566:function(t,e,n){t.exports=n.p+"assets/img/20211226183704.73a05350.png"}}]);