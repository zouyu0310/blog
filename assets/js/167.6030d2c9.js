(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{759:function(t,a,n){"use strict";n.r(a);var _=n(14),r=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"数据过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据过滤"}},[t._v("#")]),t._v(" 数据过滤")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- AND操作符\n-- 检索由1003制造且价格小于等于10美元的所有产品的名称和价格\nSELECT prod_id, prod_price, prod_name FROM products\nWHERE vend_id = 1003 AND prod_price <= 10;\n\n-- OR操作符\n-- 检索由1002和1003制造的产品的名称和价格\nSELECT prod_name, prod_price FROM products\nWHERE vend_id = 1002 or vend_id = 1003;\n\n-- 计算次序\n-- AND的优先级高于OR\nSELECT prod_name, prod_price FROM products\nWHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price >= 10;\n\n-- IN操作符\n-- 用来指定条件范围，取合法值的由逗号分隔的清单全部在圆括号中。\n-- IN比OR执行更快，最大的优点是可以包含其他SELECT语句，能够更动态地建立WHERE子句\nSELECT prod_name, prod_price FROM products WHERE vend_id IN (1002, 1003)\nORDER BY prod_name;\n\n-- NOT操作符\n-- 列出除1002，1003之外所有供应商供应的产品\nSELECT prod_name, prod_price FROM products WHERE vend_id NOT IN (1002, 1003)\nORDER BY prod_name;\n")])])]),a("h2",{attrs:{id:"用通配符进行过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用通配符进行过滤"}},[t._v("#")]),t._v(" 用通配符进行过滤")]),t._v(" "),a("h3",{attrs:{id:"like操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#like操作符"}},[t._v("#")]),t._v(" LIKE操作符")]),t._v(" "),a("p",[t._v("LIKE指示MYSQL，后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 百分号（%）通配符\n-- 表示任何字符出现任意次数\n-- 例：找出所有jet起头的产品\nSELECT prod_id, prod_name FROM products WHERE prod_name LIKE 'jet%';\n-- 例：使用多个通配符,匹配任何位置包含anvil的值，不论它之前或之后出现什么字符\nSELECT prod_id, prod_name FROM products WHERE prod_name LIKE '%anvil%';\n-- 例：找出s起头e结尾的所有产品\nSELECT prod_name FROM products WHERE prod_name LIKE 's%e';\n")])])]),a("p",[t._v("%可以匹配0个字符，%代表搜索模式中给定位置的0个、1个或多个字符\n尾空格可能会干扰通配符，例如，在保存词anvil时，如果它后面有一个或多个空格，则子句"),a("code",[t._v("WHERE prod_name LIKE '%anvil'")]),t._v("将不会匹配它们，因为在最后的l后有多余的字符。解决这个问题的一个简单的办法是在搜索模 式最后附加一个%。一个更好的办法是使用函数去掉首尾空格。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 下划线(_)通配符\n-- 只匹配单个字符而不是多个字符\nSELECT prod_id, prod_name FROM products WHERE prod_name LIKE '_ ton anvil';\n")])])]),a("h3",{attrs:{id:"使用技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用技巧"}},[t._v("#")]),t._v(" 使用技巧")]),t._v(" "),a("ul",[a("li",[t._v("不要过度使用通配符，如果其他操作符能够达到目的应该使用其他操作符")]),t._v(" "),a("li",[t._v("在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索的开始处。\n把通配符置于搜索模式的开始处搜索起来是最慢的。")]),t._v(" "),a("li",[t._v("仔细注意通配符的位置")])]),t._v(" "),a("h2",{attrs:{id:"用正则表达式进行搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用正则表达式进行搜索"}},[t._v("#")]),t._v(" 用正则表达式进行搜索")]),t._v(" "),a("h3",{attrs:{id:"使用mysql正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用mysql正则表达式"}},[t._v("#")]),t._v(" 使用MySQL正则表达式")]),t._v(" "),a("h4",{attrs:{id:"基本字符匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本字符匹配"}},[t._v("#")]),t._v(" 基本字符匹配")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 例：检索prod_name包含文本1000的所有行\n-- REGEXP后所跟的东西作为正则表达式处理\nSELECT prod_name FROM products WHERE prod_name REGEXP '1000'\nORDER BY prod_name;\n\n-- `.`表示匹配任意一个字符\nSELECT prod_name FROM products WHERE prod_name REGEXP '.000'\nORDER BY prod_name;\n")])])]),a("ul",[a("li",[t._v("LIKE和REGEXP的区别：\nLIKE '1000'匹配整个列值，等于'1000'时才会返回相应行，而REGEXP '1000'在列值内进行匹配，如果包含'1000'则会返回相应行。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 区分大小写\n-- 使用关键字BINARY,例如\nWHERE prod_name REGEXP BINARY 'JetPack .000';\n")])])]),a("h4",{attrs:{id:"进行or匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进行or匹配"}},[t._v("#")]),t._v(" 进行OR匹配")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- `|`为正则表达式的OR操作符，表示匹配其中之一\nSELECT prod_name FROM products WHERE prod_name REGEXP '1000|2000'\nORDER BY prod_name;\n-- 可以给出两个以上的OR条件\n`1000|2000|3000`\n")])])]),a("h4",{attrs:{id:"匹配几个字符之一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配几个字符之一"}},[t._v("#")]),t._v(" 匹配几个字符之一")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- `[]`表示匹配[]中的任意一个字符，例如`[123]`是`[1|2|3]`的缩写\nSELECT prod_name FROM products WHERE prod_name REGEXP '[123] Ton'\nORDER BY prod_name;\n-- output\n+-------------+\n| prod_name   |\n+-------------+\n|1 ton anvil  |\n|2 ton anvil  |\n+-------------+\n\n-- 和直接使用OR的区别：\nSELECT prod_name FROM products WHERE prod_name REGEXP '1|2|3 Ton'\nORDER BY prod_name\n-- 匹配的是1 OR 2 OR 3 Ton，应该使用'[1|2|3] Ton'\n-- output\n+-------------+\n| prod_name   |\n+-------------+\n|1 ton anvil  |\n|2 ton anvil  |\n|JetPack 1000 |\n|JetPack 2000 |\n|TNT (1 stick)|\n+-------------+\n")])])]),a("p",[t._v("字符集合也可以被否定，为否定一个字集，在集合的开始处放置"),a("code",[t._v("^")]),t._v("，例如"),a("code",[t._v("[^123]")]),t._v("匹配除这些字符的任何东西")]),t._v(" "),a("h4",{attrs:{id:"匹配范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配范围"}},[t._v("#")]),t._v(" 匹配范围")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- `[0123456789]`可以写成`[0-9]`，其他范围如`[a-z]`\nSELECT prod_name FROM products WHERE prod_name REGEXP '[1-5] Ton'\nORDER BY prod_name\n-- output\n+-------------+\n|  prod_name  |\n+-------------+\n| .5 ton anvil|\n| 1 ton anvil |\n| 2 ton anvil |\n+-------------+\n")])])]),a("h4",{attrs:{id:"匹配特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配特殊字符"}},[t._v("#")]),t._v(" 匹配特殊字符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 匹配'.'字符，如果使用\nSELECT vend_name FROM vendors WHERE vend_name REGEXP '.'\nORDER BY vend_name;\n-- output\n+---------------+\n|   vend_name   |\n+---------------+\n| ACME          |\n| Anvils R Us   |\n| Furball Inc.  |\n| Jet Set       |\n| Jouets Et Ours|\n| LT Supplies   |\n+---------------+\n\n-- 因为'.'为匹配任意字符，因此匹配特殊字符，必须用'\\\\'为前导\n\nSELECT vend_name FROM vendors WHERE vend_name REGEXP '\\\\.'\nORDER BY vend_name;\n-- output\n+---------------+\n|   vend_name   |\n+---------------+\n| Furball Inc.  |\n+---------------+\n")])])]),a("p",[t._v("正则表达式中具有特殊意义的所有字符都要通过这种方式转义\n"),a("code",[t._v("\\\\")]),t._v("也用来引用元字符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("元字符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("\\\\f")])]),t._v(" "),a("td",[t._v("换页")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\\\n")])]),t._v(" "),a("td",[t._v("换行")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\\\r")])]),t._v(" "),a("td",[t._v("回车")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\\\t")])]),t._v(" "),a("td",[t._v("制表")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\\\v")])]),t._v(" "),a("td",[t._v("纵向制表")])])])]),t._v(" "),a("p",[t._v("为了匹配"),a("code",[t._v("\\")]),t._v("本身，需要使用"),a("code",[t._v("\\\\\\")])]),t._v(" "),a("h4",{attrs:{id:"匹配字符类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配字符类"}},[t._v("#")]),t._v(" 匹配字符类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("[:alnum:]")]),t._v(" "),a("td",[t._v("任意字母和数字（同[a-zA-Z0-9]）")])]),t._v(" "),a("tr",[a("td",[t._v("[:alpha:]")]),t._v(" "),a("td",[t._v("任意字符（同[a-zA-Z]）")])]),t._v(" "),a("tr",[a("td",[t._v("[:cntrl:]")]),t._v(" "),a("td",[t._v("空格和制表（同[\\\\t]）")])]),t._v(" "),a("tr",[a("td",[t._v("[:digit:]")]),t._v(" "),a("td",[t._v("ASCII控制字符（ASCII）0到31和127")])]),t._v(" "),a("tr",[a("td",[t._v("[:graph:]")]),t._v(" "),a("td",[t._v("任意数字（同[0-9]）")])]),t._v(" "),a("tr",[a("td",[t._v("[:lower:]")]),t._v(" "),a("td",[t._v("任意小写字母（同[a-z]）")])]),t._v(" "),a("tr",[a("td",[t._v("[:print:]")]),t._v(" "),a("td",[t._v("任意可打印字符")])]),t._v(" "),a("tr",[a("td",[t._v("[:punct:]")]),t._v(" "),a("td",[t._v("既不在[:alnum:]又不在[:cntrl:]中的任意字符")])]),t._v(" "),a("tr",[a("td",[t._v("[:space:]")]),t._v(" "),a("td",[t._v("包括空格在内的任意空白字符（同[\\\\f\\\\n\\\\r\\\\t\\\\v]）")])]),t._v(" "),a("tr",[a("td",[t._v("[:upper:]")]),t._v(" "),a("td",[t._v("任意大写字母（同[A-Z]）")])]),t._v(" "),a("tr",[a("td",[t._v("[:xdigit:]")]),t._v(" "),a("td",[t._v("任意十六进制数字（同[a-fA-F0-9]）")])])])]),t._v(" "),a("h4",{attrs:{id:"匹配多个实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配多个实例"}},[t._v("#")]),t._v(" 匹配多个实例")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("元字符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("0个或多个匹配")])]),t._v(" "),a("tr",[a("td",[t._v("+")]),t._v(" "),a("td",[t._v("1个或多个匹配（等于{1，}）")])]),t._v(" "),a("tr",[a("td",[t._v("？")]),t._v(" "),a("td",[t._v("0个或1个匹配（等于{0，1}）")])]),t._v(" "),a("tr",[a("td",[t._v("{n}")]),t._v(" "),a("td",[t._v("指定数目的匹配")])]),t._v(" "),a("tr",[a("td",[t._v("{n,}")]),t._v(" "),a("td",[t._v("不少于指定数目的匹配")])]),t._v(" "),a("tr",[a("td",[t._v("{n.m}")]),t._v(" "),a("td",[t._v("匹配数目的范围（m不超过255）")])])])]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT prod_name FROM products WHERE prod_name REGEXP '\\\\([0-9] sticks?\\\\)'\nORDER BY prod_name\n-- output\n+---------------+\n|   prod_name   |\n+---------------+\n| TNT (1 stick) |\n| TNT (5 sticks)|\n+---------------+\n\n-- '\\\\('匹配'('\n'[0-9]'匹配任意数字\n'stick?'匹配'stick'和'sticks'\n'\\\\)'匹配')'\n")])])]),a("p",[t._v("例：匹配连在一起的4位数字")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT prod_name FROM products WHERE prod_name REGEXP '[[:digit:]]{4}'\nORDER BY prod_name;\n-- output\n+---------------+\n|   prod_name   |\n+---------------+\n| JetPack 1000  |\n| JetPack 2000  |\n+---------------+\n-- 也可以写成 '[0-9][0-9][0-9][0-9]'\n")])])]),a("h4",{attrs:{id:"定位符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定位符"}},[t._v("#")]),t._v(" 定位符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("元字符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("^")]),t._v(" "),a("td",[t._v("文本的开始")])]),t._v(" "),a("tr",[a("td",[t._v("$")]),t._v(" "),a("td",[t._v("文本的结尾")])]),t._v(" "),a("tr",[a("td",[t._v("[:<:]")]),t._v(" "),a("td",[t._v("词的开始")])]),t._v(" "),a("tr",[a("td",[t._v("[:>:]")]),t._v(" "),a("td",[t._v("词的结尾")])])])]),t._v(" "),a("p",[t._v("例：找出以一个数（包括小数点开头）开始的所有产品")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT prod_name FROM products WHERE prod_name REGEXP '^[0-9\\\\.]'\nORDER BY prod_name;\n-- output\n+---------------+\n|   prod_name   |\n+---------------+\n| .5 ton anvil  |\n| 1 ton anvil   |\n| 2 ton anvil   |\n+---------------+\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);