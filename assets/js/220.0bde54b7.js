(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{832:function(e,a,_){"use strict";_.r(a);var v=_(14),r=Object(v.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-apache-kafka是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-apache-kafka是什么"}},[e._v("#")]),e._v(" 1. Apache Kafka是什么？")]),e._v(" "),a("p",[e._v("Apach Kafka是一款分布式流处理平台，用于实时构建流处理应用。它有一个核心的功能广为人知，即作为企业级的消息引擎被广泛使用（通常也会称之为消息总线message bus）。")]),e._v(" "),a("h2",{attrs:{id:"_2-kafka-的设计是什么样的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-kafka-的设计是什么样的"}},[e._v("#")]),e._v(" 2. Kafka 的设计是什么样的？")]),e._v(" "),a("p",[e._v("Kafka 将消息以 topic 为单位进行归纳")]),e._v(" "),a("p",[e._v("将向 Kafka topic 发布消息的程序成为 producers.")]),e._v(" "),a("p",[e._v("将预订 topics 并消费消息的程序成为 consumer.")]),e._v(" "),a("p",[e._v("Kafka 以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个 broker.")]),e._v(" "),a("p",[e._v("producers 通过网络将消息发送到 Kafka 集群，集群向消费者提供消息")]),e._v(" "),a("h2",{attrs:{id:"_3-kafka-如何保证高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-kafka-如何保证高可用"}},[e._v("#")]),e._v(" 3. Kafka 如何保证高可用？")]),e._v(" "),a("p",[a("code",[e._v("Kafka")]),e._v(" 的基本架构组成是：由多个 "),a("code",[e._v("broker")]),e._v(" 组成一个集群，每个 "),a("code",[e._v("broker")]),e._v(" 是一个节点；当创建一个 "),a("code",[e._v("topic")]),e._v(" 时，这个 "),a("code",[e._v("topic")]),e._v(" 会被划分为多个 "),a("code",[e._v("partition")]),e._v("，每个 "),a("code",[e._v("partition")]),e._v(" 可以存在于不同的 "),a("code",[e._v("broker")]),e._v(" 上，每个 "),a("code",[e._v("partition")]),e._v(" 只存放一部分数据。")]),e._v(" "),a("p",[e._v("这就是"),a("strong",[e._v("天然的分布式消息队列")]),e._v("，就是说一个 "),a("code",[e._v("topic")]),e._v(" 的数据，是"),a("strong",[e._v("分散放在多个机器上的，每个机器就放一部分数据")]),e._v("。")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Kafka 0.8")]),e._v(" 版本之前，是没有 "),a("code",[e._v("HA")]),e._v(" 机制的，当任何一个 "),a("code",[e._v("broker")]),e._v(" 所在节点宕机了，这个 "),a("code",[e._v("broker")]),e._v(" 上的 "),a("code",[e._v("partition")]),e._v(" 就无法提供读写服务，所以这个版本之前，"),a("code",[e._v("Kafka")]),e._v(" 没有什么高可用性可言。")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("Kafka 0.8")]),e._v(" 以后，提供了 "),a("code",[e._v("HA")]),e._v(" 机制，就是 "),a("code",[e._v("replica")]),e._v(" 副本机制。每个 "),a("code",[e._v("partition")]),e._v(" 上的数据都会同步到其它机器，形成自己的多个 "),a("code",[e._v("replica")]),e._v(" 副本。所有 "),a("code",[e._v("replica")]),e._v(" 会选举一个 "),a("code",[e._v("leader")]),e._v(" 出来，消息的生产者和消费者都跟这个 "),a("code",[e._v("leader")]),e._v(" 打交道，其他 "),a("code",[e._v("replica")]),e._v(" 作为 "),a("code",[e._v("follower")]),e._v("。写的时候，"),a("code",[e._v("leader")]),e._v(" 会负责把数据同步到所有 "),a("code",[e._v("follower")]),e._v(" 上去，读的时候就直接读 "),a("code",[e._v("leader")]),e._v(" 上的数据即可。"),a("code",[e._v("Kafka")]),e._v(" 负责均匀的将一个 "),a("code",[e._v("partition")]),e._v(" 的所有 "),a("code",[e._v("replica")]),e._v(" 分布在不同的机器上，这样才可以提高容错性。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://blog-img.coolsen.cn/img/Solve-MQ-Problem-With-Kafka-01.png",alt:"img"}})]),e._v(" "),a("p",[e._v("拥有了 "),a("code",[e._v("replica")]),e._v(" 副本机制，如果某个 "),a("code",[e._v("broker")]),e._v(" 宕机了，这个 "),a("code",[e._v("broker")]),e._v(" 上的 "),a("code",[e._v("partition")]),e._v(" 在其他机器上还存在副本。如果这个宕机的 "),a("code",[e._v("broker")]),e._v(" 上面有某个 "),a("code",[e._v("partition")]),e._v(" 的 "),a("code",[e._v("leader")]),e._v("，那么此时会从其 "),a("code",[e._v("follower")]),e._v(" 中重新选举一个新的 "),a("code",[e._v("leader")]),e._v(" 出来，这个新的 "),a("code",[e._v("leader")]),e._v(" 会继续提供读写服务，这就有达到了所谓的高可用性。")]),e._v(" "),a("p",[e._v("写数据的时候，生产者只将数据写入 "),a("code",[e._v("leader")]),e._v(" 节点，"),a("code",[e._v("leader")]),e._v(" 会将数据写入本地磁盘，接着其他 "),a("code",[e._v("follower")]),e._v(" 会主动从 "),a("code",[e._v("leader")]),e._v(" 来拉取数据，"),a("code",[e._v("follower")]),e._v(" 同步好数据了，就会发送 "),a("code",[e._v("ack")]),e._v(" 给 "),a("code",[e._v("leader")]),e._v("，"),a("code",[e._v("leader")]),e._v(" 收到所有 "),a("code",[e._v("follower")]),e._v(" 的 "),a("code",[e._v("ack")]),e._v(" 之后，就会返回写成功的消息给生产者。")]),e._v(" "),a("p",[e._v("消费数据的时候，消费者只会从 "),a("code",[e._v("leader")]),e._v(" 节点去读取消息，但是只有当一个消息已经被所有 "),a("code",[e._v("follower")]),e._v(" 都同步成功返回 "),a("code",[e._v("ack")]),e._v(" 的时候，这个消息才会被消费者读到。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/dongzl/article-images/raw/master/2020/13-Solve-MQ-Problem-With-Kafka/Solve-MQ-Problem-With-Kafka-02.png",alt:"img"}})]),e._v(" "),a("h2",{attrs:{id:"_4-kafka-消息是采用-pull-模式-还是-push-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-kafka-消息是采用-pull-模式-还是-push-模式"}},[e._v("#")]),e._v(" 4. Kafka 消息是采用 Pull 模式，还是 Push 模式？")]),e._v(" "),a("p",[e._v("生产者使用push模式将消息发布到Broker，消费者使用pull模式从Broker订阅消息。")]),e._v(" "),a("p",[e._v("push模式很难适应消费速率不同的消费者，如果push的速度太快，容易造成消费者拒绝服务或网络拥塞；如果push的速度太慢，容易造成消费者性能浪费。但是采用pull的方式也有一个缺点，就是当Broker没有消息时，消费者会陷入不断地轮询中，为了避免这点，kafka有个参数可以让消费者阻塞知道是否有新消息到达。")]),e._v(" "),a("h2",{attrs:{id:"_5-kafka-与传统消息系统之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-kafka-与传统消息系统之间的区别"}},[e._v("#")]),e._v(" 5. Kafka 与传统消息系统之间的区别")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Kafka 持久化日志，这些日志可以被重复读取和无限期保留")])]),e._v(" "),a("li",[a("p",[e._v("Kafka 是一个分布式系统：它以集群的方式运行，可以灵活伸缩，在内部通过复制数据提升容错能力和高可用性")])]),e._v(" "),a("li",[a("p",[e._v("Kafka 支持实时的流式处理")])])]),e._v(" "),a("h2",{attrs:{id:"_6-什么是消费者组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是消费者组"}},[e._v("#")]),e._v(" 6. 什么是消费者组？")]),e._v(" "),a("p",[e._v("消费者组是Kafka独有的概念，即消费者组是Kafka提供的可扩展且具有容错性的消费者机制。")]),e._v(" "),a("p",[e._v("但实际上，消费者组（Consumer Group）其实包含两个概念，作为队列，消费者组允许你分割数据处理到一组进程集合上（即一个消费者组中可以包含多个消费者进程，他们共同消费该topic的数据），这有助于你的消费能力的动态调整；作为发布-订阅模型（publish-subscribe），Kafka允许你将同一份消息广播到多个消费者组里，以此来丰富多种数据使用场景。")]),e._v(" "),a("p",[e._v("需要注意的是：在消费者组中，多个实例共同订阅若干个主题，实现共同消费。同一个组下的每个实例都配置有相同的组ID，被分配不同的订阅分区。当某个实例挂掉的时候，其他实例会自动地承担起它负责消费的分区。 因此，消费者组在一定程度上也保证了消费者程序的高可用性。")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://dockone.io/uploads/article/20201024/7b359b7a1381541fbacf3ecf20dfb347.jpg",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://dockone.io/uploads/article/20201024/7b359b7a1381541fbacf3ecf20dfb347.jpg",alt:"1.jpg"}}),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"_7-在kafka中-zookeeper的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-在kafka中-zookeeper的作用是什么"}},[e._v("#")]),e._v(" 7. 在Kafka中，ZooKeeper的作用是什么？")]),e._v(" "),a("p",[e._v("目前，Kafka使用ZooKeeper存放集群元数据、成员管理、Controller选举，以及其他一些管理类任务。之后，等KIP-500提案完成后，Kafka将完全不再依赖于ZooKeeper。")]),e._v(" "),a("ul",[a("li",[e._v("“存放元数据”是指主题分区的所有数据都保存在 ZooKeeper 中，且以它保存的数据为权威，其他 “人” 都要与它保持对齐。")]),e._v(" "),a("li",[e._v("“成员管理” 是指 Broker 节点的注册、注销以及属性变更，等等。")]),e._v(" "),a("li",[e._v("“Controller 选举” 是指选举集群 Controller，而其他管理类任务包括但不限于主题删除、参数配置等。")])]),e._v(" "),a("p",[e._v("KIP-500 思想，是使用社区自研的基于Raft的共识算法，替代ZooKeeper，实现Controller自选举。")]),e._v(" "),a("h2",{attrs:{id:"_8-解释下kafka中位移-offset-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-解释下kafka中位移-offset-的作用"}},[e._v("#")]),e._v(" 8. 解释下Kafka中位移（offset）的作用")]),e._v(" "),a("p",[e._v("在Kafka中，每个主题分区下的每条消息都被赋予了一个唯一的ID数值，用于标识它在分区中的位置。这个ID数值，就被称为位移，或者叫偏移量。一旦消息被写入到分区日志，它的位移值将不能被修改。")]),e._v(" "),a("h2",{attrs:{id:"_9-kafka-为什么那么快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-kafka-为什么那么快"}},[e._v("#")]),e._v(" 9. kafka 为什么那么快？")]),e._v(" "),a("ul",[a("li",[e._v("Cache Filesystem Cache PageCache缓存")]),e._v(" "),a("li",[a("code",[e._v("顺序写")]),e._v("：由于现代的操作系统提供了预读和写技术，磁盘的顺序写大多数情况下比随机写内存还要快。")]),e._v(" "),a("li",[a("code",[e._v("Zero-copy")]),e._v("：零拷技术减少拷贝次数")]),e._v(" "),a("li",[a("code",[e._v("Batching of Messages")]),e._v("：批量量处理。合并小的请求，然后以流的方式进行交互，直顶网络上限。")]),e._v(" "),a("li",[a("code",[e._v("Pull 拉模式")]),e._v("：使用拉模式进行消息的获取消费，与消费端处理能力相符。")])]),e._v(" "),a("h2",{attrs:{id:"_10-kafka-producer发送数据-ack为0-1-1分别是什么意思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-kafka-producer发送数据-ack为0-1-1分别是什么意思"}},[e._v("#")]),e._v(" 10. kafka producer发送数据，ack为0，1，-1分别是什么意思？")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("1")]),e._v("（默认） 数据发送到Kafka后，经过leader成功接收消息的的确认，就算是发送成功了。在这种情况下，如果leader宕机了，则会丢失数据。")]),e._v(" "),a("li",[a("code",[e._v("0")]),e._v(" 生产者将数据发送出去就不管了，不去等待任何返回。这种情况下数据传输效率最高，但是数据可靠性确是最低的。")]),e._v(" "),a("li",[a("code",[e._v("-1")]),e._v("producer需要等待ISR中的所有follower都确认接收到数据后才算一次发送完成，可靠性最高。当ISR中所有Replica都向Leader发送ACK时，leader才commit，这时候producer才能认为一个请求中的消息都commit了。")])]),e._v(" "),a("h2",{attrs:{id:"_11-kafka如何保证消息不丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-kafka如何保证消息不丢失"}},[e._v("#")]),e._v(" 11. Kafka如何保证消息不丢失?")]),e._v(" "),a("p",[e._v("首先需要弄明白消息为什么会丢失，对于一个消息队列，会有 "),a("code",[e._v("生产者")]),e._v("、"),a("code",[e._v("MQ")]),e._v("、"),a("code",[e._v("消费者")]),e._v(" 这三个角色，在这三个角色数据处理和传输过程中，都有可能会出现消息丢失。")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://blog-img.coolsen.cn/img/Solve-MQ-Problem-With-Kafka-03.png",alt:"img"}})]),e._v(" "),a("p",[e._v("消息丢失的原因以及解决办法：")]),e._v(" "),a("h3",{attrs:{id:"消费者异常导致的消息丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费者异常导致的消息丢失"}},[e._v("#")]),e._v(" 消费者异常导致的消息丢失")]),e._v(" "),a("p",[e._v("消费者可能导致数据丢失的情况是：消费者获取到了这条消息后，还未处理，"),a("code",[e._v("Kafka")]),e._v(" 就自动提交了 "),a("code",[e._v("offset")]),e._v("，这时 "),a("code",[e._v("Kafka")]),e._v(" 就认为消费者已经处理完这条消息，其实消费者才刚准备处理这条消息，这时如果消费者宕机，那这条消息就丢失了。")]),e._v(" "),a("p",[e._v("消费者引起消息丢失的主要原因就是消息还未处理完 "),a("code",[e._v("Kafka")]),e._v(" 会自动提交了 "),a("code",[e._v("offset")]),e._v("，那么只要关闭自动提交 "),a("code",[e._v("offset")]),e._v("，消费者在处理完之后手动提交 "),a("code",[e._v("offset")]),e._v("，就可以保证消息不会丢失。但是此时需要注意重复消费问题，比如消费者刚处理完，还没提交 "),a("code",[e._v("offset")]),e._v("，这时自己宕机了，此时这条消息肯定会被重复消费一次，这就需要消费者根据实际情况保证幂等性。")]),e._v(" "),a("h3",{attrs:{id:"生产者数据传输导致的消息丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产者数据传输导致的消息丢失"}},[e._v("#")]),e._v(" 生产者数据传输导致的消息丢失")]),e._v(" "),a("p",[e._v("对于生产者数据传输导致的数据丢失主常见情况是生产者发送消息给 "),a("code",[e._v("Kafka")]),e._v("，由于网络等原因导致消息丢失，对于这种情况也是通过在 "),a("strong",[e._v("producer")]),e._v(" 端设置 "),a("strong",[e._v("acks=all")]),e._v(" 来处理，这个参数是要求 "),a("code",[e._v("leader")]),e._v(" 接收到消息后，需要等到所有的 "),a("code",[e._v("follower")]),e._v(" 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试。")]),e._v(" "),a("h3",{attrs:{id:"kafka-导致的消息丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka-导致的消息丢失"}},[e._v("#")]),e._v(" Kafka 导致的消息丢失")]),e._v(" "),a("p",[a("code",[e._v("Kafka")]),e._v(" 导致的数据丢失一个常见的场景就是 "),a("code",[e._v("Kafka")]),e._v(" 某个 "),a("code",[e._v("broker")]),e._v(" 宕机，，而这个节点正好是某个 "),a("code",[e._v("partition")]),e._v(" 的 "),a("code",[e._v("leader")]),e._v(" 节点，这时需要重新重新选举该 "),a("code",[e._v("partition")]),e._v(" 的 "),a("code",[e._v("leader")]),e._v("。如果该 "),a("code",[e._v("partition")]),e._v(" 的 "),a("code",[e._v("leader")]),e._v(" 在宕机时刚好还有些数据没有同步到 "),a("code",[e._v("follower")]),e._v("，此时 "),a("code",[e._v("leader")]),e._v(" 挂了，在选举某个 "),a("code",[e._v("follower")]),e._v(" 成 "),a("code",[e._v("leader")]),e._v(" 之后，就会丢失一部分数据。")]),e._v(" "),a("p",[e._v("对于这个问题，"),a("code",[e._v("Kafka")]),e._v(" 可以设置如下 4 个参数，来尽量避免消息丢失：")]),e._v(" "),a("ul",[a("li",[e._v("给 "),a("code",[e._v("topic")]),e._v(" 设置 "),a("code",[e._v("replication.factor")]),e._v(" 参数：这个值必须大于 "),a("code",[e._v("1")]),e._v("，要求每个 "),a("code",[e._v("partition")]),e._v(" 必须有至少 "),a("code",[e._v("2")]),e._v(" 个副本；")]),e._v(" "),a("li",[e._v("在 "),a("code",[e._v("Kafka")]),e._v(" 服务端设置 "),a("code",[e._v("min.insync.replicas")]),e._v(" 参数：这个值必须大于 "),a("code",[e._v("1")]),e._v("，这个参数的含义是一个 "),a("code",[e._v("leader")]),e._v(" 至少感知到有至少一个 "),a("code",[e._v("follower")]),e._v(" 还跟自己保持联系，没掉队，这样才能确保 "),a("code",[e._v("leader")]),e._v(" 挂了还有一个 "),a("code",[e._v("follower")]),e._v(" 节点。")]),e._v(" "),a("li",[e._v("在 "),a("code",[e._v("producer")]),e._v(" 端设置 "),a("code",[e._v("acks=all")]),e._v("，这个是要求每条数据，必须是写入所有 "),a("code",[e._v("replica")]),e._v(" 之后，才能认为是写成功了；")]),e._v(" "),a("li",[e._v("在 "),a("code",[e._v("producer")]),e._v(" 端设置 "),a("code",[e._v("retries=MAX")]),e._v("（很大很大很大的一个值，无限次重试的意思）：这个参数的含义是一旦写入失败，就无限重试，卡在这里了。")])]),e._v(" "),a("h2",{attrs:{id:"_13-kafka-如何保证消息的顺序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-kafka-如何保证消息的顺序性"}},[e._v("#")]),e._v(" 13. Kafka 如何保证消息的顺序性")]),e._v(" "),a("p",[e._v("在某些业务场景下，我们需要保证对于有逻辑关联的多条MQ消息被按顺序处理，比如对于某一条数据，正常处理顺序是"),a("code",[e._v("新增-更新-删除")]),e._v("，最终结果是数据被删除；如果消息没有按序消费，处理顺序可能是"),a("code",[e._v("删除-新增-更新")]),e._v("，最终数据没有被删掉，可能会产生一些逻辑错误。对于如何保证消息的顺序性，主要需要考虑如下两点：")]),e._v(" "),a("ul",[a("li",[e._v("如何保证消息在 "),a("code",[e._v("Kafka")]),e._v(" 中顺序性；")]),e._v(" "),a("li",[e._v("如何保证消费者处理消费的顺序性。")])]),e._v(" "),a("h3",{attrs:{id:"如何保证消息在-kafka-中顺序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证消息在-kafka-中顺序性"}},[e._v("#")]),e._v(" 如何保证消息在 Kafka 中顺序性")]),e._v(" "),a("p",[e._v("对于 "),a("code",[e._v("Kafka")]),e._v("，如果我们创建了一个 "),a("code",[e._v("topic")]),e._v("，默认有三个 "),a("code",[e._v("partition")]),e._v("。生产者在写数据的时候，可以指定一个 "),a("code",[e._v("key")]),e._v("，比如在订单 "),a("code",[e._v("topic")]),e._v(" 中我们可以指定订单 "),a("code",[e._v("id")]),e._v(" 作为 "),a("code",[e._v("key")]),e._v("，那么相同订单 "),a("code",[e._v("id")]),e._v(" 的数据，一定会被分发到同一个 "),a("code",[e._v("partition")]),e._v(" 中去，而且这个 "),a("code",[e._v("partition")]),e._v(" 中的数据一定是有顺序的。消费者从 "),a("code",[e._v("partition")]),e._v(" 中取出来数据的时候，也一定是有顺序的。通过制定 "),a("code",[e._v("key")]),e._v(" 的方式首先可以保证在 "),a("code",[e._v("kafka")]),e._v(" 内部消息是有序的。")]),e._v(" "),a("h3",{attrs:{id:"如何保证消费者处理消费的顺序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证消费者处理消费的顺序性"}},[e._v("#")]),e._v(" 如何保证消费者处理消费的顺序性")]),e._v(" "),a("p",[e._v("对于某个 "),a("code",[e._v("topic")]),e._v(" 的一个 "),a("code",[e._v("partition")]),e._v("，只能被同组内部的一个 "),a("code",[e._v("consumer")]),e._v(" 消费，如果这个 "),a("code",[e._v("consumer")]),e._v(" 内部还是单线程处理，那么其实只要保证消息在 "),a("code",[e._v("MQ")]),e._v(" 内部是有顺序的就可以保证消费也是有顺序的。但是单线程吞吐量太低，在处理大量 "),a("code",[e._v("MQ")]),e._v(" 消息时，我们一般会开启多线程消费机制，那么如何保证消息在多个线程之间是被顺序处理的呢？对于多线程消费我们可以预先设置 "),a("code",[e._v("N")]),e._v(" 个内存 "),a("code",[e._v("Queue")]),e._v("，具有相同 "),a("code",[e._v("key")]),e._v(" 的数据都放到同一个内存 "),a("code",[e._v("Queue")]),e._v(" 中；然后开启 "),a("code",[e._v("N")]),e._v(" 个线程，每个线程分别消费一个内存 "),a("code",[e._v("Queue")]),e._v(" 的数据即可，这样就能保证顺序性。当然，消息放到内存 "),a("code",[e._v("Queue")]),e._v(" 中，有可能还未被处理，"),a("code",[e._v("consumer")]),e._v(" 发生宕机，内存 "),a("code",[e._v("Queue")]),e._v(" 中的数据会全部丢失，这就转变为上面提到的"),a("strong",[e._v("如何保证消息的可靠传输")]),e._v("的问题了。")]),e._v(" "),a("h2",{attrs:{id:"_14-kafka中的isr、ar代表什么-isr的伸缩指什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-kafka中的isr、ar代表什么-isr的伸缩指什么"}},[e._v("#")]),e._v(" 14. Kafka中的ISR、AR代表什么？ISR的伸缩指什么？")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ISR")]),e._v("：In-Sync Replicas 副本同步队列")]),e._v(" "),a("li",[a("code",[e._v("AR")]),e._v(":Assigned Replicas 所有副本")])]),e._v(" "),a("p",[e._v("ISR是由leader维护，follower从leader同步数据有一些延迟（包括"),a("code",[e._v("延迟时间replica.lag.time.max.ms")]),e._v("和"),a("code",[e._v("延迟条数replica.lag.max.messages")]),e._v("两个维度，当前最新的版本0.10.x中只支持"),a("code",[e._v("replica.lag.time.max.ms")]),e._v("这个维度），任意一个超过阈值都会把follower剔除出ISR，存入OSR（Outof-Sync Replicas）列表，新加入的follower也会先存放在OSR中。")]),e._v(" "),a("blockquote",[a("p",[e._v("AR=ISR+OSR。")])]),e._v(" "),a("h2",{attrs:{id:"_15-描述下-kafka-中的领导者副本-leader-replica-和追随者副本-follower-replica-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-描述下-kafka-中的领导者副本-leader-replica-和追随者副本-follower-replica-的区别"}},[e._v("#")]),e._v(" 15. 描述下 Kafka 中的领导者副本（Leader Replica）和追随者副本（Follower Replica）的区别")]),e._v(" "),a("p",[e._v("Kafka副本当前分为领导者副本和追随者副本。只有Leader副本才能对外提供读写服务，响应Clients端的请求。Follower副本只是采用拉（PULL）的方式，被动地同步Leader副本中的数据，并且在Leader副本所在的Broker宕机后，随时准备应聘Leader副本。")]),e._v(" "),a("p",[e._v("加分点：")]),e._v(" "),a("ul",[a("li",[e._v("强调Follower副本也能对外提供读服务。自Kafka 2.4版本开始，社区通过引入新的Broker端参数，允许Follower副本有限度地提供读服务。")]),e._v(" "),a("li",[e._v("强调Leader和Follower的消息序列在实际场景中不一致。通常情况下，很多因素可能造成Leader和Follower之间的不同步，比如程序问题，网络问题，broker问题等，短暂的不同步我们可以关注（秒级别），但长时间的不同步可能就需要深入排查了，因为一旦Leader所在节点异常，可能直接影响可用性。")])]),e._v(" "),a("p",[e._v("注意：之前确保一致性的主要手段是高水位机制（HW），但高水位值无法保证Leader连续变更场景下的数据一致性，因此，社区引入了Leader Epoch机制，来修复高水位值的弊端。")]),e._v(" "),a("h2",{attrs:{id:"_16-分区leader选举策略有几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-分区leader选举策略有几种"}},[e._v("#")]),e._v(" 16. 分区Leader选举策略有几种？")]),e._v(" "),a("p",[e._v("分区的Leader副本选举对用户是完全透明的，它是由Controller独立完成的。你需要回答的是，在哪些场景下，需要执行分区Leader选举。每一种场景对应于一种选举策略。")]),e._v(" "),a("ul",[a("li",[e._v("OfflinePartition Leader选举：每当有分区上线时，就需要执行Leader选举。所谓的分区上线，可能是创建了新分区，也可能是之前的下线分区重新上线。这是最常见的分区Leader选举场景。")]),e._v(" "),a("li",[e._v("ReassignPartition Leader选举：当你手动运行kafka-reassign-partitions命令，或者是调用Admin的alterPartitionReassignments方法执行分区副本重分配时，可能触发此类选举。假设原来的AR是[1，2，3]，Leader是1，当执行副本重分配后，副本集合AR被设置成[4，5，6]，显然，Leader必须要变更，此时会发生Reassign Partition Leader选举。")]),e._v(" "),a("li",[e._v("PreferredReplicaPartition Leader选举：当你手动运行kafka-preferred-replica-election命令，或自动触发了Preferred Leader选举时，该类策略被激活。所谓的Preferred Leader，指的是AR中的第一个副本。比如AR是[3，2，1]，那么，Preferred Leader就是3。")]),e._v(" "),a("li",[e._v("ControlledShutdownPartition Leader选举：当Broker正常关闭时，该Broker上的所有Leader副本都会下线，因此，需要为受影响的分区执行相应的Leader选举。")])]),e._v(" "),a("p",[e._v("这4类选举策略的大致思想是类似的，即从AR中挑选首个在ISR中的副本，作为新Leader。")]),e._v(" "),a("h2",{attrs:{id:"_17-kafka的哪些场景中使用了零拷贝-zero-copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-kafka的哪些场景中使用了零拷贝-zero-copy"}},[e._v("#")]),e._v(" 17. Kafka的哪些场景中使用了零拷贝（Zero Copy）？")]),e._v(" "),a("p",[e._v("在Kafka中，体现Zero Copy使用场景的地方有两处：基于mmap的索引和日志文件读写所用的TransportLayer。")]),e._v(" "),a("p",[e._v("先说第一个。索引都是基于MappedByteBuffer的，也就是让用户态和内核态共享内核态的数据缓冲区，此时，数据不需要复制到用户态空间。不过，mmap虽然避免了不必要的拷贝，但不一定就能保证很高的性能。在不同的操作系统下，mmap的创建和销毁成本可能是不一样的。很高的创建和销毁开销会抵消Zero Copy带来的性能优势。由于这种不确定性，在Kafka中，只有索引应用了mmap，最核心的日志并未使用mmap机制。")]),e._v(" "),a("p",[e._v("再说第二个。TransportLayer是Kafka传输层的接口。它的某个实现类使用了FileChannel的transferTo方法。该方法底层使用sendfile实现了Zero Copy。对Kafka而言，如果I/O通道使用普通的PLAINTEXT，那么，Kafka就可以利用Zero Copy特性，直接将页缓存中的数据发送到网卡的Buffer中，避免中间的多次拷贝。相反，如果I/O通道启用了SSL，那么，Kafka便无法利用Zero Copy特性了。")]),e._v(" "),a("h2",{attrs:{id:"_18-为什么kafka不支持读写分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-为什么kafka不支持读写分离"}},[e._v("#")]),e._v(" 18. 为什么Kafka不支持读写分离？")]),e._v(" "),a("p",[e._v("在 Kafka 中，生产者写入消息、消费者读取消息的操作都是与 leader 副本进行交互的，从 而实现的是一种主写主读的生产消费模型。")]),e._v(" "),a("p",[e._v("Kafka 并不支持主写从读，因为主写从读有 2 个很明 显的缺点:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("数据一致性问题")]),e._v("。数据从主节点转到从节点必然会有一个延时的时间窗口，这个时间 窗口会导致主从节点之间的数据不一致。某一时刻，在主节点和从节点中 A 数据的值都为 X， 之后将主节点中 A 的值修改为 Y，那么在这个变更通知到从节点之前，应用读取从节点中的 A 数据的值并不为最新的 Y，由此便产生了数据不一致的问题。")]),e._v(" "),a("li",[a("strong",[e._v("延时问题")]),e._v("。类似 Redis 这种组件，数据从写入主节点到同步至从节点中的过程需要经历"),a("code",[e._v("网络→主节点内存→网络→从节点内存")]),e._v("这几个阶段，整个过程会耗费一定的时间。而在 Kafka 中，主从同步会比 Redis 更加耗时，它需要经历"),a("code",[e._v("网络→主节点内存→主节点磁盘→网络→从节点内存→从节点磁盘")]),e._v("这几个阶段。对延时敏感的应用而言，主写从读的功能并不太适用。")])]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("p",[e._v("http://dockone.io/article/10853")]),e._v(" "),a("p",[e._v("https://segmentfault.com/a/1190000023716306")]),e._v(" "),a("p",[e._v("https://dongzl.github.io/2020/03/16/13-Solve-MQ-Problem-With-Kafka/index.html")])])}),[],!1,null,null,null);a.default=r.exports}}]);