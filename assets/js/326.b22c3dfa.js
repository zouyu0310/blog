(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{951:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"一、常用注解回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、常用注解回顾"}},[t._v("#")]),t._v(" 一、常用注解回顾")]),t._v(" "),a("h2",{attrs:{id:"_1-1-requestbody与-responsebody"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-requestbody与-responsebody"}},[t._v("#")]),t._v(" 1.1 "),a("code",[t._v("@RequestBody")]),t._v("与"),a("code",[t._v("@ResponseBody")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意并不要求@RequestBody与@ResponseBody成对使用。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ResponseBody")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AjaxResponse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("saveArticle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestBody")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArticleVO")]),t._v(" article"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如上代码所示：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@RequestBody")]),t._v("修饰请求参数，注解用于接收HTTP的body，默认是使用JSON的格式")]),t._v(" "),a("li",[a("code",[t._v("@ResponseBody")]),t._v("修饰返回值，注解用于在HTTP的body中携带响应数据，默认是使用JSON的格式。如果不加该注解，spring响应字符串类型，是跳转到模板页面或JSP页面的开发模式。说白了：加上这个注解你开发的是一个数据接口，不加这个注解你开发的是一个页面跳转控制器。")])]),t._v(" "),a("p",[t._v("那么我们有一个问题：如果我们想接收或XML数据该怎么办？我们想响应excel的数据格式该怎么办？")]),t._v(" "),a("h2",{attrs:{id:"_1-2-requestmapping注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-requestmapping注解"}},[t._v("#")]),t._v(" 1.2. "),a("code",[t._v("@RequestMapping")]),t._v("注解")]),t._v(" "),a("p",[a("code",[t._v("@RequestMapping")]),t._v("注解是所有常用注解中，最有看点的一个注解，用于标注HTTP服务端点。它的很多属性对于丰富我们的应用开发方式方法，都有很重要的作用。如：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("value")]),t._v("： 应用请求端点，最核心的属性，用于标志请求处理方法的唯一性；")]),t._v(" "),a("li",[a("code",[t._v("method")]),t._v("： HTTP协议的method类型， 如：GET、POST、PUT、DELETE等；")]),t._v(" "),a("li",[a("code",[t._v("consumes")]),t._v("： HTTP协议请求内容的数据类型（Content-Type），例如"),a("code",[t._v("application/json")]),t._v(", "),a("code",[t._v("text/html")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("produces")]),t._v(": HTTP协议响应内容的数据类型。下文会详细讲解。")]),t._v(" "),a("li",[a("code",[t._v("params")]),t._v("： HTTP请求中必须包含某些参数值的时候，才允许被注解标注的方法处理请求。")]),t._v(" "),a("li",[a("code",[t._v("headers")]),t._v("： HTTP请求中必须包含某些指定的header值，才允许被注解标注的方法处理请求。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/article"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PostMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/article"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("上面代码中两种写法起到的是一样的效果，也就是"),a("code",[t._v("PostMapping")]),t._v("等同于"),a("code",[t._v("@RequestMapping")]),t._v("的method等于POST。同理："),a("code",[t._v("@GetMapping")]),t._v("、"),a("code",[t._v("@PutMapping")]),t._v("、"),a("code",[t._v("@DeleteMapping")]),t._v("也都是简写的方式。")]),t._v(" "),a("h2",{attrs:{id:"_1-3-restcontroller与-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-restcontroller与-controller"}},[t._v("#")]),t._v(" 1.3. "),a("code",[t._v("@RestController")]),t._v("与"),a("code",[t._v("@Controller")])]),t._v(" "),a("p",[a("code",[t._v("@Controller")]),t._v("注解是开发中最常使用的注解，它的作用有两层含义：")]),t._v(" "),a("ul",[a("li",[t._v("一是告诉Spring，被该注解标注的类是一个Spring的Bean，需要被注入到Spring的上下文环境中。")]),t._v(" "),a("li",[t._v("二是该类里面所有被"),a("code",[t._v("RequestMapping")]),t._v("标注的注解都是HTTP服务端点。")])]),t._v(" "),a("p",[a("code",[t._v("@RestController")]),t._v("相当于 "),a("code",[t._v("@Controller")]),t._v("和"),a("code",[t._v("@ResponseBody")]),t._v("结合。它有两层含义：")]),t._v(" "),a("ul",[a("li",[t._v("一是作为Controller的作用，将控制器类注入到Spring上下文环境，该类"),a("code",[t._v("RequestMapping")]),t._v("标注方法为HTTP服务端点。")]),t._v(" "),a("li",[t._v("二是作为"),a("code",[t._v("ResponseBody")]),t._v("的作用，请求响应默认使用的序列化方式是JSON，而不是跳转到"),a("code",[t._v("jsp")]),t._v("或模板页面。")])]),t._v(" "),a("h2",{attrs:{id:"_1-4-pathvariable-与-requestparam"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-pathvariable-与-requestparam"}},[t._v("#")]),t._v(" 1.4. "),a("code",[t._v("@PathVariable")]),t._v(" 与"),a("code",[t._v("@RequestParam")])]),t._v(" "),a("p",[a("code",[t._v("PathVariable")]),t._v("用于URI上的{参数}，如下方法用于删除一篇文章，其中id为文章id。如：我们的请求URL为“/article/1”,那么将匹配"),a("code",[t._v("DeleteMapping")]),t._v("并且"),a("code",[t._v("PathVariable")]),t._v("接收参数id=1。而"),a("code",[t._v("RequestParam")]),t._v("用于接收普通表单方式或者ajax模拟表单提交的参数数据。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@DeleteMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/article/{id}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ResponseBody")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AjaxResponse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteArticle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PathVariable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PostMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/article"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ResponseBody")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AjaxResponse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteArticle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestParam")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])]),a("h1",{attrs:{id:"二、接收复杂嵌套对象参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、接收复杂嵌套对象参数"}},[t._v("#")]),t._v(" 二、接收复杂嵌套对象参数")]),t._v(" "),a("p",[t._v("有一些朋友可能还无法理解"),a("code",[t._v("RequestBody")]),t._v("注解存在的真正意义，表单数据提交用"),a("code",[t._v("RequestParam")]),t._v("就好了，为什么还要搞出来一个"),a("code",[t._v("RequestBody")]),t._v("注解呢？"),a("code",[t._v("RequestBody")]),t._v("注解的真正意义在于能够使用对象或者嵌套对象接收前端数据*。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img//20200416133342.png",alt:""}})]),t._v(" "),a("p",[t._v("仔细看上面的代码，是一个"),a("code",[t._v("paramData")]),t._v("对象里面包含了一个"),a("code",[t._v("bestFriend")]),t._v("对象。这种数据结构使用"),a("code",[t._v("RequestParam")]),t._v("就无法接收了，"),a("code",[t._v("RequestParam")]),t._v("只能接收平面的、一对一的参数。像上文中这种数据结构的参数，就需要我们在java服务端定义两个类，一个类是"),a("code",[t._v("ParamData")]),t._v("，一个类是"),a("code",[t._v("BestFriend")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParamData")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" phone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BestFriend")]),t._v(" bestFriend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BestFriend")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注意上面代码中省略了GET、SET方法等必要的java plain model元素。")]),t._v(" "),a("li",[t._v("注意成员变量名称一定要和JSON属性名称对应上。")]),t._v(" "),a("li",[t._v("注意接收不同类型的参数，使用不同的成员变量类型")])]),t._v(" "),a("p",[t._v("完成以上动作，我们就可以使用"),a("code",[t._v("@RequestBody ParamData paramData")]),t._v("，一次性的接收以上所有的复杂嵌套对象参数了，参数对象的所有属性都将被赋值。")]),t._v(" "),a("h1",{attrs:{id:"三、http数据转换的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、http数据转换的原理"}},[t._v("#")]),t._v(" 三、Http数据转换的原理")]),t._v(" "),a("p",[t._v("大家现在使用JSON都比较普遍了，其方便易用、表达能力强，是绝大部分数据接口式应用的首选。那么如何响应其他的类型的数据？其中的判别原理又是什么？下面就来给大家介绍一下：\n"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img//20200416134205.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("当一个HTTP请求到达时是一个"),a("code",[t._v("InputStream")]),t._v("，通过"),a("code",[t._v("HttpMessageConverter")]),t._v("转换为java对象，从而进行参数接收。")]),t._v(" "),a("li",[t._v("当对一个HTTP请求进行响应时，我们首先输出的是一个java对象，然后由"),a("code",[t._v("HttpMessageConverter")]),t._v("转换为"),a("code",[t._v("OutputStream")]),t._v("输出。")])]),t._v(" "),a("p",[t._v("当我们在Spring Boot应用中集成了"),a("code",[t._v("jackson")]),t._v("的类库之后，如下的一些"),a("code",[t._v("HttpMessageConverter")]),t._v("将会被加载。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("实现类")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("功能说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("StringHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将请求信息转为字符串")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("FormHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将表单数据读取到"),a("code",[t._v("MultiValueMap")]),t._v("中")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("XmlAwareFormHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("扩展与"),a("code",[t._v("FormHttpMessageConverter")]),t._v("，如果部分表单属性是XML数据，可用该转换器进行读取")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ResourceHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("读写"),a("code",[t._v("org.springframework.core.io.Resource")]),t._v("对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("BufferedImageHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("读写"),a("code",[t._v("BufferedImage")]),t._v("对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("ByteArrayHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("读写二进制数据")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("SourceHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("读写"),a("code",[t._v("java.xml.transform.Source")]),t._v("类型的对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("MarshallingHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("通过Spring的"),a("code",[t._v("org.springframework,xml.Marshaller")]),t._v("和"),a("code",[t._v("Unmarshaller")]),t._v("读写XML消息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("Jaxb2RootElementHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("通过JAXB2读写XML消息，将请求消息转换为标注的"),a("code",[t._v("XmlRootElement")]),t._v("和"),a("code",[t._v("XmlType")]),t._v("连接的类中")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("MappingJacksonHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用Jackson开源包的"),a("code",[t._v("ObjectMapper")]),t._v("读写JSON数据")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("RssChannelHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("读写RSS种子消息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("AtomFeedHttpMessageConverter")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("和"),a("code",[t._v("RssChannelHttpMessageConverter")]),t._v("能够读写RSS种子消息")])])])]),t._v(" "),a("p",[t._v("根据HTTP协议的Accept和Content-Type属性，以及参数数据类型来判别使用哪一种"),a("code",[t._v("HttpMessageConverter")]),t._v("。当使用"),a("code",[t._v("RequestBody")]),t._v("或"),a("code",[t._v("ResponseBody")]),t._v("时，再结合前端发送的Accept数据类型，会自动判定优先使用"),a("code",[t._v("MappingJacksonHttpMessageConverter")]),t._v("作为数据转换器。但是，不仅JSON可以表达对象数据类型，XML也可以。如果我们希望使用XML格式该怎么告知Spring呢，那就要使用到produces属性了。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/demo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("produces "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MediaType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("APPLICATION_XML_VALUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里我们明确的告知了返回的数据类型是"),a("code",[t._v("xml")]),t._v("，就会使用"),a("code",[t._v("Jaxb2RootElementHttpMessageConverter")]),t._v("作为默认的数据转换器。当然实现XML数据响应比JSON还会更复杂一些，还需要结合"),a("code",[t._v("@XmlRootElement")]),t._v("、"),a("code",[t._v("@XmlElement")]),t._v("等注解实体类来使用。同理consumes属性你是不是也会用了呢。")]),t._v(" "),a("h1",{attrs:{id:"四、自定义httpmessageconverter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、自定义httpmessageconverter"}},[t._v("#")]),t._v(" 四、自定义"),a("code",[t._v("HttpMessageConverter")])]),t._v(" "),a("p",[t._v("其实绝大多数的数据格式都不需要我们自定义"),a("code",[t._v("HttpMessageConverter")]),t._v("，都有第三方类库可以帮助我们实现(包括下文代码中的Excel格式)。但有的时候，有些数据的输出格式并没有类似于Jackson这种类库帮助我们处理，需要我们自定义数据格式。该怎么做?下面代码只是帮助我们理解的一个例子，不要用于生产：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TeamToXlsConverter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractHttpMessageConverter")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Team")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MediaType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EXCEL_TYPE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MediaType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application/vnd.ms-excel"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TeamToXlsConverter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EXCEL_TYPE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Team")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readInternal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Team")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpInputMessage")]),t._v(" inputMessage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpMessageNotReadableException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("supports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Team")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" clazz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeInternal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Team")]),t._v(" team"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpOutputMessage")]),t._v(" outputMessage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpMessageNotWritableException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Workbook")]),t._v(" workbook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HSSFWorkbook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sheet")]),t._v(" sheet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSheet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rowNo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TeamMember")]),t._v(" member "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" team"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMembers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Row")]),t._v(" row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sheet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rowNo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCell")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setCellValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("member"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            workbook"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outputMessage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBody")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("实现"),a("code",[t._v("AbstractHttpMessageConverter")]),t._v("接口")]),t._v(" "),a("li",[t._v('指定该转换器是针对哪种数据格式的？如上文代码中的"application/vnd.ms-excel"')]),t._v(" "),a("li",[t._v("指定该转换器针对那些对象数据类型？如上文代码中的supports函数")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("writeInternal")]),t._v("对数据进行输出处理，上例中是输出为Excel格式。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);