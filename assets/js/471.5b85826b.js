(window.webpackJsonp=window.webpackJsonp||[]).push([[471],{1137:function(t,r,e){"use strict";e.r(r);var s=e(14),a=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[r("strong",[t._v("本文只是对 Docker 的概念做了较为详细的介绍，并不涉及一些像 Docker 环境的安装以及 Docker 的一些常见操作和命令。")])]),t._v(" "),r("h2",{attrs:{id:"一-认识容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一-认识容器"}},[t._v("#")]),t._v(" 一 认识容器")]),t._v(" "),r("p",[r("strong",[t._v("Docker 是世界领先的软件容器平台")]),t._v("，所以想要搞懂 Docker 的概念我们必须先从容器开始说起。")]),t._v(" "),r("h3",{attrs:{id:"_1-1-什么是容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是容器"}},[t._v("#")]),t._v(" 1.1 什么是容器?")]),t._v(" "),r("h4",{attrs:{id:"先来看看容器较为官方的解释"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#先来看看容器较为官方的解释"}},[t._v("#")]),t._v(" 先来看看容器较为官方的解释")]),t._v(" "),r("p",[r("strong",[t._v("一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("容器镜像是轻量的、可执行的独立软件包")]),t._v(" ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。")]),t._v(" "),r("li",[r("strong",[t._v("容器化软件适用于基于 Linux 和 Windows 的应用，在任何环境中都能够始终如一地运行。")])]),t._v(" "),r("li",[r("strong",[t._v("容器赋予了软件独立性")]),t._v("，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。")])]),t._v(" "),r("h4",{attrs:{id:"再来看看容器较为通俗的解释"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#再来看看容器较为通俗的解释"}},[t._v("#")]),t._v(" 再来看看容器较为通俗的解释")]),t._v(" "),r("p",[r("strong",[t._v("如果需要通俗地描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/container.png",alt:"认识容器"}})]),t._v(" "),r("h3",{attrs:{id:"_1-2-图解物理机-虚拟机与容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-图解物理机-虚拟机与容器"}},[t._v("#")]),t._v(" 1.2 图解物理机,虚拟机与容器")]),t._v(" "),r("p",[t._v("关于虚拟机与容器的对比在后面会详细介绍到，这里只是通过网上的图片加深大家对于物理机、虚拟机与容器这三者的理解(下面的图片来源于网络)。")]),t._v(" "),r("p",[r("strong",[t._v("物理机：")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/%E7%89%A9%E7%90%86%E6%9C%BA%E5%9B%BE%E8%A7%A3.png",alt:"物理机"}})]),t._v(" "),r("p",[r("strong",[t._v("虚拟机：")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%BE%E8%A7%A3.png",alt:"虚拟机"}})]),t._v(" "),r("p",[r("strong",[t._v("容器：")])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/image-20211110104003678.png",alt:""}})]),t._v(" "),r("p",[t._v("通过上面这三张抽象图，我们可以大概通过类比概括出： "),r("strong",[t._v("容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。")])]),t._v(" "),r("hr"),t._v(" "),r("p",[r("strong",[t._v("相信通过上面的解释大家对于容器这个既陌生又熟悉的概念有了一个初步的认识，下面我们就来谈谈 Docker 的一些概念。")])]),t._v(" "),r("h2",{attrs:{id:"二-再来谈谈-docker-的一些概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二-再来谈谈-docker-的一些概念"}},[t._v("#")]),t._v(" 二 再来谈谈 Docker 的一些概念")]),t._v(" "),r("h3",{attrs:{id:"_2-1-什么是-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是-docker"}},[t._v("#")]),t._v(" 2.1 什么是 Docker?")]),t._v(" "),r("p",[t._v("说实话关于 Docker 是什么并太好说，下面我通过四点向你说明 Docker 到底是个什么东西。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Docker 是世界领先的软件容器平台。")])]),t._v(" "),r("li",[r("strong",[t._v("Docker")]),t._v(" 使用 Google 公司推出的 "),r("strong",[t._v("Go 语言")]),t._v(" 进行开发实现，基于 "),r("strong",[t._v("Linux 内核")]),t._v(" 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 "),r("strong",[t._v("UnionFS")]),t._v(" 等技术，"),r("strong",[t._v("对进程进行封装隔离，属于操作系统层面的虚拟化技术。")]),t._v(" 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。")]),t._v(" "),r("li",[r("strong",[t._v("Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。")])]),t._v(" "),r("li",[r("strong",[t._v("用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")])])]),t._v(" "),r("h3",{attrs:{id:"_2-2-docker-思想"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-docker-思想"}},[t._v("#")]),t._v(" 2.2 Docker 思想")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("集装箱")])]),t._v(" "),r("li",[r("strong",[t._v("标准化：")]),t._v(" ① 运输方式 ② 存储方式 ③ API 接口")]),t._v(" "),r("li",[r("strong",[t._v("隔离")])])]),t._v(" "),r("h3",{attrs:{id:"_2-3-docker-容器的特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-docker-容器的特点"}},[t._v("#")]),t._v(" 2.3 Docker 容器的特点")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("轻量")]),t._v(" :  在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。")]),t._v(" "),r("li",[r("strong",[t._v("标准")]),t._v(" : Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。")]),t._v(" "),r("li",[r("strong",[t._v("安全")]),t._v(" : Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。")])]),t._v(" "),r("h3",{attrs:{id:"_2-4-为什么要用-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-为什么要用-docker"}},[t._v("#")]),t._v(" 2.4 为什么要用 Docker ?")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题；——一致的运行环境")])]),t._v(" "),r("li",[r("strong",[t._v("可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间")])]),t._v(" "),r("li",[r("strong",[t._v("避免公用的服务器，资源会容易受到其他用户的影响。——隔离性")])]),t._v(" "),r("li",[r("strong",[t._v("善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展")])]),t._v(" "),r("li",[r("strong",[t._v("可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便")])]),t._v(" "),r("li",[r("strong",[t._v("使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署")])])]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"三-容器-vs-虚拟机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三-容器-vs-虚拟机"}},[t._v("#")]),t._v(" 三 容器 VS 虚拟机")]),t._v(" "),r("p",[r("strong",[t._v("每当说起容器，我们不得不将其与虚拟机做一个比较。就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。")])]),t._v(" "),r("p",[t._v("简单来说： "),r("strong",[t._v("容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。")])]),t._v(" "),r("h3",{attrs:{id:"_3-1-两者对比图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-两者对比图"}},[t._v("#")]),t._v(" 3.1 两者对比图")]),t._v(" "),r("p",[t._v("传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/2e2b95eebf60b6d03f6c1476f4d7c697.png",alt:""}})]),t._v(" "),r("h3",{attrs:{id:"_3-2-容器与虚拟机总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-容器与虚拟机总结"}},[t._v("#")]),t._v(" 3.2 容器与虚拟机总结")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/4ef8691d67eb1eb53217099d0a691eb5.png",alt:""}})]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("容器是一个应用层抽象，用于将代码和依赖资源打包在一起。")]),t._v(" "),r("strong",[t._v("多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行")]),t._v(" 。与虚拟机相比， "),r("strong",[t._v("容器占用的空间较少")]),t._v("（容器镜像大小通常只有几十兆），"),r("strong",[t._v("瞬间就能完成启动")]),t._v(" 。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。")]),t._v(" 管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 "),r("strong",[t._v("占用大量空间")]),t._v(" 。而且 VM "),r("strong",[t._v("启动也十分缓慢")]),t._v(" 。")])])]),t._v(" "),r("p",[t._v("通过 Docker 官网，我们知道了这么多 Docker 的优势，但是大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。"),r("strong",[t._v("虚拟机更擅长于彻底隔离整个运行环境")]),t._v("。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 "),r("strong",[t._v("Docker 通常用于隔离不同的应用")]),t._v(" ，例如前端，后端以及数据库。")]),t._v(" "),r("h3",{attrs:{id:"_3-3-容器与虚拟机两者是可以共存的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-容器与虚拟机两者是可以共存的"}},[t._v("#")]),t._v(" 3.3 容器与虚拟机两者是可以共存的")]),t._v(" "),r("p",[t._v("就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/javaguide/056c87751b9dd7b56f4264240fe96d00.png",alt:""}})]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"四-docker-基本概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四-docker-基本概念"}},[t._v("#")]),t._v(" 四 Docker 基本概念")]),t._v(" "),r("p",[r("strong",[t._v("Docker 中有非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("镜像（Image）")])]),t._v(" "),r("li",[r("strong",[t._v("容器（Container）")])]),t._v(" "),r("li",[r("strong",[t._v("仓库（Repository）")])])]),t._v(" "),r("p",[t._v("理解了这三个概念，就理解了 Docker 的整个生命周期")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/docker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png",alt:"docker基本概念"}})]),t._v(" "),r("h3",{attrs:{id:"_4-1-镜像-image-一个特殊的文件系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-镜像-image-一个特殊的文件系统"}},[t._v("#")]),t._v(" 4.1 镜像(Image):一个特殊的文件系统")]),t._v(" "),r("p",[r("strong",[t._v("操作系统分为内核和用户空间")]),t._v("。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。")]),t._v(" "),r("p",[r("strong",[t._v("Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。")]),t._v(" 镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),t._v(" "),r("p",[t._v("Docker 设计时，就充分利用 "),r("strong",[t._v("Union FS")]),t._v(" 的技术，将其设计为"),r("strong",[t._v("分层存储的架构")]),t._v(" 。镜像实际是由多层文件系统联合组成。")]),t._v(" "),r("p",[r("strong",[t._v("镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。")]),t._v(" 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。")]),t._v(" "),r("p",[t._v("分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。")]),t._v(" "),r("h3",{attrs:{id:"_4-2-容器-container-镜像运行时的实体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-容器-container-镜像运行时的实体"}},[t._v("#")]),t._v(" 4.2 容器(Container):镜像运行时的实体")]),t._v(" "),r("p",[t._v("镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，"),r("strong",[t._v("容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等")]),t._v(" 。")]),t._v(" "),r("p",[r("strong",[t._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。")])]),t._v(" "),r("p",[r("strong",[t._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")])]),t._v(" "),r("p",[t._v("按照 Docker 最佳实践的要求，"),r("strong",[t._v("容器不应该向其存储层内写入任何数据")]),t._v(" ，容器存储层要保持无状态化。"),r("strong",[t._v("所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录")]),t._v("，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， "),r("strong",[t._v("使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。")])]),t._v(" "),r("h3",{attrs:{id:"_4-3-仓库-repository-集中存放镜像文件的地方"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-仓库-repository-集中存放镜像文件的地方"}},[t._v("#")]),t._v(" 4.3 仓库(Repository):集中存放镜像文件的地方")]),t._v(" "),r("p",[t._v("镜像构建完成后，可以很容易的在当前宿主上运行，但是， "),r("strong",[t._v("如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。")])]),t._v(" "),r("p",[t._v("一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说："),r("strong",[t._v("镜像仓库是 Docker 用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。")])]),t._v(" "),r("p",[t._v("通常，"),r("strong",[t._v("一个仓库会包含同一个软件不同版本的镜像")]),t._v("，而"),r("strong",[t._v("标签就常用于对应该软件的各个版本")]),t._v(" 。我们可以通过"),r("code",[t._v("<仓库名>:<标签>")]),t._v("的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。")]),t._v(" "),r("p",[r("strong",[t._v("这里补充一下 Docker Registry 公开服务和私有 Docker Registry 的概念：")])]),t._v(" "),r("p",[r("strong",[t._v("Docker Registry 公开服务")]),t._v(" 是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。")]),t._v(" "),r("p",[t._v("最常使用的 Registry 公开服务是官方的 "),r("strong",[t._v("Docker Hub")]),t._v(" ，这也是默认的 Registry，并拥有大量的高质量的官方镜像，网址为："),r("a",{attrs:{href:"https://hub.docker.com/",title:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hub.docker.com/"),r("OutboundLink")],1),t._v(" 。官方是这样介绍 Docker Hub 的：")]),t._v(" "),r("blockquote",[r("p",[t._v("Docker Hub 是 Docker 官方提供的一项服务，用于与您的团队查找和共享容器镜像。")])]),t._v(" "),r("p",[t._v("比如我们想要搜索自己想要的镜像：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-7/Screen%20Shot%202019-11-04%20at%208.21.39%20PM.png",alt:"利用Docker Hub 搜索镜像"}})]),t._v(" "),r("p",[t._v("在 Docker Hub 的搜索结果中，有几项关键的信息有助于我们选择合适的镜像：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("OFFICIAL Image")]),t._v(" ：代表镜像为 Docker 官方提供和维护，相对来说稳定性和安全性较高。")]),t._v(" "),r("li",[r("strong",[t._v("Stars")]),t._v(" ：和点赞差不多的意思，类似 GitHub 的 Star。")]),t._v(" "),r("li",[r("strong",[t._v("Dowloads")]),t._v(" ：代表镜像被拉取的次数，基本上能够表示镜像被使用的频度。")])]),t._v(" "),r("p",[t._v("当然，除了直接通过 Docker Hub 网站搜索镜像这种方式外，我们还可以通过 "),r("code",[t._v("docker search")]),t._v(" 这个命令搜索 Docker Hub 中的镜像，搜索的结果是一致的。")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[t._v("➜  ~ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" search mysql\nNAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nmysql                             MySQL is a widely used, open-source relation…   "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8763")]),t._v("                "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OK"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmariadb                           MariaDB is a community-developed fork of MyS…   "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3073")]),t._v("                "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OK"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmysql/mysql-server                Optimized MySQL Server Docker images. Create…   "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("650")]),t._v("                                     "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("OK"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),r("p",[t._v("在国内访问"),r("strong",[t._v("Docker Hub")]),t._v(" 可能会比较慢国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 "),r("a",{attrs:{href:"https://www.tenxcloud.com/",title:"时速云镜像库",target:"_blank",rel:"noopener noreferrer"}},[t._v("时速云镜像库"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://www.163yun.com/product/repo",title:"网易云镜像服务",target:"_blank",rel:"noopener noreferrer"}},[t._v("网易云镜像服务"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://www.daocloud.io/",title:"DaoCloud 镜像市场",target:"_blank",rel:"noopener noreferrer"}},[t._v("DaoCloud 镜像市场"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://www.aliyun.com/product/containerservice?utm_content=se_1292836",title:"阿里云镜像库",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里云镜像库"),r("OutboundLink")],1),t._v("等。")]),t._v(" "),r("p",[t._v("除了使用公开服务外，用户还可以在 "),r("strong",[t._v("本地搭建私有 Docker Registry")]),t._v(" 。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。")]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"五-常见命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五-常见命令"}},[t._v("#")]),t._v(" 五 常见命令")]),t._v(" "),r("h3",{attrs:{id:"_5-1-基本命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-基本命令"}},[t._v("#")]),t._v(" 5.1 基本命令")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" version "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看docker版本")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有已下载镜像，等价于：docker image ls 命令")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t查看所有容器")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看正在运行的容器")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image prune "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清理临时的、没有被使用的镜像文件。-a, --all: 删除所有没有用的镜像，而不仅仅是临时文件；")]),t._v("\n")])])]),r("h3",{attrs:{id:"_5-2-拉取镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-拉取镜像"}},[t._v("#")]),t._v(" 5.2 拉取镜像")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" search mysql "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看mysql相关镜像")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull mysql:5.7 "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取mysql镜像")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" image "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有已下载镜像")]),t._v("\n")])])]),r("h3",{attrs:{id:"_5-3-删除镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-删除镜像"}},[t._v("#")]),t._v(" 5.3 删除镜像")]),t._v(" "),r("p",[t._v("比如我们要删除我们下载的 mysql 镜像。")]),t._v(" "),r("p",[t._v("通过 "),r("code",[t._v("docker rmi [image]")]),t._v(" （等价于"),r("code",[t._v("docker image rm [image]")]),t._v("）删除镜像之前首先要确保这个镜像没有被容器引用（可以通过标签名称或者镜像 ID删除）。通过我们前面讲的"),r("code",[t._v("docker ps")]),t._v("命令即可查看。")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("➜  ~ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES\nc4cd691d9f80        mysql:5.7           "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-entrypoint.s…"')]),t._v("   "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" weeks ago         Up "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" days          "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:3306-"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),t._v("/tcp, "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("33060")]),t._v("/tcp   mysql\n")])])]),r("p",[t._v("可以看到 mysql 正在被 id 为 c4cd691d9f80 的容器引用，我们需要首先通过 "),r("code",[t._v("docker stop c4cd691d9f80")]),t._v(" 或者 "),r("code",[t._v("docker stop mysql")]),t._v("暂停这个容器。")]),t._v(" "),r("p",[t._v("然后查看 mysql 镜像的 id")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("➜  ~ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" images\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\nmysql                   "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.7")]),t._v("                 f6509bac4980        "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" months ago        373MB\n")])])]),r("p",[t._v("通过 IMAGE ID  或者 REPOSITORY 名字即可删除")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" rmi f6509bac4980 "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  或者 docker rmi mysql ")]),t._v("\n")])])]),r("h2",{attrs:{id:"六-build-ship-and-run"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六-build-ship-and-run"}},[t._v("#")]),t._v(" 六 Build Ship and Run")]),t._v(" "),r("p",[r("strong",[t._v("Docker 的概念以及常见命令基本上已经讲完，我们再来谈谈：Build, Ship, and Run。")])]),t._v(" "),r("p",[t._v("如果你搜索 Docker 官网，会发现如下的字样："),r("strong",[t._v("“Docker - Build, Ship, and Run Any App, Anywhere”")]),t._v("。那么 Build, Ship, and Run 到底是在干什么呢？")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/2419919953764fc690c929d3844f7011.png",alt:""}})]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Build（构建镜像）")]),t._v(" ： 镜像就像是集装箱包括文件以及运行环境等等资源。")]),t._v(" "),r("li",[r("strong",[t._v("Ship（运输镜像）")]),t._v(" ：主机和仓库间运输，这里的仓库就像是超级码头一样。")]),t._v(" "),r("li",[r("strong",[t._v("Run （运行镜像）")]),t._v(" ：运行的镜像就是一个容器，容器就是运行程序的地方。")])]),t._v(" "),r("p",[r("strong",[t._v("Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器。所以，我们也常常将 Docker 称为码头工人或码头装卸工，这和 Docker 的中文翻译搬运工人如出一辙。")])]),t._v(" "),r("h2",{attrs:{id:"七-简单了解一下-docker-底层原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#七-简单了解一下-docker-底层原理"}},[t._v("#")]),t._v(" 七 简单了解一下 Docker 底层原理")]),t._v(" "),r("h3",{attrs:{id:"_7-1-虚拟化技术"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-虚拟化技术"}},[t._v("#")]),t._v(" 7.1 虚拟化技术")]),t._v(" "),r("p",[t._v("首先，Docker "),r("strong",[t._v("容器虚拟化")]),t._v("技术为基础的软件，那么什么是虚拟化技术呢？")]),t._v(" "),r("p",[t._v("简单点来说，虚拟化技术可以这样定义：")]),t._v(" "),r("blockquote",[r("p",[t._v('虚拟化技术是一种资源管理技术，是将计算机的各种[实体资源](https://zh.wikipedia.org/wiki/資源_(計算機科學 "实体资源"))（'),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/CPU",title:"CPU",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98",title:"内存",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4",title:"磁盘空间",target:"_blank",rel:"noopener noreferrer"}},[t._v("磁盘空间"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E9%81%A9%E9%85%8D%E5%99%A8",title:"网络适配器",target:"_blank",rel:"noopener noreferrer"}},[t._v("网络适配器"),r("OutboundLink")],1),t._v("等），予以抽象、转换后呈现出来并可供分割、组合为一个或多个电脑配置环境。由此，打破实体结构间的不可切割的障碍，使用户可以比原本的配置更好的方式来应用这些电脑硬件资源。这些资源的新虚拟部分是不受现有资源的架设方式，地域或物理配置所限制。一般所指的虚拟化资源包括计算能力和数据存储。")])]),t._v(" "),r("h3",{attrs:{id:"_7-2-docker-基于-lxc-虚拟容器技术"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-docker-基于-lxc-虚拟容器技术"}},[t._v("#")]),t._v(" 7.2 Docker 基于 LXC 虚拟容器技术")]),t._v(" "),r("p",[t._v("Docker 技术是基于 LXC（Linux container- Linux 容器）虚拟容器技术的。")]),t._v(" "),r("blockquote",[r("p",[t._v("LXC，其名称来自 Linux 软件容器（Linux Containers）的缩写，一种操作系统层虚拟化（Operating system–level virtualization）技术，为 Linux 内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用 API 来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得 Linux 用户可以容易的创建和管理系统或应用容器。")])]),t._v(" "),r("p",[t._v("LXC 技术主要是借助 Linux 内核中提供的 CGroup 功能和 namespace 来实现的，通过 LXC 可以为软件提供一个独立的操作系统运行环境。")]),t._v(" "),r("p",[r("strong",[t._v("cgroup 和 namespace 介绍：")])]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("namespace 是 Linux 内核用来隔离内核资源的方式。")]),t._v(" 通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。")]),t._v(" "),r("p",[t._v("（以上关于 namespace 介绍内容来自https://www.cnblogs.com/sparkdev/p/9365405.html ，更多关于 namespace 的呢内容可以查看这篇文章 ）。")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("CGroup 是 Control Groups 的缩写，是 Linux 内核提供的一种可以限制、记录、隔离进程组 (process groups) 所使用的物力资源 (如 cpu memory i/o 等等) 的机制。")])]),t._v(" "),r("p",[t._v("（以上关于 CGroup 介绍内容来自 https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html ，更多关于 CGroup 的内容可以查看这篇文章 ）。")])])]),t._v(" "),r("p",[r("strong",[t._v("cgroup 和 namespace 两者对比：")])]),t._v(" "),r("p",[t._v("两者都是将进程进行分组，但是两者的作用还是有本质区别。namespace 是为了隔离进程组之间的资源，而 cgroup 是为了对一组进程进行统一的资源监控和限制。")]),t._v(" "),r("h2",{attrs:{id:"八-总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#八-总结"}},[t._v("#")]),t._v(" 八 总结")]),t._v(" "),r("p",[t._v("本文主要把 Docker 中的一些常见概念做了详细的阐述，但是并不涉及 Docker 的安装、镜像的使用、容器的操作等内容。这部分东西，希望读者自己可以通过阅读书籍与官方文档的形式掌握。如果觉得官方文档阅读起来很费力的话，这里推荐一本书籍《Docker 技术入门与实战第二版》。")]),t._v(" "),r("h2",{attrs:{id:"九-推荐阅读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#九-推荐阅读"}},[t._v("#")]),t._v(" 九 推荐阅读")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/53260098",title:"10分钟看懂Docker和K8S",target:"_blank",rel:"noopener noreferrer"}},[t._v("10 分钟看懂 Docker 和 K8S"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.infoq.cn/article/te70FlSyxhltL1Cr7gzM",title:"从零开始入门 K8s：详解 K8s 容器基本概念",target:"_blank",rel:"noopener noreferrer"}},[t._v("从零开始入门 K8s：详解 K8s 容器基本概念"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"十-参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十-参考"}},[t._v("#")]),t._v(" 十 参考")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000009732550",title:"Linux Namespace和Cgroup",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Namespace 和 Cgroup"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.upguard.com/articles/docker-vs-lxc",title:"LXC vs Docker: Why Docker is Better",target:"_blank",rel:"noopener noreferrer"}},[t._v("LXC vs Docker: Why Docker is Better"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html",title:"CGroup 介绍、应用实例及原理描述",target:"_blank",rel:"noopener noreferrer"}},[t._v("CGroup 介绍、应用实例及原理描述"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=a.exports}}]);