(window.webpackJsonp=window.webpackJsonp||[]).push([[502],{1173:function(t,e,i){"use strict";i.r(e);var a=i(14),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[t._v("#")]),t._v(" 是什么")]),t._v(" "),e("h3",{attrs:{id:"上述问题的解决思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#上述问题的解决思路"}},[t._v("#")]),t._v(" 上述问题的解决思路")]),t._v(" "),e("p",[t._v("管道(pipeline)可以一次性发送多条命令给服务端，"),e("strong",[t._v("服务端依次处理完毕后，通过一 条响应一次性将结果返回，通过减少客户端与redis的通信次数来实现降低往返延时时间")]),t._v("。pipeline实现的原理是队列，先进先出特性就保证数据的顺序性。")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/2.jpg",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"官网"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#官网"}},[t._v("#")]),t._v(" 官网：")]),t._v(" "),e("p",[t._v("https://redis.io/docs/manual/pipelining/")]),t._v(" "),e("h3",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义：")]),t._v(" "),e("p",[t._v("pipeline是为了解决RTT往返时，仅仅是将命令打包一次性发送，对整个Redis的执行不造成其他任何影响")]),t._v(" "),e("h3",{attrs:{id:"一句话"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一句话"}},[t._v("#")]),t._v(" 一句话：")]),t._v(" "),e("p",[e("strong",[t._v("批处理命令变种优化措施")]),t._v("，类似Redis的原生批命令(mget和mset)")]),t._v(" "),e("h3",{attrs:{id:"案例演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例演示"}},[t._v("#")]),t._v(" 案例演示")]),t._v(" "),e("p",[e("img",{attrs:{src:"images/3.jpg",alt:""}})]),t._v(" "),e("h3",{attrs:{id:"小总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小总结"}},[t._v("#")]),t._v(" 小总结")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("pipeline与原生批量命令对比")]),t._v(" "),e("ol",[e("li",[t._v("原生批量命令是原子性(例如：mset、mget)，$\\textcolor{red}{pipeline是非原子性的}$")]),t._v(" "),e("li",[t._v("原生批量命令一次只能执行一种命令，pipeline支持批量执行不同命令")]),t._v(" "),e("li",[t._v("原生批量命令是服务端实现，而pipeline需要服务端与客户端共同完成")])])]),t._v(" "),e("li",[e("p",[t._v("pipeline与事务对比")]),t._v(" "),e("ol",[e("li",[t._v("事务具有原子性，管道不具有原子性")]),t._v(" "),e("li",[t._v("管道一次性将多条命令发送到服务器，事务是一条一条的发，事务只有在接收到exec命令后才会执行，管道不会")]),t._v(" "),e("li",[t._v("执行事务时会阻塞其他命令的执行，而执行管道中的命令时不会")])])]),t._v(" "),e("li",[e("p",[t._v("使用pipeline注意事项")]),t._v(" "),e("ol",[e("li",[t._v("pipeline缓冲的指令只是会依次执行，不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令")]),t._v(" "),e("li",[t._v("使用pipeline组装的命令个数不能太多，不然数量过大客户端阻塞的时间可能过久，同时服务端此时也被迫回复一个队列答复，占用很多内存")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);