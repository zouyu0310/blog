(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{790:function(e,t,n){"use strict";n.r(t);var o=n(14),s=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"安装docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装docker-compose"}},[e._v("#")]),e._v(" 安装docker-compose")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("https://github.com/docker/compose\n")])])]),t("p",[e._v("下载相应版本 如:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-windows-x86_64.exe",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker-compose-windows-x86_64.exe"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("下载完成后 双击安装")]),e._v(" "),t("p",[e._v("验证成功")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker-compose -v\n\nDocker Compose version v2.15.1\n")])])]),t("h2",{attrs:{id:"使用docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用docker-compose"}},[e._v("#")]),e._v(" 使用docker-compose")]),e._v(" "),t("blockquote",[t("p",[e._v("使用docker-compose前提情况，需要创建一个文件名为docker-compose.yml的文件。")])]),e._v(" "),t("ol",[t("li",[e._v("配置与启动tomcat")]),e._v(" "),t("li",[e._v("创建docker-compose.yml")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("version: '3'\n\nservices:\n\n  tomcat:\n\n    restart: always\n\n    image: tomcat\n\n    container_name: tomcat\n\n    ports:\n\n      - 8080:8080\n\n    volumes:\n\n      - /d/DevelopData/DockerData/tomcat/webapps:/usr/local/tomcat/webapps\n\n      - /d/DevelopData/DockerData/tomcat/logs:/usr/local/tomcat/logs\n\n    environment:\n\n      TZ: Asia/Shanghai\n\n")])])]),t("p",[e._v("解释说明\nversion:’3’ :表示compose对docker版本的支持，这里是compose版本，并非是docker版本。")]),e._v(" "),t("p",[e._v("services: 表示一个该配置文件的所有容器实例，支持配置多个容器实例。")]),e._v(" "),t("p",[e._v("tomcat:表示是一个多个容器中的其中一个")]),e._v(" "),t("p",[e._v("restart: always：表示该容器实例是随着机器启动而启动。")]),e._v(" "),t("p",[e._v("image: tomcat：表示本容器使用的镜像是tomcat，如需要指定版本号则 image: tomcat:8.0。")]),e._v(" "),t("p",[e._v("container_name: tomcat:表示容器的一个别名。")]),e._v(" "),t("p",[e._v("ports：表示容器端口映射到宿主机端口。")]),e._v(" "),t("p",[e._v("volumes：表示dockers容器的数据卷，将容器实例的目录映射到宿主机上盘符目录。")]),e._v(" "),t("p",[e._v("environment：表示容器环境的设置，我这里配置的是tomcat容器的时区时间为亚洲/上海。")]),e._v(" "),t("h2",{attrs:{id:"启动docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动docker-compose"}},[e._v("#")]),e._v(" 启动docker-compose")]),e._v(" "),t("blockquote",[t("p",[e._v("首先进入到你docker-compose.yml文件所存放的目录")])]),e._v(" "),t("ol",[t("li",[e._v("docker-compose up -d")])]),e._v(" "),t("p",[e._v("webapps目录我们是从容器映射到宿主机磁盘目录的，所以我会在这个目录下创建一个test工程并写一个index.html文件，以供我们进行测试。")]),e._v(" "),t("p",[e._v("通过浏览器访问：localhost:8080/test 即可访问到test/index.html文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("参考: \n\nhttps://blog.csdn.net/qq_38215042/article/details/108647680\n")])])]),t("h2",{attrs:{id:"docker-compose-启动mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-启动mysql"}},[e._v("#")]),e._v(" docker-compose 启动mysql")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("version: '3'\n\nservices:\n\n  \n\n  mysql:\n\n   # restart: always\n\n    image: mysql:latest\n\n    container_name: mysql_latest\n\n    ports:\n\n      - 3306:3306\n\n    environment:\n\n      TZ: Asia/Shanghai\n\n      MYSQL_ROOT_PASSWORD: Qianyan89892528\n\n    command:\n\n      --character-set-server=utf8mb4\n\n      --collation-server=utf8mb4_general_ci\n\n      --explicit_defaults_for_timestamp=true\n\n      --lower_case_table_names=1\n\n      --max_allowed_packet=128M\n\n      --sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'\n      #--sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n\n    volumes:\n      - ./db:/var/lib/mysql\n      - ./conf/my.cnf:/etc/my.cnf\n      # 数据库初始化脚本，当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；\n      - ./init/:/docker-entrypoint-initdb.d/\n\n\n \n\n\n \n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);