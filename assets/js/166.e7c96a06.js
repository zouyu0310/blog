(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{763:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql基本操作"}},[t._v("#")]),t._v(" MySQL基本操作")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ mysql -u root -p\n")])])]),a("p",[a("code",[t._v("-u")]),t._v(" 用户名，"),a("code",[t._v("-p")]),t._v(" 输入密码， "),a("code",[t._v("-h")]),t._v(" 主机名， "),a("code",[t._v("-P")]),t._v(" 端口，\n"),a("code",[t._v("mysql --help")]),t._v(" 命令行选项和参数列表")]),t._v(" "),a("p",[t._v("连接到数据库需要：主机名（本地为localhost）、端口（如果使用默认端口3306之外的端口）、合法的用户名、用户口令（如果需要）")]),t._v(" "),a("p",[t._v("可能需要root权限")]),t._v(" "),a("h2",{attrs:{id:"使用mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用mysql"}},[t._v("#")]),t._v(" 使用MySQL")]),t._v(" "),a("p",[t._v("下载create.sql和populate.sql两个sql脚本文件，其中，create.sql包含创建6个数据库表的MySQL语句，populate.sql包含用来填充这些表的INSERT语句。执行下列操作：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("--创建数据库\nCREATE DATABASE crashcourse；\n--使用数据库\n--必须先使用USE打开数据库，才能读取其中的数据。\nUSE crashcourse;\n--执行sql脚本\n--需要指定文件的完整路径\n--先执行create.sql，再执行populate.sql\nSOURCE ~/create.sql;\nSOURCE ~/populate.sql\n")])])]),a("p",[t._v("以上为准备工作。")]),t._v(" "),a("h3",{attrs:{id:"了解数据库和表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解数据库和表"}},[t._v("#")]),t._v(" 了解数据库和表")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 显示可用的数据库列表\nSHOW DATABASES;\n\n-- 获得一个数据库内的表的列表\nSHOW TABLES;\n\n-- 用来显示表列\nSHOW COLUMNS FROM customers;\nDESCRIBE customers;\n\n-- 其他SHOW语句\nSHOW STATUS -- 用于显示广泛的服务器状态信息\nSHOW CREATE DATABASE -- 显示创建特定数据库的MySQL语句\nSHOW CREATE TABLE -- 显示创建特定表的语句\nSHOW GRANTS -- 显示授予用户（所有用户或特定用户）的安全权限\nSHOW ERRORS -- 显示服务器错误\nSHOW WARNINGS -- 警告信息\n")])])]),a("h2",{attrs:{id:"检索数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检索数据"}},[t._v("#")]),t._v(" 检索数据")]),t._v(" "),a("h3",{attrs:{id:"select语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select语句"}},[t._v("#")]),t._v(" SELECT语句")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 检索单个列\n-- 检索products表中的prod_name列\nSELECT prod_name FROM products;\n\n-- 检索多个列\n-- 检索products表中的prod_id，prod_name和prod_price列\nSELECT prod_id, prod_name, prod_price FROM products;\n\n-- 检索所有列\n--检索products表中的所有列\nSELECT * FROM products;\n\n-- 检索不同的行\n-- DISTINCT关键字必须直接放在列名的前面，不能部分使用DISTINCT，DISTINCT关键字应用于所有列而不仅是前置它的列。\nSELECT DISTINCT vend_id FROM products;\n\n-- 限制结果，指定返回前几行\n-- 返回不多于5行\nSELECT prod_name FROM products LIMIT 5;\n-- 返回从第5行开始的5行\nSELECT prod_name FROM products LIMIT 5,5;\n")])])]),a("p",[a("strong",[t._v("检索出来的第一行为行0")]),t._v("，因此"),a("code",[t._v("LIMIT 1,1")]),t._v("检索出来的是第二行而不是第一行\nMySQL 5 支持LIMIT的另一种替代语法\n"),a("code",[t._v("LIMIT 4 OFFSET 3")]),t._v("为从行3开始取4行，同"),a("code",[t._v("LIMIT 3,4")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 使用完全限定的表名\nSELECT products.prod_name FROM products;\nSELECT products.prod_name FROM crashcoures.products;\n")])])]),a("h2",{attrs:{id:"排序检索数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序检索数据"}},[t._v("#")]),t._v(" 排序检索数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 排序数据\nSELECT prod_name\nFROM products\nORDER BY prod_name;\n-- 按多个列排序\nSELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price, prod_name;\n")])])]),a("p",[t._v("对于上述例子中的输出，仅在多个行具有相同的prod_price 值时才对产品按prod_name进行排序。如果prod_price列中所有的值都是唯一的，则不会按prod_name排序。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 指定排序方向\n-- 默认升序排序，降序使用DESC关键字\nSELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price DESC;\n\nSELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price DESC, prod_name;\n")])])]),a("p",[t._v("DESC关键字只应用到直接位于其前面的列名。上例中，只对prod_price列指定DESC，对prod_name列不指定。\n升序关键字ASC，可省略")]),t._v(" "),a("h3",{attrs:{id:"找出一列中最高或最低的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#找出一列中最高或最低的值"}},[t._v("#")]),t._v(" 找出一列中最高或最低的值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT prod_proce FROM products\nORDER BY prod_price DESC LIMIT 1;\n")])])]),a("p",[t._v("给出ORDER BY句子时，应保证位于FROM句子之后，如果使用LIMIT，应位于ORDER BY之后。")]),t._v(" "),a("h2",{attrs:{id:"过滤数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤数据"}},[t._v("#")]),t._v(" 过滤数据")]),t._v(" "),a("h3",{attrs:{id:"使用where子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用where子句"}},[t._v("#")]),t._v(" 使用WHERE子句")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 返回prod_price为2.50的行\nSELECT prod_name, prod_price FROM products WHERE prod_price = 2.50\n")])])]),a("h3",{attrs:{id:"where子句操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where子句操作符"}},[t._v("#")]),t._v(" WHERE子句操作符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("符号")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("=")]),t._v(" "),a("td",[t._v("等于")])]),t._v(" "),a("tr",[a("td",[t._v("<>")]),t._v(" "),a("td",[t._v("不等于")])]),t._v(" "),a("tr",[a("td",[t._v("！=")]),t._v(" "),a("td",[t._v("不等于")])]),t._v(" "),a("tr",[a("td",[t._v("<")]),t._v(" "),a("td",[t._v("小于")])]),t._v(" "),a("tr",[a("td",[t._v("<=")]),t._v(" "),a("td",[t._v("小于等于")])]),t._v(" "),a("tr",[a("td",[t._v(">")]),t._v(" "),a("td",[t._v("大于")])]),t._v(" "),a("tr",[a("td",[t._v(">=")]),t._v(" "),a("td",[t._v("大于等于")])]),t._v(" "),a("tr",[a("td",[t._v("BETWEEN")]),t._v(" "),a("td",[t._v("在指定的两个值之间")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("-- 检查单个值\n-- 返回prod_name为Fuses的一行（匹配时默认不区分大小写）\nSELECT prod_name, prod_price FROM products WHERE prod_name = 'fuses';\n-- 列出小于10美元的所有产品\nSELECT prod_name, prod_price FROM products WHERE prod_price < 10;\n-- 列出小于等于10美元的所有产品\nSELECT prod_name, prod_price FROM products WHERE prod_price <= 10;\n\n-- 不匹配检查\n-- 列出不是1003的所有产品\nSELECT vend_id, prod_name FROM products WHERE vend_id <> 1003;\nSELECT vend_id, prod_name FROM products WHERE vend_id ！= 1003;\n\n-- 范围值检查\n-- 检索价格在5-10美元之间的所有产品\nSELECT prod_name, prod_price FROM products\nWHERE prod_price BETWEEN 5 AND 10;\n\n-- 空值检查\n-- 返回价格为空的所有产品\nSELECT prod_name FROM products WHERE prod_price IS NULL;\n")])])]),a("h2",{attrs:{id:"创建和操纵表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建和操纵表"}},[t._v("#")]),t._v(" 创建和操纵表")]),t._v(" "),a("h3",{attrs:{id:"创建表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建表"}},[t._v("#")]),t._v(" 创建表")]),t._v(" "),a("h4",{attrs:{id:"创建表基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建表基础"}},[t._v("#")]),t._v(" 创建表基础")]),t._v(" "),a("p",[t._v("CREATE TABLE")]),t._v(" "),a("ul",[a("li",[t._v("新表的名字，在关键字CREATE TABLE之后给出")]),t._v(" "),a("li",[t._v("表列的名字和定义，用逗号分隔。\n例：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE customers\n(\n    cust_id int NOT NULL AUTO_INCREMENT,\n    cust_name char(50) NOT NULL,\n    cust_address char(50) NULL,\n    cust_city char(50) NULL,\n    cust_state char(5) NULL,\n    cust_zip char(10) NULL,\n    cust_country char(50) NULL,\n    cust_contact char(50) NULL,\n    cust_email char(255) NULL,\n    PRIMARY KEY (cust_id)\n) ENGINE=InnoDB;\n")])])]),a("p",[t._v("在创建新表时，指定的表名必须不存在，否则将出错。如果要防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建它，而不是简单地用创建表语句覆盖它。")]),t._v(" "),a("p",[t._v("如果你仅想在一个表不存在时创建它，应该在表名后给出IF NOT EXISTS。这样做不检查已有表的模式是否与你打算创建的表模式相匹配。它只是查看表名是否存在，并且仅在表名不存在时创建它。")]),t._v(" "),a("h4",{attrs:{id:"使用null值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用null值"}},[t._v("#")]),t._v(" 使用NULL值")]),t._v(" "),a("p",[t._v("每个表列或者是NULL列或者是NOT NULL列，这种状态在创建时由表的定义规定\n例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE orders\n(\n    order_num int NOT NULL AUTO_INCREMENT,\n    order_date datetime NOT NULL,\n    cust_id int NOT NULL,\n    PRIMARY KEY (order_num)\n) ENGINE-InnoDB;\n")])])]),a("p",[t._v("例：混合了NULL和NOT NULL列的表")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE vendors\n(\n    vend_id int NOT NULL AUTO_INCREMENT,\n    vend_name char(50) NOT NULL,\n    vend_address char(50) NULL,\n    vend_city char(50) NULL,\n    vend_state char(5) NULL,\n    vend_zip char(10) NULL,\n    vend_country char(50) NULL,\n    PRIMARY KEY(vend_id)\n) ENGINE = InnoDB;\n")])])]),a("h4",{attrs:{id:"主键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主键"}},[t._v("#")]),t._v(" 主键")]),t._v(" "),a("p",[t._v("主键值必须唯一。如果主键使用单个列，则它的值必须唯一。如果使用多个列，则这些列的组合值必须唯一。")]),t._v(" "),a("p",[t._v("例：创建多个列组成的主键")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE orderitems\n(\n    order_num int NOT NULL,\n    order_item int NOT NULL,\n    prod_id char(10) NOT NULL,\n    quantity int NOT NULL,\n    item_price decimal(8,2) NOT NULL,\n    PRIMARY KEY (order_num, order_item)\n)ENGiNE = InnoDB;\n")])])]),a("h4",{attrs:{id:"使用auto-increment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用auto-increment"}},[t._v("#")]),t._v(" 使用AUTO_INCREMENT")]),t._v(" "),a("p",[t._v("AUTO_INCREMENT告诉MySQL，本列每当增加一行时自动增量。每次 执行一个INSERT操作时，MySQL自动对该列增量（从而才有这个关键字AUTO_INCREMENT），给该列赋予下一个可用的值。这样给每个行分配一个唯一的cust_id，从而可以用作主键值。")]),t._v(" "),a("p",[t._v("覆盖AUTO_INCREMENT:如果一个列被指定为AUTO_INCREMENT，则它需要使用特殊的值吗？你可以简单地INSERT语句中指定一个值，只要它是唯一的（至今尚未使用过）即可，该值将被用来替代自动生成的值。后续的增量将开始使用该手工插入的值。")]),t._v(" "),a("h4",{attrs:{id:"指定默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定默认值"}},[t._v("#")]),t._v(" 指定默认值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE orderitems\n(\n    order_num int NOT NUL,\n    order_item int NOT NULL,\n    prod_id char(10) NOT NULL,\n    quantity int NOT NULL DEFAULT 1,\n    item_price decimal(8,2) NOT NULL,\n    PRIMARY KEY (order_num,order_item)\n) ENGINE = InnoDB;\n")])])]),a("p",[t._v("MySQL不允许使用函数作为默认值，只支持常量")]),t._v(" "),a("h4",{attrs:{id:"引擎类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引擎类型"}},[t._v("#")]),t._v(" 引擎类型")]),t._v(" "),a("ul",[a("li",[t._v("InnoDB是一个可靠的事务处理引擎，它不支持全文本搜索；")]),t._v(" "),a("li",[t._v("MEMORY在功能等同于MyISAM，但由于数据存储在内存（不是磁盘） 中，速度很快（特别适合于临时表）；")]),t._v(" "),a("li",[t._v("MyISAM是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。\n引擎类型可以混用。\n外键不能跨引擎 混用引擎类型有一个大缺陷。外键（用于强制实施引用完整性）不能跨引擎，即使用一个引擎的表不能引用具有使用不同引擎的表的外键。")])]),t._v(" "),a("h3",{attrs:{id:"更新表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新表"}},[t._v("#")]),t._v(" 更新表")]),t._v(" "),a("p",[t._v("使用ALTER TABLE更改表的结构，必须给出以下信息：")]),t._v(" "),a("ul",[a("li",[t._v("在ALTER TABLE之后给出要更改的表名（该表必须存在，否则将出错）；")]),t._v(" "),a("li",[t._v("所做更改的列表。")])]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE vendors\nADD vend_phone CHAR(20);\n")])])]),a("p",[t._v("例：删除刚增加的列")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE vendors\nDROP COLUMN vend_phone;\n")])])]),a("p",[t._v("为了对单个表进行多个更改，可以使用单条ALTER TABLE语句，每个更改用逗号分隔")]),t._v(" "),a("p",[t._v("复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：")]),t._v(" "),a("ul",[a("li",[t._v("用新的列布局创建一个新表；")]),t._v(" "),a("li",[t._v("使用INSERT SELECT语句从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；")]),t._v(" "),a("li",[t._v("检验包含所需数据的新表；")]),t._v(" "),a("li",[t._v("重命名旧表（如果确定，可以删除它）；")]),t._v(" "),a("li",[t._v("用旧表原来的名字重命名新表；")]),t._v(" "),a("li",[t._v("根据需要，重新创建触发器、存储过程、索引和外键。")])]),t._v(" "),a("p",[t._v("使用ALTER TABLE要极为小心，应该在进行改动前做一个完整的备份（模式和数据的备份）。数据库表的更改不能撤销，如果增加了不需要的列，可能不能删除它们。类似地，如果删除了不应该删除的列，可能会丢失该列中的所有数据。")]),t._v(" "),a("h3",{attrs:{id:"删除表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除表"}},[t._v("#")]),t._v(" 删除表")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP TABLE customers2;\n")])])]),a("h3",{attrs:{id:"重命名表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重命名表"}},[t._v("#")]),t._v(" 重命名表")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("RENAME TABLE customers2 TO customers;\n\n#对多个表重命名\nRENAME TABLE backup_customers TO customers,\n\t         backup_vendors TO vendors,\n             backup_products TO products;\n")])])]),a("h2",{attrs:{id:"插入数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入数据"}},[t._v("#")]),t._v(" 插入数据")]),t._v(" "),a("p",[t._v("INSERT")]),t._v(" "),a("ul",[a("li",[t._v("插入完整的行")]),t._v(" "),a("li",[t._v("插入行的一部分")]),t._v(" "),a("li",[t._v("插入多行")]),t._v(" "),a("li",[t._v("插入某些查询的结果")])]),t._v(" "),a("h3",{attrs:{id:"插入完整的行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入完整的行"}},[t._v("#")]),t._v(" 插入完整的行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INSERT INTO Customers\nVALUES(NULL,\n    'Pep E. LaPew',\n    '100 Main Street',\n    'Los Angles',\n    'CA',\n    '90046',\n    'USA',\n    NULL,\n    NULL);\n")])])]),a("p",[t._v("语法简单但不安全。更安全的方法为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INSERT INTO customers(cust_name,\n    cust_address,\n    cust_city,\n    cust_state,\n    cust_zip,\n    cust_country,\n    cust_contact,\n    cust_email)\nVALUES('Pep E. LaPew',\n    '100 Main Street',\n    'Los Angeles',\n    'CA',\n    '90046'\n    'USA'\n    NULL,\n    NULL);\n#下面的INSERT语句填充所有列（与前面的一样），但以一种不同的次序填充。\n#因为给出了列名，所以插入结果仍然正确：\nINSERT INTO customers(cust_name,\n    cust_contact,\n    cust_email,\n    cust_address,\n    cust_city,\n    cust_state,\n    cust_zip,\n    cust_country)\nVALUES('Pep E. LaPew',\n    NULL,\n    NULL,\n    '100 Main Street',\n    'Los Angles',\n    'CA',\n    '90046',\n    'USA');\n")])])]),a("p",[t._v("不管哪种INSSERT语法，都必须给出VALUES的正确数目，如果不提供列名，则必须给每个表提供一个值。如果提供列名，则必须对每个列出的列值给出一个值。")]),t._v(" "),a("p",[t._v("列名被明确列出时，可以省略列,如果表的定义允许则可以省略列")]),t._v(" "),a("ul",[a("li",[t._v("该列定义为允许NULL值（无值或空值）")]),t._v(" "),a("li",[t._v("在表定义中给出默认值。")])]),t._v(" "),a("h3",{attrs:{id:"插入多个行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入多个行"}},[t._v("#")]),t._v(" 插入多个行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INSERT INTO customers(cust_name,\n    cust_address,\n    cust_city,\n    cust_state,\n    cust_zip,\n    cust_country)\nVALUES('Pep E. LaPew',\n    '100 Main Street'\n    'Los Angeles',\n    'CA',\n    '90046',\n    'USA');\nINSERT INTO customers(cust_name,\n    cust_address,\n    cust_city,\n    cust_state,\n    cust_zip,\n    cust_country)\nVALUES('M. Martian',\n    '42 Galaxy Way'\n    'New York',\n    'NY',\n    '11213',\n    'USA');\n\n#使用组合句\nINSERT INTO customers(cust_name,\n    cust_address,\n    cust_city,\n    cust_state,\n    cust_zip,\n    cust_country)\nVALUES('Pep E. LaPew',\n    '100 Main Street'\n    'Los Angeles',\n    'CA',\n    '90046',\n    'USA')，\n\n    ('M. Martian',\n    '42 Galaxy Way'\n    'New York',\n    'NY',\n    '11213',\n    'USA');\n\n#单条INSERT语句有多组值，每组值用一对圆括号括起来，用逗号分隔。\n")])])]),a("h3",{attrs:{id:"插入检索出的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入检索出的数据"}},[t._v("#")]),t._v(" 插入检索出的数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INSERT INTO customers(cust_id,\n    cust_contact,\n    cust_email,\n    cust_name,\n    cust_address,\n    cust_city,\n    cust_state,\n    cust_zip,\n    cust_country)\nSELECT cust_id,\n    cust_contact,\n    cust_email,\n    cust_name,\n    cust_address,\n    cust_city,\n    cust_state,\n    cust_zip,\n    cust_country\nFROM custnew;\n")])])]),a("h2",{attrs:{id:"更新和删除数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新和删除数据"}},[t._v("#")]),t._v(" 更新和删除数据")]),t._v(" "),a("h3",{attrs:{id:"更新数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新数据"}},[t._v("#")]),t._v(" 更新数据")]),t._v(" "),a("p",[t._v("UPDATE")]),t._v(" "),a("ul",[a("li",[t._v("更新表中特定行")]),t._v(" "),a("li",[t._v("更新表中所有行\n例：客户10005更新电子邮件")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("UPDATE customers\nSET cust_email = 'elmer@fudd.com'\nWHERE cust_id = 10005;\n")])])]),a("p",[t._v("例：更新多个列")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("UPDARTE customers\nSET cust_name = 'The Fudds',\ncust_email = 'elmer@fudd.com'\nWHERE cust_id = 10005;\n")])])]),a("p",[t._v("在更新多个列时，只需要使用单个SET命令，每个“列=值”对之间 用逗号分隔（最后一列之后不用逗号）。在此例子中，更新客户10005的cust_name和cust_email列。")]),t._v(" "),a("p",[t._v("IGNORE关键字:如果用UPDATE语句更新多行，并且在更新这些 行中的一行或多行时出一个现错误，则整个UPDATE操作被取消 （错误发生前更新的所有行被恢复到它们原来的值）。为即使是发生错误，也继续进行更新，可使用IGNORE关键字，如下所示："),a("code",[t._v("UPDATE IGNORE customers…")])]),t._v(" "),a("p",[t._v("为了删除某列的值，可以设置为NULL")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("UPDATE customers\nSET cust_email = NULL\nWHERE cust_id = 10005;\n")])])]),a("h3",{attrs:{id:"删除数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除数据"}},[t._v("#")]),t._v(" 删除数据")]),t._v(" "),a("p",[t._v("使用DELETE语句")]),t._v(" "),a("ul",[a("li",[t._v("从表中删除特定的行")]),t._v(" "),a("li",[t._v("从表中删除所有的行")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DELETE FROM customers\nWHERE cust_id = 10006;\n")])])]),a("h3",{attrs:{id:"更新和删除的指导原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新和删除的指导原则"}},[t._v("#")]),t._v(" 更新和删除的指导原则")]),t._v(" "),a("p",[t._v("下面是许多SQL程序员使用UPDATE或DELETE时所遵循的习惯。")]),t._v(" "),a("ul",[a("li",[t._v("除非确实打算更新和删除每一行，否则绝对不要使用不带WHERE子句的UPDATE或DELETE语句。")]),t._v(" "),a("li",[t._v("保证每个表都有主键，尽可能像WHERE子句那样使用它（可以指定各主键、多个值或值的范围）。")]),t._v(" "),a("li",[t._v("在对UPDATE或DELETE语句使用WHERE子句前，应该先用SELECT进行测试，保证它过滤的是正确的记录，以防编写的WHERE子句不正确。")]),t._v(" "),a("li",[t._v("使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。")])]),t._v(" "),a("h2",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),a("p",[t._v("MySQL的注释方法\n一共有三种，分别为")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#单行注释可以使用"#"\n-- 单行注释也可以使用"--"，注意与注释之间有空格\n/*\n用于多行注释\n*/\n')])])])])}),[],!1,null,null,null);a.default=n.exports}}]);