(window.webpackJsonp=window.webpackJsonp||[]).push([[474],{1136:function(a,t,s){"use strict";s.r(t);var r=s(14),e=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("blockquote",[t("p",[a._v("这部分内容主要根据 Gradle 官方文档整理，做了对应的删减，主要保留比较重要的部分，不涉及实战，主要是一些重要概念的介绍。")])]),a._v(" "),t("p",[a._v("Gradle 这部分内容属于可选内容，可以根据自身需求决定是否学习，目前国内还是使用 Maven 普遍一些。")]),a._v(" "),t("h2",{attrs:{id:"gradle-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gradle-介绍"}},[a._v("#")]),a._v(" Gradle 介绍")]),a._v(" "),t("p",[a._v("Gradle 官方文档是这样介绍的 Gradle 的：")]),a._v(" "),t("blockquote",[t("p",[a._v("Gradle is an open-source "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Build_automation",target:"_blank",rel:"noopener noreferrer"}},[a._v("build automation"),t("OutboundLink")],1),a._v(" tool flexible enough to build almost any type of software. Gradle makes few assumptions about what you’re trying to build or how to build it. This makes Gradle particularly flexible.")]),a._v(" "),t("p",[a._v("Gradle 是一个开源的构建自动化工具，它足够灵活，可以构建几乎任何类型的软件。Gradle 对你要构建什么或者如何构建它做了很少的假设。这使得 Gradle 特别灵活。")])]),a._v(" "),t("p",[a._v("简单来说，Gradle 就是一个运行在 JVM 上的自动化的项目构建工具，用来帮助我们自动构建项目。")]),a._v(" "),t("p",[a._v("对于开发者来说，Gradle 的主要作用主要有 3 个：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("项目构建")]),a._v(" ：提供标准的、跨平台的自动化项目构建方式。")]),a._v(" "),t("li",[t("strong",[a._v("依赖管理")]),a._v(" ：方便快捷的管理项目依赖的资源（jar 包），避免资源间的版本冲突问题。")]),a._v(" "),t("li",[t("strong",[a._v("统一开发结构")]),a._v(" ：提供标准的、统一的项目结构。")])]),a._v(" "),t("p",[a._v("Gradle 构建脚本是使用 Groovy 或 Kotlin 语言编写的，表达能力非常强，也足够灵活。")]),a._v(" "),t("h2",{attrs:{id:"groovy-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#groovy-介绍"}},[a._v("#")]),a._v(" Groovy 介绍")]),a._v(" "),t("p",[a._v("Gradle 是运行在 JVM 上的一个程序，它可以使用 Groovy 来编写构建脚本。")]),a._v(" "),t("p",[a._v("Groovy 是运行在 JVM 上的脚本语言，是基于 Java 扩展的动态语言，它的语法和 Java 非常的相似，可以使用 Java 的类库。Groovy 可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了 Java 、Python、Ruby 和 Smalltalk 语言的优秀特性，比如动态类型转换、闭包和元编程支持。")]),a._v(" "),t("p",[a._v("我们可以用学习 Java 的方式去学习 Groovy ，学习成本相对来说还是比较低的，即使开发过程中忘记 Groovy 语法，也可以用 Java 语法继续编码。")]),a._v(" "),t("p",[a._v("基于 JVM 的语言有很多种比如 Groovy，Kotlin，Java，Scala，他们最终都会编译生成 Java 字节码文件并在 JVM 上运行。")]),a._v(" "),t("h2",{attrs:{id:"gradle-优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gradle-优势"}},[a._v("#")]),a._v(" Gradle 优势")]),a._v(" "),t("p",[a._v("Gradle 是新一代的构建系统，具有高效和灵活等诸多优势，广泛用于 Java 开发。不仅 Android 将其作为官方构建系统, 越来越多的 Java 项目比如 Spring Boot 也慢慢迁移到 Gradle。")]),a._v(" "),t("ul",[t("li",[a._v("在灵活性上，Gradle 支持基于 Groovy 语言编写脚本，侧重于构建过程的灵活性，适合于构建复杂度较高的项目，可以完成非常复杂的构建。")]),a._v(" "),t("li",[a._v("在粒度性上，Gradle 构建的粒度细化到了每一个 task 之中。并且它所有的 Task 源码都是开源的，在我们掌握了这一整套打包流程后，我们就可以通过去修改它的 Task 去动态改变其执行流程。")]),a._v(" "),t("li",[a._v("在扩展性上，Gradle 支持插件机制，所以我们可以复用这些插件，就如同复用库一样简单方便。")])]),a._v(" "),t("h2",{attrs:{id:"gradle-wrapper-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gradle-wrapper-介绍"}},[a._v("#")]),a._v(" Gradle Wrapper 介绍")]),a._v(" "),t("p",[a._v("Gradle 官方文档是这样介绍的 Gradle Wrapper 的：")]),a._v(" "),t("blockquote",[t("p",[a._v("The recommended way to execute any Gradle build is with the help of the Gradle Wrapper (in short just “Wrapper”). The Wrapper is a script that invokes a declared version of Gradle, downloading it beforehand if necessary. As a result, developers can get up and running with a Gradle project quickly without having to follow manual installation processes saving your company time and money.")]),a._v(" "),t("p",[a._v("执行 Gradle 构建的推荐方法是借助 Gradle Wrapper(简而言之就是“Wrapper”)。Wrapper 它是一个脚本，调用了已经声明的 Gradle 版本，如果需要的话，可以预先下载它。因此，开发人员可以快速启动并运行 Gradle 项目，而不必遵循手动安装过程，从而为公司节省时间和金钱。")])]),a._v(" "),t("p",[a._v("我们可以称 Gradle Wrapper 为 Gradle 包装器，它将 Gradle 再次包装，让所有的 Gradle 构建方法在 Gradle 包装器的帮助下运行。")]),a._v(" "),t("p",[a._v("Gradle Wrapper 的工作流程图如下（图源"),t("a",{attrs:{href:"https://docs.gradle.org/current/userguide/gradle_wrapper.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Gradle Wrapper 官方文档介绍"),t("OutboundLink")],1),a._v("）：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/efa7a0006b04051e2b84cd116c6ccdfc.png",alt:"包装器工作流程"}})]),a._v(" "),t("p",[a._v("整个流程主要分为下面 3 步：")]),a._v(" "),t("ol",[t("li",[a._v("首先当我们刚创建的时候，如果指定的版本没有被下载，就先会去 Gradle 的服务器中下载对应版本的压缩包；")]),a._v(" "),t("li",[a._v("下载完成后需要先进行解压缩并且执行批处理文件；")]),a._v(" "),t("li",[a._v("后续项目每次构建都会重用这个解压过的 Gradle 版本。")])]),a._v(" "),t("p",[a._v("Gradle Wrapper 会给我们带来下面这些好处：")]),a._v(" "),t("ol",[t("li",[a._v("在给定的 Gradle 版本上标准化项目，从而实现更可靠和健壮的构建。")]),a._v(" "),t("li",[a._v("可以让我们的电脑中不安装 Gradle 环境也可以运行 Gradle 项目。")]),a._v(" "),t("li",[a._v("为不同的用户和执行环境（例如 IDE 或持续集成服务器）提供新的 Gradle 版本就像更改 Wrapper 定义一样简单。")])]),a._v(" "),t("h3",{attrs:{id:"生成-gradle-wrapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成-gradle-wrapper"}},[a._v("#")]),a._v(" 生成 Gradle Wrapper")]),a._v(" "),t("p",[a._v("如果想要生成 Gradle Wrapper 的话，需要本地配置好 Gradle 环境变量。Gradle 中已经内置了内置了 Wrapper Task，在项目根目录执行执行"),t("code",[a._v("gradle wrapper")]),a._v("命令即可帮助我们生成 Gradle Wrapper。")]),a._v(" "),t("p",[a._v("执行命令 "),t("code",[a._v("gradle wrapper")]),a._v(" 命令时可以指定一些参数来控制 wrapper 的生成。具体有如下两个配置参数：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("--gradle-version")]),a._v(" 用于指定使用的 Gradle 的版本")]),a._v(" "),t("li",[t("code",[a._v("--gradle-distribution-url")]),a._v(" 用于指定下载 Gradle 版本的 URL，该值的规则是 "),t("code",[a._v("http://services.gradle.org/distributions/gradle-${gradleVersion}-bin.zip")])])]),a._v(" "),t("p",[a._v("执行"),t("code",[a._v("gradle wrapper")]),a._v("命令之后，Gradle Wrapper 就生成完成了，项目根目录中生成如下文件：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("├── gradle\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n└── gradlew.bat\n")])])]),t("p",[a._v("每个文件的含义如下：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("gradle-wrapper.jar")]),a._v("：包含了 Gradle 运行时的逻辑代码。")]),a._v(" "),t("li",[t("code",[a._v("gradle-wrapper.properties")]),a._v(" ： 定义了 Gradle 的版本号和 Gradle 运行时的行为属性。")]),a._v(" "),t("li",[t("code",[a._v("gradlew")]),a._v("：Linux 平台下，用于执行 Gralde 命令的包装器脚本。")]),a._v(" "),t("li",[t("code",[a._v("gradlew.bat")]),a._v("：Windows 平台下，用于执行 Gralde 命令的包装器脚本。")])]),a._v(" "),t("p",[t("code",[a._v("gradle-wrapper.properties")]),a._v(" 文件的内容如下：")]),a._v(" "),t("div",{staticClass:"language-properties extra-class"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("distributionBase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("GRADLE_USER_HOME")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("distributionPath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("wrapper/dists")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("distributionUrl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("https\\://services.gradle.org/distributions/gradle-6.0.1-bin.zip")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("zipStoreBase")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("GRADLE_USER_HOME")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("zipStorePath")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("wrapper/dists")]),a._v("\n")])])]),t("ul",[t("li",[t("code",[a._v("distributionBase")]),a._v("： Gradle 解包后存储的父目录。")]),a._v(" "),t("li",[t("code",[a._v("distributionPath")]),a._v("： "),t("code",[a._v("distributionBase")]),a._v("指定目录的子目录。"),t("code",[a._v("distributionBase+distributionPath")]),a._v("就是 Gradle 解包后的存放的具体目录。")]),a._v(" "),t("li",[t("code",[a._v("distributionUrl")]),a._v("： Gradle 指定版本的压缩包下载地址。")]),a._v(" "),t("li",[t("code",[a._v("zipStoreBase")]),a._v("： Gradle 压缩包下载后存储父目录。")]),a._v(" "),t("li",[t("code",[a._v("zipStorePath")]),a._v("： "),t("code",[a._v("zipStoreBase")]),a._v("指定目录的子目录。"),t("code",[a._v("zipStoreBase+zipStorePath")]),a._v("就是 Gradle 压缩包的存放位置。")])]),a._v(" "),t("h3",{attrs:{id:"更新-gradle-wrapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新-gradle-wrapper"}},[a._v("#")]),a._v(" 更新 Gradle Wrapper")]),a._v(" "),t("p",[a._v("更新 Gradle Wrapper 有 2 种方式：")]),a._v(" "),t("ol",[t("li",[a._v("接修改"),t("code",[a._v("distributionUrl")]),a._v("字段，然后执行 Gradle 命令。")]),a._v(" "),t("li",[a._v("执行 gradlew 命令"),t("code",[a._v("gradlew wrapper –-gradle-version [version]")]),a._v("。")])]),a._v(" "),t("p",[a._v("下面的命令会将 Gradle 版本升级为 7.6。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("$ gradlew wrapper --gradle-version "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7.6")]),a._v("\n")])])]),t("p",[t("code",[a._v("gradle-wrapper.properties")]),a._v(" 文件中的 "),t("code",[a._v("distributionUrl")]),a._v(" 属性也发生了改变。")]),a._v(" "),t("div",{staticClass:"language-properties extra-class"},[t("pre",{pre:!0,attrs:{class:"language-properties"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[a._v("distributionUrl")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[a._v("https\\://services.gradle.org/distributions/gradle-7.6-all.zip")]),a._v("\n")])])]),t("h3",{attrs:{id:"自定义-gradle-wrapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义-gradle-wrapper"}},[a._v("#")]),a._v(" 自定义 Gradle Wrapper")]),a._v(" "),t("p",[a._v("Gradle 已经内置了 Wrapper Task，因此构建 Gradle Wrapper 会生成 Gradle Wrapper 的属性文件，这个属性文件可以通过自定义 Wrapper Task 来设置。比如我们想要修改要下载的 Gralde 版本为 7.6，可以这么设置：")]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wrapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Wrapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    gradleVersion "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'7.6'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("也可以设置 Gradle 发行版压缩包的下载地址和 Gradle 解包后的本地存储路径等配置。")]),a._v(" "),t("div",{staticClass:"language-groovy extra-class"},[t("pre",{pre:!0,attrs:{class:"language-groovy"}},[t("code",[a._v("task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wrapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Wrapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    gradleVersion "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'7.6'")]),a._v("\n    distributionUrl "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'../../gradle-7.6-bin.zip'")]),a._v("\n    distributionPath"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("wrapper"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dists\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[t("code",[a._v("distributionUrl")]),a._v(" 属性可以设置为本地的项目目录，你也可以设置为网络地址。")]),a._v(" "),t("h2",{attrs:{id:"gradle-任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gradle-任务"}},[a._v("#")]),a._v(" Gradle 任务")]),a._v(" "),t("p",[a._v("在 Gradle 中，任务(Task)是构建执行的单个工作单元。")]),a._v(" "),t("p",[a._v("Gradle 的构建是基于 Task 进行的，当你运行项目的时候，实际就是在执行了一系列的 Task 比如编译 Java 源码的 Task、生成 jar 文件的 Task。")]),a._v(" "),t("p",[a._v("Task 的声明方式如下（还有其他几种声明方式）：")]),a._v(" "),t("div",{staticClass:"language-groovy extra-class"},[t("pre",{pre:!0,attrs:{class:"language-groovy"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 声明一个名字为 helloTask 的 Task")]),a._v("\ntask helloTask"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     doLast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       println "),t("span",{pre:!0,attrs:{class:"token interpolation-string"}},[t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')])]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("创建一个 Task 后，可以根据需要给 Task 添加不同的 Action，上面的“doLast”就是给队列尾增加一个 Action。")]),a._v(" "),t("div",{staticClass:"language-groovy extra-class"},[t("pre",{pre:!0,attrs:{class:"language-groovy"}},[t("code",[a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在Action 队列头部添加Action")]),a._v("\n Task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("doFirst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Action"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),a._v(" Task"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" action"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n Task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("doFirst")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Closure action"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在Action 队列尾部添加Action")]),a._v("\n Task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("doLast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Action"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),a._v(" Task"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" action"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n Task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("doLast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Closure action"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//删除所有的Action")]),a._v("\n Task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("deleteAllActions")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("一个 Task 中可以有多个 Acton，从队列头部开始向队列尾部执行 Acton。")]),a._v(" "),t("p",[a._v("Action 代表的是一个个函数、方法，每个 Task 都是一堆 Action 按序组成的执行图。")]),a._v(" "),t("p",[a._v("Task 声明依赖的关键字是"),t("code",[a._v("dependsOn")]),a._v("，支持声明一个或多个依赖：")]),a._v(" "),t("div",{staticClass:"language-groovy extra-class"},[t("pre",{pre:!0,attrs:{class:"language-groovy"}},[t("code",[a._v("task first "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tdoLast "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        println "),t("span",{pre:!0,attrs:{class:"token interpolation-string"}},[t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"+++++first+++++"')])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\ntask second "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tdoLast "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        println "),t("span",{pre:!0,attrs:{class:"token interpolation-string"}},[t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"+++++second+++++"')])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 指定多个 task 依赖")]),a._v("\ntask "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dependsOn "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("second"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("first"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tdoLast "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      logger"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("quiet "),t("span",{pre:!0,attrs:{class:"token interpolation-string"}},[t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"指定多个task依赖"')])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 指定一个 task 依赖")]),a._v("\ntask "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("third")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dependsOn "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tdoLast "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      println "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'+++++third+++++'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("执行 Task 之前，会先执行它的依赖 Task。")]),a._v(" "),t("p",[a._v("我们还可以设置默认 Task，脚本中我们不调用默认 Task ，也会执行。")]),a._v(" "),t("div",{staticClass:"language-groovy extra-class"},[t("pre",{pre:!0,attrs:{class:"language-groovy"}},[t("code",[a._v("defaultTasks "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'clean'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'run'")]),a._v("\n\ntask clean "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    doLast "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        println "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Default Cleaning!'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\ntask run "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    doLast "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        println "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Default Running!'")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("Gradle 本身也内置了很多 Task 比如 copy（复制文件）、delete（删除文件）。")]),a._v(" "),t("div",{staticClass:"language-groovy extra-class"},[t("pre",{pre:!0,attrs:{class:"language-groovy"}},[t("code",[a._v("task "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("deleteFile")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Delete"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    delete "),t("span",{pre:!0,attrs:{class:"token interpolation-string"}},[t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"C:\\\\Users\\\\guide\\\\Desktop\\\\test"')])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h2",{attrs:{id:"gradle-插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gradle-插件"}},[a._v("#")]),a._v(" Gradle 插件")]),a._v(" "),t("p",[a._v("Gradle 提供的是一套核心的构建机制，而 Gradle 插件则是运行在这套机制上的一些具体构建逻辑，其本质上和 "),t("code",[a._v(".gradle")]),a._v(" 文件是相同。你可以将 Gradle 插件看作是封装了一系列 Task 并执行的工具。")]),a._v(" "),t("p",[a._v("Gradle 插件主要分为两类：")]),a._v(" "),t("ul",[t("li",[a._v("脚本插件： 脚本插件就是一个普通的脚本文件，它可以被导入都其他构建脚本中。")]),a._v(" "),t("li",[a._v("二进制插件 / 对象插件：在一个单独的插件模块中定义，其他模块通过 Plugin ID 应用插件。因为这种方式发布和复用更加友好，我们一般接触到的 Gradle 插件都是指二进制插件的形式。")])]),a._v(" "),t("p",[a._v("虽然 Gradle 插件与 .gradle 文件本质上没有区别，"),t("code",[a._v(".gradle")]),a._v(" 文件也能实现 Gradle 插件类似的功能。但是，Gradle 插件使用了独立模块封装构建逻辑，无论是从开发开始使用来看，Gradle 插件的整体体验都更友好。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("逻辑复用：")]),a._v(" 将相同的逻辑提供给多个相似项目复用，减少重复维护类似逻辑开销。当然 .gradle 文件也能做到逻辑复用，但 Gradle 插件的封装性更好；")]),a._v(" "),t("li",[t("strong",[a._v("组件发布：")]),a._v(" 可以将插件发布到 Maven 仓库进行管理，其他项目可以使用插件 ID 依赖。当然 .gradle 文件也可以放到一个远程路径被其他项目引用；")]),a._v(" "),t("li",[t("strong",[a._v("构建配置：")]),a._v(" Gradle 插件可以声明插件扩展来暴露可配置的属性，提供定制化能力。当然 .gradle 文件也可以做到，但实现会麻烦些。")])]),a._v(" "),t("h2",{attrs:{id:"gradle-构建生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gradle-构建生命周期"}},[a._v("#")]),a._v(" Gradle 构建生命周期")]),a._v(" "),t("p",[a._v("Gradle 构建的生命周期有三个阶段："),t("strong",[a._v("初始化阶段，配置阶段")]),a._v("和"),t("strong",[a._v("运行阶段")]),a._v("。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/dadbdf59fccd9a2ebf60a2d018541e52.png",alt:""}})]),a._v(" "),t("p",[a._v("在初始化阶段与配置阶段之间、配置阶段结束之后、执行阶段结束之后，我们都可以加一些定制化的 Hook。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/5c297ccc4dac83229ff3e19caee9d1d2.png",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"初始化阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段"}},[a._v("#")]),a._v(" 初始化阶段")]),a._v(" "),t("p",[a._v("Gradle 支持单项目和多项目构建。在初始化阶段，Gradle 确定哪些项目将参与构建，并为每个项目创建一个 "),t("a",{attrs:{href:"https://docs.gradle.org/current/dsl/org.gradle.api.Project.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Project 实例"),t("OutboundLink")],1),a._v(" 。本质上也就是执行 "),t("code",[a._v("settings.gradle")]),a._v(" 脚本，从而读取整个项目中有多少个 Project 实例。")]),a._v(" "),t("h3",{attrs:{id:"配置阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置阶段"}},[a._v("#")]),a._v(" 配置阶段")]),a._v(" "),t("p",[a._v("在配置阶段，Gradle 会解析每个工程的 "),t("code",[a._v("build.gradle")]),a._v(" 文件，创建要执行的任务子集和确定各种任务之间的关系，以供执行阶段按照顺序执行，并对任务的做一些初始化配置。")]),a._v(" "),t("p",[a._v("每个 "),t("code",[a._v("build.gradle")]),a._v(" 对应一个 Project 对象，配置阶段执行的代码包括 "),t("code",[a._v("build.gradle")]),a._v(" 中的各种语句、闭包以及 Task 中的配置语句。")]),a._v(" "),t("p",[a._v("在配置阶段结束后，Gradle 会根据 Task 的依赖关系会创建一个 "),t("strong",[a._v("有向无环图")]),a._v(" 。")]),a._v(" "),t("h3",{attrs:{id:"运行阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行阶段"}},[a._v("#")]),a._v(" 运行阶段")]),a._v(" "),t("p",[a._v("在运行阶段，Gradle 根据配置阶段创建和配置的要执行的任务子集，执行任务。")]),a._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),t("ul",[t("li",[a._v("Gradle 官方文档：https://docs.gradle.org/current/userguide/userguide.html")]),a._v(" "),t("li",[a._v("Gradle 入门教程：https://www.imooc.com/wiki/gradlebase")]),a._v(" "),t("li",[a._v("Groovy 快速入门看这篇就够了：https://cloud.tencent.com/developer/article/1358357")]),a._v(" "),t("li",[a._v("【Gradle】Gradle 的生命周期详解：https://juejin.cn/post/7067719629874921508")]),a._v(" "),t("li",[a._v("手把手带你自定义 Gradle 插件 —— Gradle 系列(2)：https://www.cnblogs.com/pengxurui/p/16281537.html")]),a._v(" "),t("li",[a._v("Gradle 爬坑指南 -- 理解 Plugin、Task、构建流程：https://juejin.cn/post/6889090530593112077")])])])}),[],!1,null,null,null);t.default=e.exports}}]);