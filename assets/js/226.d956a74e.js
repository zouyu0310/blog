(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{839:function(t,n,e){"use strict";e.r(n);var _=e(14),v=Object(_.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("1.Netty 是什么？\nNetty是 一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。Netty是基于nio的，它封装了jdk的nio，让我们使用起来更加方法灵活。")]),t._v(" "),n("p",[t._v("2.Netty 的特点是什么？\n高并发：Netty 是一款基于 NIO（Nonblocking IO，非阻塞IO）开发的网络通信框架，对比于 BIO（Blocking I/O，阻塞IO），他的并发性能得到了很大提高。\n传输快：Netty 的传输依赖于零拷贝特性，尽量减少不必要的内存拷贝，实现了更高效率的传输。\n封装好：Netty 封装了 NIO 操作的很多细节，提供了易于使用调用接口。\n3.Netty 的优势有哪些？\n使用简单：封装了 NIO 的很多细节，使用更简单。\n功能强大：预置了多种编解码功能，支持多种主流协议。\n定制能力强：可以通过 ChannelHandler 对通信框架进行灵活地扩展。\n性能高：通过与其他业界主流的 NIO 框架对比，Netty 的综合性能最优。\n稳定：Netty 修复了已经发现的所有 NIO 的 bug，让开发人员可以专注于业务本身。\n社区活跃：Netty 是活跃的开源项目，版本迭代周期短，bug 修复速度快。")]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[t._v("Netty 的高性能表现在哪些方面？\n心跳，对服务端：会定时清除闲置会话 inactive(netty5)，对客户端:用来检测会话是否断开，是否重来，检测网络延迟，其中 idleStateHandler 类 用来检测会话状态")])]),t._v(" "),n("p",[t._v("串行无锁化设计，即消息的处理尽可能在同一个线程内完成，期间不进行线程切换，这样就避免了多线程竞争和同步锁。表面上看，串行化设计似乎 CPU 利用率不高，并发程度不够。但是，通过调整 NIO 线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列-多个工作线程模型性能更优。")]),t._v(" "),n("p",[t._v("可靠性，链路有效性检测：链路空闲检测机制，读/写空闲超时机制；内存保护机制：通过内存池重用 ByteBuf;ByteBuf 的解码保护；优雅停机：不再接收新消息、退出前的预处理操作、资源的释放操作。")]),t._v(" "),n("p",[t._v("Netty 安全性：支持的安全协议：SSL V2 和 V3，TLS，SSL 单向认证、双向认证和第三方 CA证。")]),t._v(" "),n("p",[t._v("高效并发编程的体现：volatile 的大量、正确使用；CAS 和原子类的广泛使用；线程安全容器的使用；通过读写锁提升并发性能。IO 通信性能三原则：传输（AIO）、协议（Http）、线程（主从多线程）")]),t._v(" "),n("p",[t._v("流量整型的作用（变压器）：防止由于上下游网元性能不均衡导致下游网元被压垮，业务流中断；防止由于通信模块接受消息过快，后端业务线程处理不及时导致撑死问题。")]),t._v(" "),n("p",[t._v("TCP 参数配置：SO_RCVBUF 和 SO_SNDBUF：通常建议值为 128K 或者 256K；")]),t._v(" "),n("p",[t._v("SO_TCPNODELAY：NAGLE 算法通过将缓冲区内的小封包自动相连，组成较大的封包，阻止大量小封包的发送阻塞网络，从而提高网络应用效率。但是对于时延敏感的应用场景需要关闭该优化算法；")])])}),[],!1,null,null,null);n.default=v.exports}}]);