(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{796:function(e,a,r){"use strict";r.r(a);var t=r(14),s=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"高级02-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高级02-dockerfile"}},[e._v("#")]),e._v(" 高级02 DockerFile")]),e._v(" "),a("p",[e._v("Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zouyu0310/images/raw/master/img/20220108010530.png",alt:"image-20220108010530355"}})]),e._v(" "),a("p",[e._v("构建三步骤")]),e._v(" "),a("ol",[a("li",[e._v("编写Dockerfile文件")]),e._v(" "),a("li",[e._v("docker build命令构建镜像")]),e._v(" "),a("li",[e._v("docker run依镜像运行容器实例")])]),e._v(" "),a("h2",{attrs:{id:"dockerfile构建过程解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile构建过程解析"}},[e._v("#")]),e._v(" DockerFile构建过程解析")]),e._v(" "),a("h3",{attrs:{id:"dockerfile内容基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile内容基础知识"}},[e._v("#")]),e._v(" Dockerfile内容基础知识")]),e._v(" "),a("p",[e._v("1：每条保留字指令都必须为大写字母且后面要跟随至少一个参数")]),e._v(" "),a("p",[e._v("2：指令按照从上到下，顺序执行")]),e._v(" "),a("p",[e._v("3：#表示注释")]),e._v(" "),a("p",[e._v("4：每条指令都会创建一个新的镜像层并对镜像进行提交")]),e._v(" "),a("h3",{attrs:{id:"docker执行dockerfile的大致流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker执行dockerfile的大致流程"}},[e._v("#")]),e._v(" Docker执行Dockerfile的大致流程")]),e._v(" "),a("p",[e._v("（1）docker从基础镜像运行一个容器")]),e._v(" "),a("p",[e._v("（2）执行一条指令并对容器作出修改")]),e._v(" "),a("p",[e._v("（3）执行类似docker commit的操作提交一个新的镜像层")]),e._v(" "),a("p",[e._v("（4）docker再基于刚提交的镜像运行一个新容器(形成多分层)")]),e._v(" "),a("p",[e._v("（5）执行dockerfile中的下一条指令直到所有指令都执行完成")]),e._v(" "),a("h3",{attrs:{id:"小总结-照方拿药"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小总结-照方拿药"}},[e._v("#")]),e._v(" 小总结 -- 照方拿药")]),e._v(" "),a("p",[e._v("从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，")]),e._v(" "),a("ul",[a("li",[e._v("Dockerfile是软件的原材料")]),e._v(" "),a("li",[e._v("Docker镜像 是软件的交付品")]),e._v(" "),a("li",[e._v("Docker容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例\nDockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zouyu0310/images/raw/master/img/20220108011138.png",alt:"image-20220108011138670"}})]),e._v(" "),a("p",[e._v("1 Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;")]),e._v(" "),a("p",[e._v("2 Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时会真正开始提供服务;")]),e._v(" "),a("p",[e._v("3 Docker容器，容器是直接提供服务的。")]),e._v(" "),a("h2",{attrs:{id:"dockerfile常用保留字指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile常用保留字指令"}},[e._v("#")]),e._v(" DockerFile常用保留字指令")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/zouyu0310/images/raw/master/img/20220108011606.png",alt:"image-20220108011606721"}})]),e._v(" "),a("h1",{attrs:{id:"案例-自定义镜像mycentosjava8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#案例-自定义镜像mycentosjava8"}},[e._v("#")]),e._v(" 案例  自定义镜像mycentosjava8")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("要求:Centos7镜像具备vim+ifconfig+jdk8")])]),e._v(" "),a("li",[a("p",[e._v("编写:DockerFile --注意：大写字母D")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# FROM基于哪个镜像开工\nFROM centos\nMAINTAINER zzyy<zzyybs@126.com>\n\n# 镜像进入的路径 设置的环境变量,可以在后续的任何RUN指令中使用\nENV MYPATH /usr/local\n# 引用上述路径,WORKDIR 终端默认登陆的进来工作目录，一个落脚点\nWORKDIR $MYPATH\n \n# 第一个功能: 安装vim编辑器,RUN也就是在linux系统下执行的命令\nRUN yum -y install vim\n# 第二个功能:安装ifconfig命令查看网络IP\nRUN yum -y install net-tools\n# 第三个功能:安装java8及lib库\nRUN yum -y install glibc.i686\nRUN mkdir /usr/local/java\n#ADD 是相对路径jar,把jdk-8u261-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置\nADD jdk-8u261-linux-x64.tar.gz /usr/local/java/\n#配置java环境变量\nENV JAVA_HOME /usr/local/java/jdk1.8.0_261\nENV JRE_HOME $JAVA_HOME/jre\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\nENV PATH $JAVA_HOME/bin:$PATH\n \nEXPOSE 80\n \nCMD echo $MYPATH\nCMD echo "success--------------ok"\nCMD /bin/bash\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("构建:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker build -t centosjava8:1.5 .\n\n# 注意，上面TAG后面有个空格，有个点\n")])])]),a("p",[a("img",{attrs:{src:"https://gitee.com/zouyu0310/images/raw/master/img/20220129000341.png",alt:"image-20220129000334350"}})]),e._v(" "),a("p",[e._v("dockerfile中from引用了centos镜像，但是本地没有会自动下载。")]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("运行: 验证是否三个功能正常")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker run -it centosjava8:1.5 /bin/bash\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("java -verison \n# (此处可能出错,一定检查提供jdk和路径名称是否一致)\n# 补充: linux 环境变量文件: /etc/profile \nifconfig\nvim filename\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);