(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{511:function(t,a,r){t.exports=r.p+"assets/img/20200519095355.a7866a49.png"},512:function(t,a,r){t.exports=r.p+"assets/img/20200519095419.13f0287d.png"},513:function(t,a,r){t.exports=r.p+"assets/img/20200519100327.0661a379.png"},514:function(t,a,r){t.exports=r.p+"assets/img/20200519100459.7102910f.png"},932:function(t,a,r){"use strict";r.r(a);var s=r(14),_=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#1-%E4%BB%80%E4%B9%88%E6%98%AFnginx"}},[t._v("1. 什么是nginx")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86"}},[t._v("2. 正向代理与反向代理")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#21-%E6%A6%82%E5%BF%B5"}},[t._v("2.1 概念")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#22-%E5%8C%BA%E5%88%AB"}},[t._v("2.2 区别")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80-%E4%BB%A3%E7%90%86-%E4%B8%80%E6%9C%8D%E5%8A%A1%E7%AB%AF"}},[t._v("正向代理:客户端 <一> 代理 一>服务端")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80%E4%BB%A3%E7%90%86-%E4%B8%80-%E6%9C%8D%E5%8A%A1%E7%AB%AF"}},[t._v("反向代理:客户端 一>代理 <一> 服务端")])])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1"}},[t._v("3. 负载均衡")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB"}},[t._v("4. 动静分离")])])]),t._v(" "),a("h1",{attrs:{id:"_1-什么是nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是nginx"}},[t._v("#")]),t._v(" 1. 什么是nginx")]),t._v(" "),a("p",[t._v('Nginx ("engine x") 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能力强。')]),t._v(" "),a("p",[t._v("Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等，但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。")]),t._v(" "),a("h1",{attrs:{id:"_2-正向代理与反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-正向代理与反向代理"}},[t._v("#")]),t._v(" 2. 正向代理与反向代理")]),t._v(" "),a("h2",{attrs:{id:"_2-1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-概念"}},[t._v("#")]),t._v(" 2.1 概念")]),t._v(" "),a("p",[a("strong",[t._v("正向代理")]),t._v("是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。")]),t._v(" "),a("p",[a("strong",[t._v("反向代理")]),t._v("正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。")]),t._v(" "),a("h2",{attrs:{id:"_2-2-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-区别"}},[t._v("#")]),t._v(" 2.2 区别")]),t._v(" "),a("p",[a("img",{attrs:{src:r(511),alt:""}})]),t._v(" "),a("p",[t._v("正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(512),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"正向代理-客户端-一-代理-一-服务端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向代理-客户端-一-代理-一-服务端"}},[t._v("#")]),t._v(" 正向代理:客户端 <一> 代理 一>服务端")]),t._v(" "),a("p",[t._v("正向代理简单地打个租房的比方:")]),t._v(" "),a("p",[t._v("A(客户端)想租C(服务端)的房子,但是A(客户端)并不认识C(服务端)租不到。\nB(代理)认识C(服务端)能租这个房子所以你找了B(代理)帮忙租到了这个房子。")]),t._v(" "),a("p",[t._v("这个过程中C(服务端)不认识A(客户端)只认识B(代理)\nC(服务端)并不知道A(客户端)租了房子，只知道房子租给了B(代理)。")]),t._v(" "),a("h3",{attrs:{id:"反向代理-客户端-一-代理-一-服务端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理-客户端-一-代理-一-服务端"}},[t._v("#")]),t._v(" 反向代理:客户端 一>代理 <一> 服务端")]),t._v(" "),a("p",[t._v("反向代理也用一个租房的例子:")]),t._v(" "),a("p",[t._v("A(客户端)想租一个房子,B(代理)就把这个房子租给了他。\n这时候实际上C(服务端)才是房东。\nB(代理)是中介把这个房子租给了A(客户端)。")]),t._v(" "),a("p",[t._v("这个过程中A(客户端)并不知道这个房子到底谁才是房东\n他都有可能认为这个房子就是B(代理)的")]),t._v(" "),a("p",[a("strong",[t._v("由上的例子和图，我们可以知道正向代理和反向代理的区别在于代理的对象不一样,正向代理的代理对象是客户端,反向代理的代理对象是服务端。")])]),t._v(" "),a("h1",{attrs:{id:"_3-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-负载均衡"}},[t._v("#")]),t._v(" 3. 负载均衡")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负\\载均衡")])])]),t._v(" "),a("p",[a("img",{attrs:{src:r(513),alt:""}})]),t._v(" "),a("h1",{attrs:{id:"_4-动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-动静分离"}},[t._v("#")]),t._v(" 4. 动静分离")]),t._v(" "),a("p",[t._v("为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。")]),t._v(" "),a("p",[a("img",{attrs:{src:r(514),alt:""}})])])}),[],!1,null,null,null);a.default=_.exports}}]);