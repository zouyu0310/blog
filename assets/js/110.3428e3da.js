(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{702:function(e,n,a){"use strict";a.r(n);var s=a(14),t=Object(s.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("hr"),e._v(" "),n("h2",{attrs:{id:"转移方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转移方案"}},[e._v("#")]),e._v(" 转移方案")]),e._v(" "),n("p",[e._v("100服务器 主库和测试库转移到18服务器")]),e._v(" "),n("h2",{attrs:{id:"_18服务器mysql安装方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18服务器mysql安装方案"}},[e._v("#")]),e._v(" 18服务器MySQL安装方案")]),e._v(" "),n("p",[e._v("docker部署，做好数据映射和重启方案")]),e._v(" "),n("p",[e._v("docker 命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker run --restart=always  -d    --privileged=true   -v /dockerData/mysql/data:/var/lib/mysql   -p 3306:3306 --name mysql3306 -e MYSQL_ROOT_PASSWORD=Qianyan89892528  mysql:8.0.33 \n")])])]),n("p",[e._v("docker-compose")]),e._v(" "),n("p",[e._v("安装")]),e._v(" "),n("p",[e._v("构建")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker-compose up\n\n补充:\ndocker-compose up  #启动所有容器\ndocker-compose up -d  #后台启动并运行所有容器\ndocker-compose up --no-recreate -d  #不重新创建已经停止的容器\ndocker-compose up -d test2  #只启动test2这个容器\ndocker-compose stop  #停止容器\ndocker-compose start  #启动容器\ndocker-compose down #停止并销毁容器\n")])])]),n("p",[e._v("配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("version: '3'\nservices:\n  mysql:                                            #mysql服务节点\n    image: mysql:8.0.33                                #mysql镜像，如果镜像容器没有会去自动拉取\n    container_name: mysqlcompose3306                           #容器的名称\n    command:                                        #构建容器后所执行的命令\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_unicode_ci\n      --lower-case-table-names=1    #忽略数据表明大小写 \n    restart: always                                 #跟随docker的启动而启动\n    environment:\n      MYSQL_ROOT_PASSWORD: Qianyan89892528                     #设置root帐号密码\n      SET_CONTAINER_TIMEZONE: true\n      CONTAINER_TIMEZONE: Asia/Shanghai                       #time\n    ports:\n      - 3306:3306\n    volumes:\n      - /data/dockerData/mysql/data:/var/lib/mysql           #数据文件挂载\n      - /data/dockerData/mysql/conf.d:/etc/mysql/conf.d      #配置文件挂载\n      - /data/dockerData/mysql/log:/var/log/mysql            #日志文件挂载\n      - /etc/localtime:/etc/localtime\n\n")])])]),n("p",[e._v("my.cnf")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[mysqld]\n\nport=3306\n\n# 数据存放的地方\ndatadir=/var/lib/mysql\n# 连接的地方\n#socket=/data/mysql/mysql.sock\n# 错误日志输出地方\n#log-error=/data/dockerData/mysql/errorlog\n# 进程文件\n#pid-file=/data/mysql/run/mysqld/mysqld.pid\n# 缓存的地方\n#tmpdir=/data/dockerData/mysql/tmp\n# 分组权限\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n# 大小写敏感\nlower_case_table_names=1\n\nlog-bin=mysql100-master\nserver-id=4\n# 开启binlog\n#log_bin= mysql-bin\n#log_bin_basename=/opt/mysql/mysql-bin\n#log_bin_index=/opt/mysql/mysql-bin.index\ninnodb_buffer_pool_size=4G\ninnodb_io_capacity= 20000\nmax_allowed_packet=256M\nkey_buffer_size= 2048M\ncharacter-set-server=utf8\ndefault-storage-engine=InnoDB\nmax_connections = 5000\nmax_connect_errors = 6000\nthread_cache_size = 64\ninnodb_open_files = 500\nmyisam_max_sort_file_size=100G\nmyisam_sort_buffer_size=35M\ninnodb_flush_log_at_trx_commit=1\ninnodb_thread_concurrency=18\nbinlog_cache_size = 32768\nmax_heap_table_size = 16M\ntmp_table_size = 512M\njoin_buffer_size = 16M\nsort_buffer_size = 16M\nread_rnd_buffer_size = 8M \nread_buffer_size = 2M\ninteractive_timeout = 28800\nwait_timeout = 28800\nlog_bin_trust_function_creators = ON\ntransaction_isolation = REPEATABLE-READ\nbinlog_format = ROW\nexpire_logs_days = 7\nslow_query_log = 0\n#慢日志目录\nslow_query_log_file=/data/dockerData/mysql/lib/mysql/mysql100-slow.log\n#等待时间超过5s算慢日志 \nlong_query_time = 20\nlog_slave_updates = true\nback_log = 600\ninnodb_file_per_table = ON\nopen_files_limit = 65535\ntable_open_cache = 512\ninnodb_write_io_threads = 32\ninnodb_read_io_threads = 32\ninnodb_purge_threads = 1\ninnodb_log_buffer_size = 2M\ninnodb_log_file_size = 32M\ninnodb_max_dirty_pages_pct = 90\nbulk_insert_buffer_size = 8M\ngroup_concat_max_len=102400\n\n[mysql] \n\n# 客户端配置 # \n\nport= 3306 \n\nsocket=/data/mysql/mysql.sock \n\ndefault-character-set= utf8\n\n")])])]),n("p",[e._v("注:")]),e._v(" "),n("p",[e._v("/etc/localtime:/etc/localtime 用于解决时区问题")]),e._v(" "),n("p",[e._v("查看docker容器内")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker exec -it 应用idorname bash\n")])])]),n("p",[e._v("docker-compose 后台运行")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker compose up -d\n")])])]),n("hr"),e._v(" "),n("p",[e._v("参考文档")]),e._v(" "),n("p",[e._v("https://blog.csdn.net/cast_lzl/article/details/115833302")])])}),[],!1,null,null,null);n.default=t.exports}}]);