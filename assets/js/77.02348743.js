(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{525:function(t,a,s){t.exports=s.p+"assets/img/20200519132450.30ddfbd7.png"},935:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4"}},[t._v("1. 常用命令")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC"}},[t._v("1. 查看版本")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E6%9F%A5%E7%9C%8B-nginx-%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7"}},[t._v("2. 查看 Nginx 配置语法的正确性")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E4%B8%BAnginx%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"}},[t._v("3. 为Nginx指定一个配置文件")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-%E5%90%AF%E5%8A%A8-nginx-%E6%9C%8D%E5%8A%A1"}},[t._v("4. 启动 Nginx 服务")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#5-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8"}},[t._v("5. 开机自启动")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#6-%E9%87%8D%E5%90%AF-nginx-%E6%9C%8D%E5%8A%A1"}},[t._v("6. 重启 Nginx 服务")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#7-%E6%9F%A5%E7%9C%8B-nginx-%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81"}},[t._v("7. 查看 Nginx 服务状态")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#8-%E9%87%8D%E8%BD%BD-nginx-%E6%9C%8D%E5%8A%A1"}},[t._v("8. 重载 Nginx 服务")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#9-%E5%81%9C%E6%AD%A2-nginx-%E6%9C%8D%E5%8A%A1"}},[t._v("9. 停止 Nginx 服务")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#10-%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9"}},[t._v("10. 查看命令帮助")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"}},[t._v("2. 配置文件")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E5%85%A8%E5%B1%80%E5%9D%97"}},[t._v("第一部分：全局块")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86events-%E5%9D%97"}},[t._v("第二部分：events 块")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86http-%E5%9D%97"}},[t._v("第三部分：http 块")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-http%E5%85%A8%E5%B1%80%E5%9D%97"}},[t._v("1. http全局块")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-server%E5%9D%97"}},[t._v("2. server块")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1%E5%85%A8%E5%B1%80-server-%E5%9D%97"}},[t._v("1.全局 server 块")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-location%E5%9D%97"}},[t._v("2. location块")])])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#nginxconf-%E8%AF%A6%E7%BB%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D"}},[t._v("nginx.conf 详细的配置文件介绍")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[t._v("总结")])])])])]),t._v(" "),a("h1",{attrs:{id:"_1-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-常用命令"}},[t._v("#")]),t._v(" 1. 常用命令")]),t._v(" "),a("p",[t._v("以下命令nginx已经通过apt安装好了，有nginx命令。")]),t._v(" "),a("h2",{attrs:{id:"_1-查看版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-查看版本"}},[t._v("#")]),t._v(" 1. 查看版本")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n")])])]),a("p",[t._v("如果你想同时看到更详细的配置项，使用 -V")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-V")]),t._v("\n")])])]),a("h2",{attrs:{id:"_2-查看-nginx-配置语法的正确性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-查看-nginx-配置语法的正确性"}},[t._v("#")]),t._v(" 2. 查看 Nginx 配置语法的正确性")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v("\n")])])]),a("p",[t._v("这里如果用大写 T，效果就是 测试、丢弃并退出")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-T")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-为nginx指定一个配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-为nginx指定一个配置文件"}},[t._v("#")]),t._v(" 3. 为Nginx指定一个配置文件")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/path/config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#为Nginx指定一个配置文件，来代替缺省值conf/nginx.conf")]),t._v("\n")])])]),a("h2",{attrs:{id:"_4-启动-nginx-服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动-nginx-服务"}},[t._v("#")]),t._v(" 4. 启动 Nginx 服务")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl start nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#systemd")]),t._v("\nOR\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" nginx start   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#sysvinit")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5-开机自启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-开机自启动"}},[t._v("#")]),t._v(" 5. 开机自启动")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#systemd")]),t._v("\n或\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" nginx "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#sysv init")]),t._v("\n")])])]),a("h2",{attrs:{id:"_6-重启-nginx-服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-重启-nginx-服务"}},[t._v("#")]),t._v(" 6. 重启 Nginx 服务")]),t._v(" "),a("p",[t._v("重启的意思是，停止 然后 启动")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl restart nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#systemd")]),t._v("\n或\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" nginx restart   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#sysv init")]),t._v("\n")])])]),a("h2",{attrs:{id:"_7-查看-nginx-服务状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-查看-nginx-服务状态"}},[t._v("#")]),t._v(" 7. 查看 Nginx 服务状态")]),t._v(" "),a("p",[t._v("这条是看运行时的服务状态信息的。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl status nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#systemd")]),t._v("\n或\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" nginx status   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#sysvinit")]),t._v("\n")])])]),a("h2",{attrs:{id:"_8-重载-nginx-服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-重载-nginx-服务"}},[t._v("#")]),t._v(" 8. 重载 Nginx 服务")]),t._v(" "),a("p",[t._v("重载是重新加载 配置文件，看命令：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl reload nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#systemd")]),t._v("\n或\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" nginx reload   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#sysvinit")]),t._v("\n")])])]),a("h2",{attrs:{id:"_9-停止-nginx-服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-停止-nginx-服务"}},[t._v("#")]),t._v(" 9. 停止 Nginx 服务")]),t._v(" "),a("p",[t._v("不管你是什么原因想停了它，都可以用：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" systemctl stop nginx "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#systemd")]),t._v("\nOR\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v(" nginx stop   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#sysvinit")]),t._v("\n")])])]),a("h2",{attrs:{id:"_10-查看命令帮助"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-查看命令帮助"}},[t._v("#")]),t._v(" 10. 查看命令帮助")]),t._v(" "),a("p",[t._v("如果还有什么不懂，或者想知道其他命令，就用这个")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("systemctl "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-h")]),t._v(" nginx\n")])])]),a("h1",{attrs:{id:"_2-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置文件"}},[t._v("#")]),t._v(" 2. 配置文件")]),t._v(" "),a("p",[t._v("nginx 安装目录下，其默认的配置文件都放在这个目录的 conf 目录下，而主配置文件 nginx.conf 也在其中，后续对 nginx 的使用基本上都是对此配置文件进行相应的修改")]),t._v(" "),a("p",[a("img",{attrs:{src:s(525),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"第一部分-全局块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一部分-全局块"}},[t._v("#")]),t._v(" 第一部分：全局块")]),t._v(" "),a("p",[t._v("从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。")]),t._v(" "),a("p",[t._v("比如上面第一行配置的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132657.png",alt:""}})]),t._v(" "),a("p",[t._v("这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约")]),t._v(" "),a("h2",{attrs:{id:"第二部分-events-块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二部分-events-块"}},[t._v("#")]),t._v(" 第二部分：events 块")]),t._v(" "),a("p",[t._v("events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132920.png",alt:""}})]),t._v(" "),a("p",[t._v("上述例子就表示每个 work process 支持的最大连接数为 1024. 这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。")]),t._v(" "),a("h2",{attrs:{id:"第三部分-http-块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-http-块"}},[t._v("#")]),t._v(" 第三部分：http 块")]),t._v(" "),a("p",[t._v("这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。")]),t._v(" "),a("p",[t._v("需要注意的是：http 块也可以包括 "),a("strong",[t._v("http")]),t._v(" "),a("strong",[t._v("全局块")]),t._v("、"),a("strong",[t._v("server")]),t._v(" "),a("strong",[t._v("块")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_1-http全局块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-http全局块"}},[t._v("#")]),t._v(" 1. http全局块")]),t._v(" "),a("p",[t._v("http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。")]),t._v(" "),a("p",[a("strong",[t._v("upstream")]),t._v("（上游服务器设置，主要为反向代理、负载均衡相关配置，upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡")]),t._v(" "),a("h3",{attrs:{id:"_2-server块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-server块"}},[t._v("#")]),t._v(" 2. server块")]),t._v(" "),a("p",[t._v("这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。")]),t._v(" "),a("p",[t._v("每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。")]),t._v(" "),a("p",[t._v("而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。")]),t._v(" "),a("h4",{attrs:{id:"_1-全局-server-块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局-server-块"}},[t._v("#")]),t._v(" 1.全局 server 块")]),t._v(" "),a("p",[t._v("最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。")]),t._v(" "),a("h4",{attrs:{id:"_2-location块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-location块"}},[t._v("#")]),t._v(" 2. location块")]),t._v(" "),a("p",[t._v("一个 server 块可以配置多个 location 块。")]),t._v(" "),a("p",[t._v("这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。")]),t._v(" "),a("h2",{attrs:{id:"nginx-conf-详细的配置文件介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-conf-详细的配置文件介绍"}},[t._v("#")]),t._v(" nginx.conf 详细的配置文件介绍")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#定义Nginx运行的用户和用户组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("user")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("www www; ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#nginx进程数，通常设置成和cpu的数量相等")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("worker_processes")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("4; ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#全局错误日志定义类型，[debug | info | notice | warn | error | crit]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#error_log  logs/error.log;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#error_log  logs/error.log  notice;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#error_log  logs/error.log  info;")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#进程pid文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#pid        logs/nginx.pid;")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#指定进程可以打开的最大描述符：数目")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#工作模式与连接数上限")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("worker_rlimit_nofile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("65535;")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("events")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #补充说明：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #与apache相类，nginx针对不同的操作系统，有不同的事件模型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #A）标准事件模型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #B）高效事件模型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #Epoll：使用于Linux内核2.6版本及以后的系统。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("epoll")]),t._v("\n    \n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #单个进程最大连接数（最大连接数=连接数+进程数）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    worker_connections")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" 1024;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #keepalive 超时时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    keepalive_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("60;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #分页大小可以用命令getconf PAGESIZE 取得。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #[root@web001 ~]# getconf PAGESIZE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    client_header_buffer_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("4k;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    open_file_cache")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("max=65535 inactive=60s;")]),t._v("\n    \n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #这个是指多长时间检查一次缓存的有效信息。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    open_file_cache_valid")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("80s;")]),t._v("\n    \n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    open_file_cache_min_uses")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    open_file_cache_errors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on;")]),t._v("\n}\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设定http服务器，利用它的反向代理功能提供负载均衡支持")]),t._v("\nhttp{\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #文件扩展名与文件类型映射表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("mime.types;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #默认文件类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    default_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("application/octet-stream;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #默认编码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    charset")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("utf-8;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #服务器名字的hash表大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    server_names_hash_bucket_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("128;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    client_header_buffer_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("32k;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    large_client_header_buffers")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("4 64k;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #设定通过nginx上传文件的大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    client_max_body_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("8m;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    sendfile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("     #开启目录列表访问，合适下载服务器，默认关闭。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    autoindex")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("      #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    tcp_nopush")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on;")]),t._v("\n     \n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    tcp_nodelay")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #长连接超时时间，单位是秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    keepalive_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("120;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    fastcgi_connect_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("300;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    fastcgi_send_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("300;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    fastcgi_read_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("300;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    fastcgi_buffer_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("64k;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    fastcgi_buffers")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("4 64k;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    fastcgi_busy_buffers_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("128k;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    fastcgi_temp_file_write_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("128k;")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #gzip模块设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    gzip")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on; #开启gzip压缩输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    gzip_min_length")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1k;    #最小压缩文件大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    gzip_buffers")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("4 16k;    #压缩缓冲区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    gzip_http_version")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    gzip_comp_level")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("2;     #压缩等级")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    gzip_types")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    gzip_vary")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #开启限制IP连接数的时候需要使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #limit_zone crawler $binary_remote_addr 10m;")]),t._v("\n    \n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #负载均衡配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    upstream")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("piao.jd.com {")]),t._v("\n     \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("192.168.80.121:80 weight=3;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("192.168.80.122:80 weight=2;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("192.168.80.123:80 weight=3;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #nginx的upstream目前支持4种方式的分配")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #1、轮询（默认）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #2、weight")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #例如：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #upstream bakend {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 192.168.0.14 weight=10;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 192.168.0.15 weight=10;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #2、ip_hash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #例如：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #upstream bakend {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    ip_hash;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 192.168.0.14:88;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 192.168.0.15:80;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #3、fair（第三方）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #upstream backend {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server server1;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server server2;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    fair;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #4、url_hash（第三方）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #upstream backend {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server squid1:3128;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server squid2:3128;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    hash $request_uri;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    hash_method crc32;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #tips:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #upstream bakend{#定义负载均衡设备的Ip及设备状态}{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    ip_hash;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 127.0.0.1:9090 down;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 127.0.0.1:8080 weight=2;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 127.0.0.1:6060;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #    server 127.0.0.1:7070 backup;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #每个设备的状态设置为:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #1.down表示单前的server暂时不参与负载")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #2.weight为weight越大，负载的权重就越大。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #4.fail_timeout:max_fails次失败后，暂停的时间。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡")]),t._v("\n    }\n    \n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    #虚拟主机的配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("    server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #监听端口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        listen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("80;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #域名可以有多个，用空格隔开")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        server_name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("www.jd.com jd.com;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #默认入口文件名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("index.html index.htm index.php;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        root")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("/data/www/jd;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #对******进行负载均衡")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("~ .*.(php|php5)?$")]),t._v("\n        {\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            fastcgi_pass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("127.0.0.1:9000;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            fastcgi_index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("index.php;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("fastcgi.conf;")]),t._v("\n        }\n         \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #图片缓存时间设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("~ .*.(gif|jpg|jpeg|png|bmp|swf)$")]),t._v("\n        {\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            expires")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10d;")]),t._v("\n        }\n         \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #JS和CSS缓存时间设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("~ .*.(js|css)?$")]),t._v("\n        {\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            expires")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1h;")]),t._v("\n        }\n         \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #日志格式设定")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$remote_user：用来记录客户端用户名称；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$time_local： 用来记录访问时间与时区；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$request： 用来记录请求的url与http协议；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$status： 用来记录请求状态；成功是200，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$http_referer：用来记录从那个页面链接访问过来的；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #$http_user_agent：记录客户浏览器的相关信息；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        log_format")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("access '$remote_addr - $remote_user [$time_local] \"$request\" '")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        '$status")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v('$body_bytes_sent "$http_referer" \'')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v('        \'"$http_user_agent"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("$http_x_forwarded_for';")]),t._v("\n         \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #定义本虚拟主机的访问日志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        access_log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" /usr/local/nginx/logs/host.access.log  main;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        access_log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v(" /usr/local/nginx/logs/host.access.404.log  log404;")]),t._v("\n         \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('        #对 "/connect-controller" 启用反向代理')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("/connect-controller {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_pass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("http://127.0.0.1:88; #请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_redirect")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("off;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_set_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("X-Real-IP $remote_addr;")]),t._v("\n             \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_set_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("X-Forwarded-For $proxy_add_x_forwarded_for;")]),t._v("\n             \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #以下是一些反向代理的配置，可选。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_set_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("Host $host;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #允许客户端请求的最大单文件字节数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            client_max_body_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10m;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #缓冲区代理缓冲用户端请求的最大字节数，")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            client_body_buffer_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("128k;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #表示使nginx阻止HTTP应答代码为400或者更高的应答。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_intercept_errors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("on;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #后端服务器连接的超时时间_发起握手等候响应超时时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #nginx跟后端服务器连接超时时间(代理连接超时)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_connect_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("90;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #后端服务器数据回传时间(代理发送超时)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_send_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("90;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #连接成功后，后端服务器响应时间(代理接收超时)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_read_timeout")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("90;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #设置代理服务器（nginx）保存用户头信息的缓冲区大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_buffer_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("4k;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #proxy_buffers缓冲区，网页平均在32k以下的设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_buffers")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("4 32k;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #高负荷下缓冲大小（proxy_buffers*2）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_busy_buffers_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("64k;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("            #设定缓存文件夹大小，大于这个值，将从upstream服务器传")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_temp_file_write_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("64k;")]),t._v("\n        }\n        \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #本地动静分离反向代理配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("        #所有jsp的页面均交由tomcat或resin处理")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("        location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("~ .(jsp|jspx|do)?$ {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_set_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("Host $host;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_set_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("X-Real-IP $remote_addr;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_set_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("X-Forwarded-For $proxy_add_x_forwarded_for;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("            proxy_pass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("http://127.0.0.1:8080;")]),t._v("\n        }\n    }\n}\n")])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。")]),t._v(" "),a("p",[t._v("main 部分设置的指令影响其他所有部分的设置；")]),t._v(" "),a("p",[t._v("server 部分的指令主要用于制定虚拟主机域名、IP 和端口号；")]),t._v(" "),a("p",[t._v("upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；")]),t._v(" "),a("p",[t._v("location 部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）。")]),t._v(" "),a("p",[t._v("他们之间的关系：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。")])])}),[],!1,null,null,null);a.default=n.exports}}]);