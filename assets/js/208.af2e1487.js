(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{824:function(a,s,t){"use strict";t.r(s);var r=t(14),n=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"jvm-常考面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm-常考面试题"}},[a._v("#")]),a._v(" JVM 常考面试题")]),a._v(" "),s("h2",{attrs:{id:"_1-什么是jvm内存结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是jvm内存结构"}},[a._v("#")]),a._v(" 1. 什么是JVM内存结构？")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210220111553294.png",alt:""}})]),a._v(" "),s("p",[a._v("jvm将虚拟机分为5大区域，程序计数器、虚拟机栈、本地方法栈、java堆、方法区；")]),a._v(" "),s("ul",[s("li",[a._v("程序计数器：线程私有的，是一块很小的内存空间，作为当前线程的行号指示器，用于记录当前虚拟机正在执行的线程指令地址；")]),a._v(" "),s("li",[a._v("虚拟机栈：线程私有的，每个方法执行的时候都会创建一个栈帧，用于存储局部变量表、操作数、动态链接和方法返回等信息，当线程请求的栈深度超过了虚拟机允许的最大深度时，就会抛出StackOverFlowError；")]),a._v(" "),s("li",[a._v("本地方法栈：线程私有的，保存的是native方法的信息，当一个jvm创建的线程调用native方法后，jvm不会在虚拟机栈中为该线程创建栈帧，而是简单的动态链接并直接调用该方法；")]),a._v(" "),s("li",[a._v("堆：java堆是所有线程共享的一块内存，几乎所有对象的实例和数组都要在堆上分配内存，因此该区域经常发生垃圾回收的操作；")]),a._v(" "),s("li",[a._v("方法区：存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码数据。即永久代，在jdk1.8中不存在方法区了，被元数据区替代了，原方法区被分成两部分；1：加载的类信息，2：运行时常量池；加载的类信息被保存在元数据区中，运行时常量池保存在堆中；")])]),a._v(" "),s("h2",{attrs:{id:"_2-什么是jvm内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是jvm内存模型"}},[a._v("#")]),a._v(" 2. 什么是JVM内存模型？")]),a._v(" "),s("p",[s("strong",[a._v("Java 内存模型")]),a._v("（下文简称 "),s("strong",[a._v("JMM")]),a._v("）就是在底层处理器内存模型的基础上，定义自己的多线程语义。它明确指定了一组排序规则，来保证线程间的可见性。")]),a._v(" "),s("p",[a._v("这一组规则被称为 "),s("strong",[a._v("Happens-Before")]),a._v(", JMM 规定，要想保证 B 操作能够看到 A 操作的结果（无论它们是否在同一个线程），那么 A 和 B 之间必须满足 "),s("strong",[a._v("Happens-Before 关系")]),a._v("：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("单线程规则")]),a._v("：一个线程中的每个动作都 happens-before 该线程中后续的每个动作")]),a._v(" "),s("li",[s("strong",[a._v("监视器锁定规则")]),a._v("：监听器的"),s("strong",[a._v("解锁")]),a._v("动作 happens-before 后续对这个监听器的"),s("strong",[a._v("锁定")]),a._v("动作")]),a._v(" "),s("li",[s("strong",[a._v("volatile 变量规则")]),a._v("：对 volatile 字段的写入动作 happens-before 后续对这个字段的每个读取动作")]),a._v(" "),s("li",[s("strong",[a._v("线程 start 规则")]),a._v("：线程 "),s("strong",[a._v("start()")]),a._v(" 方法的执行 happens-before 一个启动线程内的任意动作")]),a._v(" "),s("li",[s("strong",[a._v("线程 join 规则")]),a._v("：一个线程内的所有动作 happens-before 任意其他线程在该线程 "),s("strong",[a._v("join()")]),a._v(" 成功返回之前")]),a._v(" "),s("li",[s("strong",[a._v("传递性")]),a._v("：如果 A happens-before B, 且 B happens-before C, 那么 A happens-before C")])]),a._v(" "),s("p",[a._v("怎么理解 happens-before 呢？如果按字面意思，比如第二个规则，线程（不管是不是同一个）的解锁动作发生在锁定之前？这明显不对。happens-before 也是为了保证可见性，比如那个解锁和加锁的动作，可以这样理解，线程1释放锁退出同步块，线程2加锁进入同步块，那么线程2就能看见线程1对共享对象修改的结果。")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329222941923.png",alt:""}})]),a._v(" "),s("p",[a._v("Java 提供了几种语言结构，包括 "),s("em",[a._v("volatile")]),a._v(", "),s("em",[a._v("final")]),a._v(" 和 "),s("em",[a._v("synchronized")]),a._v(", 它们旨在帮助程序员向"),s("strong",[a._v("编译器")]),a._v("描述程序的并发要求，其中：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("volatile")]),a._v(" - 保证"),s("strong",[a._v("可见性")]),a._v("和"),s("strong",[a._v("有序性")])]),a._v(" "),s("li",[s("strong",[a._v("synchronized")]),a._v(" - 保证"),s("strong",[a._v("可见性")]),a._v("和"),s("strong",[a._v("有序性")]),a._v("; 通过**管程（Monitor）*"),s("em",[a._v("保证一组动作的*"),s("em",[a._v("原子性")])])]),a._v(" "),s("li",[s("strong",[a._v("final")]),a._v(" - 通过禁止"),s("strong",[a._v("在构造函数初始化")]),a._v("和"),s("strong",[a._v("给 final 字段赋值")]),a._v("这两个动作的重排序，保证"),s("strong",[a._v("可见性")]),a._v("（如果 "),s("strong",[a._v("this 引用逃逸")]),a._v("就不好说可见性了）")])]),a._v(" "),s("p",[a._v("编译器在遇到这些关键字时，会插入相应的内存屏障，保证语义的正确性。")]),a._v(" "),s("p",[a._v("有一点需要"),s("strong",[a._v("注意")]),a._v("的是，"),s("strong",[a._v("synchronized")]),a._v(" "),s("strong",[a._v("不保证")]),a._v("同步块内的代码禁止重排序，因为它通过锁保证同一时刻只有"),s("strong",[a._v("一个线程")]),a._v("访问同步块（或临界区），也就是说同步块的代码只需满足 "),s("strong",[a._v("as-if-serial")]),a._v(" 语义 - 只要单线程的执行结果不改变，可以进行重排序。")]),a._v(" "),s("p",[a._v("所以说，Java 内存模型描述的是多线程对共享内存修改后彼此之间的可见性，另外，还确保正确同步的 Java 代码可以在不同体系结构的处理器上正确运行。")]),a._v(" "),s("h2",{attrs:{id:"_3-heap-和stack-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-heap-和stack-有什么区别"}},[a._v("#")]),a._v(" 3. heap 和stack 有什么区别？")]),a._v(" "),s("p",[s("strong",[a._v("（1")]),a._v("）申请方式")]),a._v(" "),s("p",[a._v("stack:由系统自动分配。例如，声明在函数中一个局部变量 int b; 系统自动在栈中为 b 开辟空间")]),a._v(" "),s("p",[a._v("heap:需要程序员自己申请，并指明大小，在 c 中 malloc 函数，对于Java 需要手动 new Object()的形式开辟")]),a._v(" "),s("p",[s("strong",[a._v("（2")]),a._v("）申请后系统的响应")]),a._v(" "),s("p",[a._v("stack：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。")]),a._v(" "),s("p",[a._v("heap：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。")]),a._v(" "),s("p",[s("strong",[a._v("（3")]),a._v("）申请大小的限制")]),a._v(" "),s("p",[a._v("stack：栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在 WINDOWS 下，栈的大小是 2M（默认值也取决于虚拟内存的大小），如果申请的空间超过栈的剩余空间时，将提示 overflow。因此，能从栈获得的空间较小。")]),a._v(" "),s("p",[a._v("heap：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的， 自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见， 堆获得的空间比较灵活，也比较大。")]),a._v(" "),s("p",[s("strong",[a._v("（4")]),a._v("）申请效率的比较")]),a._v(" "),s("p",[a._v("stack：由系统自动分配，速度较快。但程序员是无法控制的。")]),a._v(" "),s("p",[a._v("heap：由 new 分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便。")]),a._v(" "),s("p",[s("strong",[a._v("（5")]),a._v("）heap和stack中的存储内容")]),a._v(" "),s("p",[a._v("stack：在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址， 然后是函数的各个参数，在大多数的 C 编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。")]),a._v(" "),s("p",[a._v("当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。")]),a._v(" "),s("p",[a._v("heap：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。")]),a._v(" "),s("h2",{attrs:{id:"_4-什么情况下会发生栈内存溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么情况下会发生栈内存溢出"}},[a._v("#")]),a._v(" 4. 什么情况下会发生栈内存溢出？")]),a._v(" "),s("p",[a._v("1、栈是线程私有的，栈的生命周期和线程一样，每个方法在执行的时候就会创建一个栈帧，它包含局部变量表、操作数栈、动态链接、方法出口等信息，局部变量表又包括基本数据类型和对象的引用；\n2、当线程请求的栈深度超过了虚拟机允许的最大深度时，会抛出StackOverFlowError异常，方法递归调用肯可能会出现该问题；\n3、调整参数-xss去调整jvm栈的大小")]),a._v(" "),s("h2",{attrs:{id:"_5-谈谈对-oom-的认识-如何排查-oom-的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-谈谈对-oom-的认识-如何排查-oom-的问题"}},[a._v("#")]),a._v(" 5. 谈谈对 OOM 的认识？如何排查 OOM 的问题？")]),a._v(" "),s("p",[a._v("除了程序计数器，其他内存区域都有 OOM 的风险。")]),a._v(" "),s("ul",[s("li",[a._v("栈一般经常会发生 StackOverflowError，比如 32 位的 windows 系统单进程限制 2G 内存，无限创建线程就会发生栈的 OOM")]),a._v(" "),s("li",[a._v("Java 8 常量池移到堆中，溢出会出 java.lang.OutOfMemoryError: Java heap space，设置最大元空间大小参数无效；")]),a._v(" "),s("li",[a._v("堆内存溢出，报错同上，这种比较好理解，GC 之后无法在堆中申请内存创建对象就会报错；")]),a._v(" "),s("li",[a._v("方法区 OOM，经常会遇到的是动态生成大量的类、jsp 等；")]),a._v(" "),s("li",[a._v("直接内存 OOM，涉及到 -XX:MaxDirectMemorySize 参数和 Unsafe 对象对内存的申请。")])]),a._v(" "),s("p",[a._v("排查 OOM 的方法：")]),a._v(" "),s("ul",[s("li",[a._v("增加两个参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump.hprof，当 OOM 发生时自动 dump 堆内存信息到指定目录；")]),a._v(" "),s("li",[a._v("同时 jstat 查看监控 JVM 的内存和 GC 情况，先观察问题大概出在什么区域；")]),a._v(" "),s("li",[a._v("使用 MAT 工具载入到 dump 文件，分析大对象的占用情况，比如 HashMap 做缓存未清理，时间长了就会内存溢出，可以把改为弱引用 。")])]),a._v(" "),s("h2",{attrs:{id:"_6-谈谈-jvm-中的常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-谈谈-jvm-中的常量池"}},[a._v("#")]),a._v(" 6. 谈谈 JVM 中的常量池？")]),a._v(" "),s("p",[a._v("JVM常量池主要分为"),s("strong",[a._v("Class文件常量池、运行时常量池，全局字符串常量池，以及基本类型包装类对象常量池")]),a._v("。")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("Class文件常量池")]),a._v("。class文件是一组以字节为单位的二进制数据流，在java代码的编译期间，我们编写的java文件就被编译为.class文件格式的二进制数据存放在磁盘中，其中就包括class文件常量池。")]),a._v(" "),s("li",[s("strong",[a._v("运行时常量池")]),a._v("：运行时常量池相对于class常量池一大特征就是具有动态性，java规范并不要求常量只能在运行时才产生，也就是说运行时常量池的内容并不全部来自class常量池，在运行时可以通过代码生成常量并将其放入运行时常量池中，这种特性被用的最多的就是String.intern()。")]),a._v(" "),s("li",[s("strong",[a._v("全局字符串常量池")]),a._v("：字符串常量池是JVM所维护的一个字符串实例的引用表，在HotSpot VM中，它是一个叫做StringTable的全局表。在字符串常量池中维护的是字符串实例的引用，底层C++实现就是一个Hashtable。这些被维护的引用所指的字符串实例，被称作”被驻留的字符串”或”interned string”或通常所说的”进入了字符串常量池的字符串”。")]),a._v(" "),s("li",[a._v("基本类型包装类对象常量池：java中基本类型的包装类的大部分都实现了常量池技术，这些类是Byte,Short,Integer,Long,Character,Boolean,另外两种浮点数类型的包装类则没有实现。另外上面这5种整型的包装类也只是在对应值小于等于127时才可使用对象池，也即对象不负责创建和管理大于127的这些类的对象。")])]),a._v(" "),s("h2",{attrs:{id:"_7-如何判断一个对象是否存活"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-如何判断一个对象是否存活"}},[a._v("#")]),a._v(" 7. 如何判断一个对象是否存活？")]),a._v(" "),s("p",[a._v("判断一个对象是否存活，分为两种算法1：引用计数法；2：可达性分析算法；")]),a._v(" "),s("p",[s("strong",[a._v("引用计数法")]),a._v("：\n给每一个对象设置一个引用计数器，当有一个地方引用该对象的时候，引用计数器就+1，引用失效时，引用计数器就-1；当引用计数器为0的时候，就说明这个对象没有被引用，也就是垃圾对象，等待回收；\n缺点：无法解决循环引用的问题，当A引用B，B也引用A的时候，此时AB对象的引用都不为0，此时也就无法垃圾回收，所以一般主流虚拟机都不采用这个方法；")]),a._v(" "),s("p",[s("strong",[a._v("可达性分析法")]),a._v("\n从一个被称为GC Roots的对象向下搜索，如果一个对象到GC Roots没有任何引用链相连接时，说明此对象不可用，在java中可以作为GC Roots的对象有以下几种：")]),a._v(" "),s("ul",[s("li",[a._v("虚拟机栈中引用的对象")]),a._v(" "),s("li",[a._v("方法区类静态属性引用的变量")]),a._v(" "),s("li",[a._v("方法区常量池引用的对象")]),a._v(" "),s("li",[a._v("本地方法栈JNI引用的对象")])]),a._v(" "),s("p",[a._v("但一个对象满足上述条件的时候，不会马上被回收，还需要进行两次标记；第一次标记：判断当前对象是否有finalize()方法并且该方法没有被执行过，若不存在则标记为垃圾对象，等待回收；若有的话，则进行第二次标记；第二次标记将当前对象放入F-Queue队列，并生成一个finalize线程去执行该方法，虚拟机不保证该方法一定会被执行，这是因为如果线程执行缓慢或进入了死锁，会导致回收系统的崩溃；如果执行了finalize方法之后仍然没有与GC Roots有直接或者间接的引用，则该对象会被回收；")]),a._v(" "),s("h2",{attrs:{id:"_8-强引用、软引用、弱引用、虚引用是什么-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-强引用、软引用、弱引用、虚引用是什么-有什么区别"}},[a._v("#")]),a._v(" 8. 强引用、软引用、弱引用、虚引用是什么，有什么区别？")]),a._v(" "),s("ul",[s("li",[a._v('强引用，就是普通的对象引用关系，如 String s = new String("ConstXiong")')]),a._v(" "),s("li",[a._v("软引用，用于维护一些可有可无的对象。只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。SoftReference 实现")]),a._v(" "),s("li",[a._v("弱引用，相比软引用来说，要更加无用一些，它拥有更短的生命周期，当 JVM 进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。WeakReference 实现")]),a._v(" "),s("li",[a._v("虚引用是一种形同虚设的引用，在现实场景中用的不是很多，它主要用来跟踪对象被垃圾回收的活动。PhantomReference 实现")])]),a._v(" "),s("h2",{attrs:{id:"_9-被引用的对象就一定能存活吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-被引用的对象就一定能存活吗"}},[a._v("#")]),a._v(" 9. 被引用的对象就一定能存活吗？")]),a._v(" "),s("blockquote",[s("p",[a._v("不一定，看 Reference 类型，弱引用在 GC 时会被回收，软引用在内存不足的时候，即 OOM 前会被回收，但如果没有在 Reference Chain 中的对象就一定会被回收。")])]),a._v(" "),s("h2",{attrs:{id:"_10-java中的垃圾回收算法有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-java中的垃圾回收算法有哪些"}},[a._v("#")]),a._v(" 10. Java中的垃圾回收算法有哪些？")]),a._v(" "),s("p",[a._v("java中有四种垃圾回收算法，分别是标记清除法、标记整理法、复制算法、分代收集算法；\n"),s("strong",[a._v("标记清除法")]),a._v("：\n第一步：利用可达性去遍历内存，把存活对象和垃圾对象进行标记；\n第二步：在遍历一遍，将所有标记的对象回收掉；\n特点：效率不行，标记和清除的效率都不高；标记和清除后会产生大量的不连续的空间分片，可能会导致之后程序运行的时候需分配大对象而找不到连续分片而不得不触发一次GC；")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210220111918592.png",alt:""}})]),a._v(" "),s("p",[s("strong",[a._v("标记整理法")]),a._v("：\n第一步：利用可达性去遍历内存，把存活对象和垃圾对象进行标记；\n第二步：将所有的存活的对象向一段移动，将端边界以外的对象都回收掉；\n特点：适用于存活对象多，垃圾少的情况；需要整理的过程，无空间碎片产生；")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210220111933505.png",alt:""}})]),a._v(" "),s("p",[s("strong",[a._v("复制算法")]),a._v("：\n将内存按照容量大小分为大小相等的两块，每次只使用一块，当一块使用完了，就将还存活的对象移到另一块上，然后在把使用过的内存空间移除；\n特点：不会产生空间碎片；内存使用率极低；")]),a._v(" "),s("p",[s("strong",[a._v("分代收集算法")]),a._v("：\n根据内存对象的存活周期不同，将内存划分成几块，java虚拟机一般将内存分成新生代和老生代，在新生代中，有大量对象死去和少量对象存活，所以采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集；老年代中因为对象的存活率极高，没有额外的空间对他进行分配担保，所以采用标记清理或者标记整理算法进行回收；")]),a._v(" "),s("p",[s("strong",[a._v("对比")])]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329224002527.png",alt:"image-20210329224002527"}})]),a._v(" "),s("h2",{attrs:{id:"_11-有哪几种垃圾回收器-各自的优缺点是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-有哪几种垃圾回收器-各自的优缺点是什么"}},[a._v("#")]),a._v(" 11. 有哪几种垃圾回收器，各自的优缺点是什么？")]),a._v(" "),s("p",[a._v("垃圾回收器主要分为以下几种：Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS、G1；")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Serial:单线程的收集器，收集垃圾时，必须stop the world，使用复制算法。它的最大特点是在进行垃圾回收时，需要对所有正在执行的线程暂停（stop the world），对于有些应用是难以接受的，但是如果应用的实时性要求不是那么高，只要停顿的时间控制在N毫秒之内，大多数应用还是可以接受的，是client级别的默认GC方式。")])]),a._v(" "),s("li",[s("p",[a._v("ParNew:Serial收集器的多线程版本，也需要stop the world，复制算")])]),a._v(" "),s("li",[s("p",[a._v("Parallel Scavenge:新生代收集器，复制算法的收集器，并发的多线程收集器，目标是达到一个可控的吞吐量，和ParNew的最大区别是GC自动调节策略；虚拟机会根据系统的运行状态收集性能监控信息，动态设置这些参数，以提供最优停顿时间和最高的吞吐量；")])]),a._v(" "),s("li",[s("p",[a._v("Serial Old:Serial收集器的老年代版本，单线程收集器，使用标记整理算法。")])]),a._v(" "),s("li",[s("p",[a._v("Parallel Old：是Parallel Scavenge收集器的老年代版本，使用多线程，标记-整理算法。")])]),a._v(" "),s("li",[s("p",[a._v("CMS:是一种以获得最短回收停顿时间为目标的收集器，标记清除算法，运作过程：初始标记，并发标记，重新标记，并发清除，收集结束会产生大量空间碎片；")])]),a._v(" "),s("li",[s("p",[a._v("G1:标记整理算法实现，运作流程主要包括以下：初始标记，并发标记，最终标记，筛选回收。不会产生空间碎片，可以精确地控制停顿；G1将整个堆分为大小相等的多个Region（区域），G1跟踪每个区域的垃圾大小，在后台维护一个优先级列表，每次根据允许的收集时间，优先回收价值最大的区域，已达到在有限时间内获取尽可能高的回收效率；")])])]),a._v(" "),s("p",[s("strong",[a._v("垃圾回收器间的配合使用图：")])]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329224424220.png",alt:""}})]),a._v(" "),s("p",[s("strong",[a._v("各个垃圾回收器对比")]),a._v("：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329230618579.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_12-详细说一下cms的回收过程-cms的问题是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-详细说一下cms的回收过程-cms的问题是什么"}},[a._v("#")]),a._v(" 12. 详细说一下CMS的回收过程？CMS的问题是什么？")]),a._v(" "),s("p",[a._v("CMS(Concurrent Mark Sweep，并发标记清除) 收集器是以获取最短回收停顿时间为目标的收集器（追求低停顿），它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。")]),a._v(" "),s("p",[a._v("从名字就可以知道，CMS是基于“标记-清除”算法实现的。CMS 回收过程分为以下四步：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("初始标记 （CMS initial mark)：主要是标记 GC Root 开始的下级（注：仅下一级）对象，这个过程会 STW，但是跟 GC Root 直接关联的下级对象不会很多，因此这个过程其实很快。")])]),a._v(" "),s("li",[s("p",[a._v("并发标记 (CMS concurrent mark)：根据上一步的结果，继续向下标识所有关联的对象，直到这条链上的最尽头。这个过程是多线程的，虽然耗时理论上会比较长，但是其它工作线程并不会阻塞，没有 STW。")])]),a._v(" "),s("li",[s("p",[a._v("重新标记（CMS remark）：顾名思义，就是要再标记一次。为啥还要再标记一次？因为第 2 步并没有阻塞其它工作线程，其它线程在标识过程中，很有可能会产生新的垃圾。")])]),a._v(" "),s("li",[s("p",[a._v("并发清除（CMS concurrent sweep）：清除阶段是清理删除掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发进行的。")])])]),a._v(" "),s("p",[s("strong",[a._v("CMS 的问题：")])]),a._v(" "),s("p",[s("strong",[a._v("1. 并发回收导致CPU资源紧张：")])]),a._v(" "),s("p",[a._v("在并发阶段，它虽然不会导致用户线程停顿，但却会因为占用了一部分线程而导致应用程序变慢，降低程序总吞吐量。CMS默认启动的回收线程数是：（CPU核数 + 3）/ 4，当CPU核数不足四个时，CMS对用户程序的影响就可能变得很大。")]),a._v(" "),s("p",[s("strong",[a._v("2. 无法清理浮动垃圾：")])]),a._v(" "),s("p",[a._v("在CMS的并发标记和并发清理阶段，用户线程还在继续运行，就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留到下一次垃圾收集时再清理掉。这一部分垃圾称为“浮动垃圾”。")]),a._v(" "),s("p",[s("strong",[a._v("3. 并发失败（Concurrent Mode Failure）：")])]),a._v(" "),s("p",[a._v("由于在垃圾回收阶段用户线程还在并发运行，那就还需要预留足够的内存空间提供给用户线程使用，因此CMS不能像其他回收器那样等到老年代几乎完全被填满了再进行回收，必须预留一部分空间供并发回收时的程序运行使用。默认情况下，当老年代使用了 92% 的空间后就会触发 CMS 垃圾回收，这个值可以通过 -XX**😗* CMSInitiatingOccupancyFraction 参数来设置。")]),a._v(" "),s("p",[a._v("这里会有一个风险：要是CMS运行期间预留的内存无法满足程序分配新对象的需要，就会出现一次“并发失败”（Concurrent Mode Failure），这时候虚拟机将不得不启动后备预案：Stop The World，临时启用 Serial Old 来重新进行老年代的垃圾回收，这样一来停顿时间就很长了。")]),a._v(" "),s("p",[s("strong",[a._v("4.内存碎片问题：")])]),a._v(" "),s("p",[a._v("CMS是一款基于“标记-清除”算法实现的回收器，这意味着回收结束时会有内存碎片产生。内存碎片过多时，将会给大对象分配带来麻烦，往往会出现老年代还有很多剩余空间，但就是无法找到足够大的连续空间来分配当前对象，而不得不提前触发一次 Full GC 的情况。")]),a._v(" "),s("p",[a._v("为了解决这个问题，CMS收集器提供了一个 -XX**:"),s("strong",[a._v("+UseCMSCompactAtFullCollection 开关参数（默认开启），用于在 Full GC 时开启内存碎片的合并整理过程，由于这个内存整理必须移动存活对象，是无法并发的，这样停顿时间就会变长。还有另外一个参数 -XX")]),a._v("😗*CMSFullGCsBeforeCompaction，这个参数的作用是要求CMS在执行过若干次不整理空间的 Full GC 之后，下一次进入 Full GC 前会先进行碎片整理（默认值为0，表示每次进入 Full GC 时都进行碎片整理）。")]),a._v(" "),s("h2",{attrs:{id:"_13-详细说一下g1的回收过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-详细说一下g1的回收过程"}},[a._v("#")]),a._v(" 13. 详细说一下G1的回收过程？")]),a._v(" "),s("p",[a._v("G1（Garbage First）回收器采用面向局部收集的设计思路和基于Region的内存布局形式，是一款主要面向服务端应用的垃圾回收器。G1设计初衷就是替换 CMS，成为一种全功能收集器。G1 在JDK9 之后成为服务端模式下的默认垃圾回收器，取代了 Parallel Scavenge 加 Parallel Old 的默认组合，而 CMS 被声明为不推荐使用的垃圾回收器。G1从整体来看是基于 标记-整理 算法实现的回收器，但从局部（两个Region之间）上看又是基于 标记-复制 算法实现的。")]),a._v(" "),s("p",[s("strong",[a._v("G1 回收过程")]),a._v("，G1 回收器的运作过程大致可分为四个步骤：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("初始标记（会STW）：仅仅只是标记一下 GC Roots 能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。")])]),a._v(" "),s("li",[s("p",[a._v("并发标记：从 GC Roots 开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理在并发时有引用变动的对象。")])]),a._v(" "),s("li",[s("p",[a._v("最终标记（会STW）：对用户线程做短暂的暂停，处理并发阶段结束后仍有引用变动的对象。")])]),a._v(" "),s("li",[s("p",[a._v("清理阶段（会STW）：更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，必须暂停用户线程，由多条回收器线程并行完成的。")])])]),a._v(" "),s("h2",{attrs:{id:"_14-jvm中一次完整的gc是什么样子的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-jvm中一次完整的gc是什么样子的"}},[a._v("#")]),a._v(" 14.  JVM中一次完整的GC是什么样子的？")]),a._v(" "),s("p",[a._v("先描述一下Java堆内存划分。")]),a._v(" "),s("p",[a._v("在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )，新生代默认占总空间的 1/3，老年代默认占 2/3。\n新生代有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1。")]),a._v(" "),s("p",[a._v("新生代的垃圾回收（又称Minor GC）后只有少量对象存活，所以选用复制算法，只需要少量的复制成本就可以完成回收。")]),a._v(" "),s("p",[a._v("老年代的垃圾回收（又称Major GC）通常使用“标记-清理”或“标记-整理”算法。")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329225348086.png",alt:""}})]),a._v(" "),s("p",[a._v("再描述它们之间转化流程：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("对象优先在Eden分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。")]),a._v(" "),s("ul",[s("li",[a._v("在 Eden 区执行了第一次 GC 之后，存活的对象会被移动到其中一个 Survivor 分区；")])]),a._v(" "),s("ul",[s("li",[a._v("Eden 区再次 GC，这时会采用复制算法，将 Eden 和 from 区一起清理，存活的对象会被复制到 to 区；")]),a._v(" "),s("li",[a._v("移动一次，对象年龄加 1，对象年龄大于一定阀值会直接移动到老年代。GC年龄的阀值可以通过参数 -XX:MaxTenuringThreshold 设置，默认为 15；")]),a._v(" "),s("li",[a._v("动态对象年龄判定：Survivor 区相同年龄所有对象大小的总和 > (Survivor 区内存大小 * 这个目标使用率)时，大于或等于该年龄的对象直接进入老年代。其中这个使用率通过 -XX:TargetSurvivorRatio 指定，默认为 50%；")]),a._v(" "),s("li",[a._v("Survivor 区内存不足会发生担保分配，超过指定大小的对象可以直接进入老年代。")])])]),a._v(" "),s("li",[s("p",[a._v("大对象直接进入老年代，大对象就是需要大量连续内存空间的对象（比如：字符串、数组），为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。")])]),a._v(" "),s("li",[s("p",[a._v("老年代满了而"),s("strong",[a._v("无法容纳更多的对象")]),a._v("，Minor GC 之后通常就会进行Full GC，Full GC 清理整个内存堆 – "),s("strong",[a._v("包括年轻代和老年代")]),a._v("。")])])]),a._v(" "),s("h2",{attrs:{id:"_15-minor-gc-和-full-gc-有什么不同呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-minor-gc-和-full-gc-有什么不同呢"}},[a._v("#")]),a._v(" 15. Minor GC 和 Full GC 有什么不同呢？")]),a._v(" "),s("p",[a._v("Minor GC：只收集新生代的GC。")]),a._v(" "),s("p",[a._v("Full GC: 收集整个堆，包括 新生代，老年代，永久代(在 JDK 1.8及以后，永久代被移除，换为metaspace 元空间)等所有部分的模式。")]),a._v(" "),s("p",[a._v("**Minor GC触发条件：**当Eden区满时，触发Minor GC。")]),a._v(" "),s("p",[s("strong",[a._v("Full GC触发条件")]),a._v("：")]),a._v(" "),s("ul",[s("li",[a._v("通过Minor GC后进入老年代的平均大小大于老年代的可用内存。如果发现统计数据说之前Minor GC的平均晋升大小比目前old gen剩余的空间大，则不会触发Minor GC而是转为触发full GC。")]),a._v(" "),s("li",[a._v("老年代空间不够分配新的内存（或永久代空间不足，但只是JDK1.7有的，这也是用元空间来取代永久代的原因，可以减少Full GC的频率，减少GC负担，提升其效率）。")]),a._v(" "),s("li",[a._v("由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。")]),a._v(" "),s("li",[a._v("调用System.gc时，系统建议执行Full GC，但是不必然执行。")])]),a._v(" "),s("h2",{attrs:{id:"_16-介绍下空间分配担保原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-介绍下空间分配担保原则"}},[a._v("#")]),a._v(" 16. 介绍下空间分配担保原则？")]),a._v(" "),s("p",[a._v("如果YougGC时新生代有大量对象存活下来，而 survivor 区放不下了，这时必须转移到老年代中，但这时发现老年代也放不下这些对象了，那怎么处理呢？其实JVM有一个老年代空间分配担保机制来保证对象能够进入老年代。")]),a._v(" "),s("p",[a._v("在执行每次 YoungGC 之前，JVM会先检查老年代最大可用连续空间是否大于新生代所有对象的总大小。因为在极端情况下，可能新生代 YoungGC 后，所有对象都存活下来了，而 survivor 区又放不下，那可能所有对象都要进入老年代了。这个时候如果老年代的可用连续空间是大于新生代所有对象的总大小的，那就可以放心进行 YoungGC。但如果老年代的内存大小是小于新生代对象总大小的，那就有可能老年代空间不够放入新生代所有存活对象，这个时候JVM就会先检查 -XX:HandlePromotionFailure 参数是否允许担保失败，如果允许，就会判断老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次YoungGC，尽快这次YoungGC是有风险的。如果小于，或者 -XX:HandlePromotionFailure 参数不允许担保失败，这时就会进行一次 Full GC。")]),a._v(" "),s("p",[a._v("在允许担保失败并尝试进行YoungGC后，可能会出现三种情况：")]),a._v(" "),s("ul",[s("li",[a._v("① YoungGC后，存活对象小于survivor大小，此时存活对象进入survivor区中")]),a._v(" "),s("li",[a._v("② YoungGC后，存活对象大于survivor大小，但是小于老年大可用空间大小，此时直接进入老年代。")]),a._v(" "),s("li",[a._v("③ YoungGC后，存活对象大于survivor大小，也大于老年大可用空间大小，老年代也放不下这些对象了，此时就会发生“Handle Promotion Failure”，就触发了 Full GC。如果 Full GC后，老年代还是没有足够的空间，此时就会发生OOM内存溢出了。")])]),a._v(" "),s("p",[a._v("通过下图来了解空间分配担保原则：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329230240201.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_17-什么是类加载-类加载的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-什么是类加载-类加载的过程"}},[a._v("#")]),a._v(" 17. 什么是类加载？类加载的过程？")]),a._v(" "),s("p",[a._v("虚拟机把描述类的数据加载到内存里面，并对数据进行校验、解析和初始化，最终变成可以被虚拟机直接使用的class对象；")]),a._v(" "),s("p",[a._v("类的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7个阶段。其中准备、验证、解析3个部分统称为连接（Linking）。如图所示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329231258940.png",alt:"image-20210329231258940"}})]),a._v(" "),s("p",[a._v("加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）")]),a._v(" "),s("p",[a._v("类加载过程如下：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("加载，加载分为三步：\n1、通过类的全限定性类名获取该类的二进制流；\n2、将该二进制流的静态存储结构转为方法区的运行时数据结构；\n3、在堆中为该类生成一个class对象；")])]),a._v(" "),s("li",[s("p",[a._v("验证：验证该class文件中的字节流信息复合虚拟机的要求，不会威胁到jvm的安全；")])]),a._v(" "),s("li",[s("p",[a._v("准备：为class对象的静态变量分配内存，初始化其初始值；")])]),a._v(" "),s("li",[s("p",[a._v("解析：该阶段主要完成符号引用转化成直接引用；")])]),a._v(" "),s("li",[s("p",[a._v("初始化：到了初始化阶段，才开始执行类中定义的java代码；初始化阶段是调用类构造器的过程；")])])]),a._v(" "),s("h2",{attrs:{id:"_18-什么是类加载器-常见的类加载器有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是类加载器-常见的类加载器有哪些"}},[a._v("#")]),a._v(" 18. 什么是类加载器，常见的类加载器有哪些？")]),a._v(" "),s("p",[a._v("类加载器是指：通过一个类的全限定性类名获取该类的二进制字节流叫做类加载器；类加载器分为以下四种：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("启动类加载器（BootStrapClassLoader）：用来加载java核心类库，无法被java程序直接引用；")])]),a._v(" "),s("li",[s("p",[a._v("扩展类加载器（Extension ClassLoader）：用来加载java的扩展库，java的虚拟机实现会提供一个扩展库目录，该类加载器在扩展库目录里面查找并加载java类；")])]),a._v(" "),s("li",[s("p",[a._v("系统类加载器（AppClassLoader）：它根据java的类路径来加载类，一般来说，java应用的类都是通过它来加载的；")])]),a._v(" "),s("li",[s("p",[a._v("自定义类加载器：由java语言实现，继承自ClassLoader；")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329231439914.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_19-什么是双亲委派模型-为什么需要双亲委派模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-什么是双亲委派模型-为什么需要双亲委派模型"}},[a._v("#")]),a._v(" 19. 什么是双亲委派模型？为什么需要双亲委派模型？")]),a._v(" "),s("p",[a._v("当一个类加载器收到一个类加载的请求，他首先不会尝试自己去加载，而是将这个请求委派给父类加载器去加载，只有父类加载器在自己的搜索范围类查找不到给类时，子加载器才会尝试自己去加载该类；")]),a._v(" "),s("p",[a._v("为了防止内存中出现多个相同的字节码；因为如果没有双亲委派的话，用户就可以自己定义一个java.lang.String类，那么就无法保证类的唯一性。")]),a._v(" "),s("p",[a._v("补充："),s("strong",[a._v("那怎么打破双亲委派模型")]),a._v("？")]),a._v(" "),s("p",[a._v("自定义类加载器，继承ClassLoader类，重写loadClass方法和findClass方法。")]),a._v(" "),s("h2",{attrs:{id:"_20-列举一些你知道的打破双亲委派机制的例子-为什么要打破"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-列举一些你知道的打破双亲委派机制的例子-为什么要打破"}},[a._v("#")]),a._v(" 20. 列举一些你知道的打破双亲委派机制的例子，为什么要打破？")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("JNDI 通过引入线程上下文类加载器，可以在 Thread.setContextClassLoader 方法设置，默认是应用程序类加载器，来加载 SPI 的代码。有了线程上下文类加载器，就可以完成父类加载器请求子类加载器完成类加载的行为。打破的原因，是为了 JNDI 服务的类加载器是启动器类加载，为了完成高级类加载器请求子类加载器（即上文中的线程上下文加载器）加载类。")])]),a._v(" "),s("li",[s("p",[a._v("Tomcat，应用的类加载器优先自行加载应用目录下的 class，并不是先委派给父加载器，加载不了才委派给父加载器。")]),a._v(" "),s("p",[a._v("tomcat之所以造了一堆自己的classloader，大致是出于下面三类目的：")]),a._v(" "),s("ul",[s("li",[a._v("对于各个 "),s("code",[a._v("webapp")]),a._v("中的 "),s("code",[a._v("class")]),a._v("和 "),s("code",[a._v("lib")]),a._v("，需要相互隔离，不能出现一个应用中加载的类库会影响另一个应用的情况，而对于许多应用，需要有共享的lib以便不浪费资源。")]),a._v(" "),s("li",[a._v("与 "),s("code",[a._v("jvm")]),a._v("一样的安全性问题。使用单独的 "),s("code",[a._v("classloader")]),a._v("去装载 "),s("code",[a._v("tomcat")]),a._v("自身的类库，以免其他恶意或无意的破坏；")]),a._v(" "),s("li",[a._v("热部署。")])]),a._v(" "),s("p",[a._v("tomcat类加载器如下图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://blog-img.coolsen.cn/img/image-20210329231930719.png",alt:""}})])]),a._v(" "),s("li",[s("p",[a._v("OSGi，实现模块化热部署，为每个模块都自定义了类加载器，需要更换模块时，模块与类加载器一起更换。其类加载的过程中，有平级的类加载器加载行为。打破的原因是为了实现模块热替换。")])]),a._v(" "),s("li",[s("p",[a._v("JDK 9，Extension ClassLoader 被 Platform ClassLoader 取代，当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载。打破的原因，是为了添加模块化的特性。")])])]),a._v(" "),s("h2",{attrs:{id:"_21-说一下-jvm-调优的命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-说一下-jvm-调优的命令"}},[a._v("#")]),a._v(" 21. 说一下 JVM 调优的命令？")]),a._v(" "),s("ul",[s("li",[a._v("jps：JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。")]),a._v(" "),s("li",[a._v("jstat：jstat(JVM statistics Monitoring)是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。")]),a._v(" "),s("li",[a._v("jmap：jmap(JVM Memory Map)命令用于生成heap dump文件，如果不使用这个命令，还阔以使用-XX:+HeapDumpOnOutOfMemoryError参数来让虚拟机出现OOM的时候·自动生成dump文件。\njmap不仅能生成dump文件，还阔以查询finalize执行队列、Java堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。")]),a._v(" "),s("li",[a._v("jhat：jhat(JVM Heap Analysis Tool)命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看。在此要注意，一般不会直接在服务器上进行分析，因为jhat是一个耗时并且耗费硬件资源的过程，一般把服务器生成的dump文件复制到本地或其他机器上进行分析。")]),a._v(" "),s("li",[a._v("jstack：jstack用于生成java虚拟机当前时刻的线程快照。jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。")])]),a._v(" "),s("h2",{attrs:{id:"_22-java对象创建过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-java对象创建过程"}},[a._v("#")]),a._v(" 22. Java对象创建过程")]),a._v(" "),s("ol",[s("li",[a._v("JVM遇到一条新建对象的指令时首先去检查这个指令的参数是否能在常量池中定义到一个类的符号引用。然后加载这个类（类加载过程在后边讲）")]),a._v(" "),s("li",[a._v("为对象分配内存。一种办法“指针碰撞”、一种办法“空闲列表”，最终常用的办法“本地线程缓冲分配(TLAB)”")]),a._v(" "),s("li",[a._v("将除对象头外的对象内存空间初始化为0")]),a._v(" "),s("li",[a._v("对对象头进行必要设置")])]),a._v(" "),s("h2",{attrs:{id:"_23-jdk新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-jdk新特性"}},[a._v("#")]),a._v(" 23. JDK新特性")]),a._v(" "),s("p",[s("strong",[a._v("JDK8")])]),a._v(" "),s("p",[a._v("支持 Lamda 表达式、集合的 stream 操作、提升HashMap性能")]),a._v(" "),s("p",[s("strong",[a._v("JDK9")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Stream API中iterate方法的新重载方法，可以指定什么时候结束迭代")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IntStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("iterate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("默认G1垃圾回收器")]),a._v(" "),s("p",[s("strong",[a._v("JDK10")])]),a._v(" "),s("p",[a._v("其重点在于通过完全GC并行来改善G1最坏情况的等待时间。")]),a._v(" "),s("p",[s("strong",[a._v("JDK11")])]),a._v(" "),s("p",[a._v("ZGC (并发回收的策略) 4TB")]),a._v(" "),s("p",[a._v("用于 Lambda 参数的局部变量语法")]),a._v(" "),s("p",[s("strong",[a._v("JDK12")])]),a._v(" "),s("p",[a._v("Shenandoah GC (GC 算法)停顿时间和堆的大小没有任何关系，并行关注停顿响应时间。")]),a._v(" "),s("p",[s("strong",[a._v("JDK13")])]),a._v(" "),s("p",[a._v("增加ZGC以将未使用的堆内存返回给操作系统，16TB")]),a._v(" "),s("p",[s("strong",[a._v("JDK14")])]),a._v(" "),s("p",[a._v("删除cms垃圾回收器、弃用ParallelScavenge+SerialOldGC垃圾回收算法组合")]),a._v(" "),s("p",[a._v("将ZGC垃圾回收器应用到macOS和windows平台")]),a._v(" "),s("h1",{attrs:{id:"线上故障排查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线上故障排查"}},[a._v("#")]),a._v(" 线上故障排查")]),a._v(" "),s("h2",{attrs:{id:"_1、硬件故障排查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、硬件故障排查"}},[a._v("#")]),a._v(" 1、硬件故障排查")]),a._v(" "),s("p",[a._v("如果一个实例发生了问题，根据情况选择，要不要着急去重启。如果出现的CPU、内存飙高或者日志里出现了OOM异常")]),a._v(" "),s("p",[s("strong",[a._v("第一步是隔离")]),a._v("，第二步是"),s("strong",[a._v("保留现场")]),a._v("，第三步才是"),s("strong",[a._v("问题排查")]),a._v("。")]),a._v(" "),s("p",[s("strong",[a._v("隔离")])]),a._v(" "),s("p",[a._v("就是把你的这台机器从请求列表里摘除，比如把 nginx 相关的权重设成零。")]),a._v(" "),s("p",[s("strong",[a._v("现场保留")])]),a._v(" "),s("p",[s("strong",[a._v("瞬时态和历史态")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEly1gobnwy22d2j30l10cpt9d.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("查看比如 CPU、系统内存等，通过历史状态可以体现一个趋势性问题，而这些信息的获取一般依靠监控系统的协作。")]),a._v(" "),s("p",[s("strong",[a._v("保留信息")])]),a._v(" "),s("p",[a._v("（1）"),s("strong",[a._v("系统当前网络连接")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ss -antp > $DUMP_DIR/ss.dump 2>&1\n")])])]),s("p",[a._v("使用 ss 命令而不是 netstat 的原因，是因为 netstat 在网络连接非常多的情况下，执行非常缓慢。")]),a._v(" "),s("p",[a._v("后续的处理，可通过查看各种网络连接状态的梳理，来排查 TIME_WAIT 或者 CLOSE_WAIT，或者其他连接过高的问题，非常有用。")]),a._v(" "),s("p",[a._v("（2）"),s("strong",[a._v("网络状态统计")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("netstat "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("netstat"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("它能够按照各个协议进行统计输出，对把握当时整个网络状态，有非常大的作用。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("sar "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("n "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DEV")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("sar"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("traffic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("在一些速度非常高的模块上，比如 Redis、Kafka，就经常发生跑满网卡的情况。表现形式就是网络通信非常缓慢。")]),a._v(" "),s("p",[a._v("（3）"),s("strong",[a._v("进程资源")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("lsof "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("p $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("lsof"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("$"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump\n")])])]),s("p",[a._v("通过查看进程，能看到打开了哪些文件，可以以进程的维度来查看整个资源的使用情况，包括每条网络连接、每个打开的文件句柄。同时，也可以很容易的看到连接到了哪些服务器、使用了哪些资源。这个命令在资源非常多的情况下，输出稍慢，请耐心等待。")]),a._v(" "),s("p",[a._v("（4）"),s("strong",[a._v("CPU 资源")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mpstat > $DUMP_DIR/mpstat.dump 2>&1\nvmstat 1 3 > $DUMP_DIR/vmstat.dump 2>&1\nsar -p ALL  > $DUMP_DIR/sar-cpu.dump  2>&1\nuptime > $DUMP_DIR/uptime.dump 2>&1\n")])])]),s("p",[a._v("主要用于输出当前系统的 CPU 和负载，便于事后排查。")]),a._v(" "),s("p",[a._v("（5）"),s("strong",[a._v("I/O 资源")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("iostat "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("iostat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("一般，以计算为主的服务节点，I/O 资源会比较正常，但有时也会发生问题，比如"),s("strong",[a._v("日志输出过多，或者磁盘问题")]),a._v("等。此命令可以输出每块磁盘的基本性能信息，用来排查 I/O 问题。在第 8 课时介绍的 GC 日志分磁盘问题，就可以使用这个命令去发现。")]),a._v(" "),s("p",[a._v("（6）"),s("strong",[a._v("内存问题")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("free "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("free"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("free 命令能够大体展现操作系统的内存概况，这是故障排查中一个非常重要的点，比如 SWAP 影响了 GC，SLAB 区挤占了 JVM 的内存。")]),a._v(" "),s("p",[a._v("（7）"),s("strong",[a._v("其他全局")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("ps "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("ef "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("ps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\ndmesg "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dmesg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\nsysctl "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("sysctl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("dmesg 是许多静悄悄死掉的服务留下的最后一点线索。当然，ps 作为执行频率最高的一个命令，由于内核的配置参数，会对系统和 JVM 产生影响，所以我们也输出了一份。")]),a._v(" "),s("p",[a._v("（8）"),s("strong",[a._v("进程快照")]),a._v("，最后的遗言（jinfo）")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jinfo $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jinfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("此命令将输出 Java 的基本进程信息，包括"),s("strong",[a._v("环境变量和参数配置")]),a._v("，可以查看是否因为一些错误的配置造成了 JVM 问题。")]),a._v(" "),s("p",[s("strong",[a._v("（9）dump 堆信息")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jstat "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("gcutil $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jstat"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("gcutil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jstat "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("gccapacity $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jstat"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("gccapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("jstat 将输出当前的 gc 信息。一般，基本能大体看出一个端倪，如果不能，可将借助 jmap 来进行分析。")]),a._v(" "),s("p",[s("strong",[a._v("（10）堆信息")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jmap $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jmap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jmap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("heap $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jmap"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("heap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jmap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("histo $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jmap"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("histo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jmap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("dump"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("format"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("$"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("heap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("bin $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("dev"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("jmap 将会得到当前 Java 进程的 dump 信息。如上所示，其实最有用的就是第 4 个命令，但是前面三个能够让你初步对系统概况进行大体判断。因为，第 4 个命令产生的文件，一般都非常的大。而且，需要下载下来，导入 MAT 这样的工具进行深入分析，才能获取结果。这是分析内存泄漏一个必经的过程。")]),a._v(" "),s("p",[s("strong",[a._v("（11）JVM 执行栈")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jstack $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("jstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("jstack 将会获取当时的执行栈。一般会多次取值，我们这里取一次即可。这些信息非常有用，能够还原 Java 进程中的线程情况。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("top "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hp")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("n "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("top"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("$"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("dump "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n")])])]),s("p",[a._v("为了能够得到更加精细的信息，我们使用 top 命令，来获取进程中所有线程的 CPU 信息，这样，就可以看到资源到底耗费在什么地方了。")]),a._v(" "),s("p",[s("strong",[a._v("（12）高级替补")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("kill "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v("\n")])])]),s("p",[a._v("有时候，jstack 并不能够运行，有很多原因，比如 Java 进程几乎不响应了等之类的情况。我们会尝试向进程发送 kill -3 信号，这个信号将会打印 jstack 的 trace 信息到日志文件中，是 jstack 的一个替补方案。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("gcore "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("o $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("core $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PID")]),a._v("\n")])])]),s("p",[a._v("对于 jmap 无法执行的问题，也有替补，那就是 GDB 组件中的 gcore，将会生成一个 core 文件。我们可以使用如下的命令去生成 dump：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK_BIN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("jhsdb jmap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("exe $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("JDK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("java  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("core $"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DUMP_DIR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("core "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("binaryheap\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("strong",[a._v("内存泄漏的现象")])])]),a._v(" "),s("p",[a._v("稍微提一下 jmap 命令，它在 9 版本里被干掉了，取而代之的是 jhsdb，你可以像下面的命令一样使用。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("jhsdb jmap  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("heap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("pid  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("37340")]),a._v("\njhsdb jmap  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("pid  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("37288")]),a._v("\njhsdb jmap  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("histo "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("pid  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("37340")]),a._v("\njhsdb jmap  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("binaryheap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("pid  "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("37340")]),a._v("\n")])])]),s("p",[a._v("一般内存溢出，表现形式就是 Old 区的占用持续上升，即使经过了多轮 GC 也没有明显改善。比如ThreadLocal里面的GC Roots，内存泄漏的根本就是，这些对象并没有切断和 GC Roots 的关系，可通过一些工具，能够看到它们的联系。")]),a._v(" "),s("h2",{attrs:{id:"_2、报表异常-jvm调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、报表异常-jvm调优"}},[a._v("#")]),a._v(" 2、报表异常 | JVM调优")]),a._v(" "),s("p",[a._v("有一个报表系统，频繁发生内存溢出，在高峰期间使用时，还会频繁的发生拒绝服务，由于大多数使用者是管理员角色，所以很快就反馈到研发这里。")]),a._v(" "),s("p",[a._v("业务场景是由于有些结果集的字段不是太全，因此需要对结果集合进行循环，并通过 HttpClient 调用其他服务的接口进行数据填充。使用 Guava 做了 JVM 内缓存，但是响应时间依然很长。")]),a._v(" "),s("p",[a._v("初步排查，JVM 的资源太少。接口 A 每次进行报表计算时，都要涉及几百兆的内存，而且在内存里驻留很长时间，有些计算又非常耗 CPU，特别的“吃”资源。而我们分配给 JVM 的内存只有 3 GB，在多人访问这些接口的时候，内存就不够用了，进而发生了 OOM。在这种情况下，没办法，只有升级机器。把机器配置升级到 4C8G，给 JVM 分配 6GB 的内存，这样 OOM 问题就消失了。但随之而来的是频繁的 GC 问题和超长的 GC 时间，平均 GC 时间竟然有 5 秒多。")]),a._v(" "),s("p",[a._v("进一步，由于报表系统和高并发系统不太一样，它的对象，存活时长大得多，并不能仅仅通过增加年轻代来解决；而且，如果增加了年轻代，那么必然减少了老年代的大小，由于 CMS 的碎片和浮动垃圾问题，我们可用的空间就更少了。虽然服务能够满足目前的需求，但还有一些不太确定的风险。")]),a._v(" "),s("p",[a._v("第一，了解到程序中有很多缓存数据和静态统计数据，为了减少 MinorGC 的次数，通过分析 GC 日志打印的对象年龄分布，把 MaxTenuringThreshold 参数调整到了 3（特殊场景特殊的配置）。这个参数是让年轻代的这些对象，赶紧回到老年代去，不要老呆在年轻代里。")]),a._v(" "),s("p",[a._v("第二，我们的 GC 时间比较长，就一块开了参数 CMSScavengeBeforeRemark，使得在 CMS remark 前，先执行一次 Minor GC 将新生代清掉。同时配合上个参数，其效果还是比较好的，一方面，对象很快晋升到了老年代，另一方面，年轻代的对象在这种情况下是有限的，在整个 MajorGC 中占的时间也有限。")]),a._v(" "),s("p",[a._v("第三，由于缓存的使用，有大量的弱引用，拿一次长达 10 秒的 GC 来说。我们发现在 GC 日志里，处理 weak refs 的时间较长，达到了 4.5 秒。这里可以加入参数 ParallelRefProcEnabled 来并行处理Reference，以加快处理速度，缩短耗时。")]),a._v(" "),s("p",[a._v("优化之后，效果不错，但并不是特别明显。经过评估，针对高峰时期的情况进行调研，我们决定再次提升机器性能，改用 8core16g 的机器。但是，这带来另外一个问题。")]),a._v(" "),s("p",[s("strong",[a._v("高性能的机器带来了非常大的服务吞吐量")]),a._v("，通过 jstat 进行监控，能够看到年轻代的分配速率明显提高，但随之而来的 MinorGC 时长却变的不可控，有时候会超过 1 秒。累积的请求造成了更加严重的后果。")]),a._v(" "),s("p",[a._v("这是由于堆空间明显加大造成的回收时间加长。为了获取较小的停顿时间，我们在堆上"),s("strong",[a._v("改用了 G1 垃圾回收器")]),a._v("，把它的目标设定在 200ms。G1 是一款非常优秀的垃圾收集器，不仅适合堆内存大的应用，同时也简化了调优的工作。通过主要的参数初始和最大堆空间、以及最大容忍的 GC 暂停目标，就能得到不错的性能。修改之后，虽然 GC 更加频繁了一些，但是停顿时间都比较小，应用的运行较为平滑。")]),a._v(" "),s("p",[a._v("到目前为止，也只是勉强顶住了已有的业务，但是，这时候领导层面又发力，"),s("strong",[a._v("要求报表系统可以支持未来两年业务10到100倍的增长")]),a._v("，并保持其可用性，但是这个“千疮百孔”的报表系统，稍微一压测，就宕机，那如何应对十倍百倍的压力呢 ? 硬件即使可以做到动态扩容，但是毕竟也有极限。")]),a._v(" "),s("p",[a._v("使用 MAT 分析堆快照，发现很多地方可以通过代码优化，那些占用内存特别多的对象：")]),a._v(" "),s("p",[a._v("1、select * 全量排查，只允许获取必须的数据")]),a._v(" "),s("p",[a._v("2、报表系统中cache实际的命中率并不高，将Guava 的 Cache 引用级别改成弱引用（WeakKeys）")]),a._v(" "),s("p",[a._v("3、限制报表导入文件大小，同时拆分用户超大范围查询导出请求。")]),a._v(" "),s("p",[a._v("每一步操作都使得JVM使用变得更加可用，一系列优化以后，机器相同压测数据性能提升了数倍。")]),a._v(" "),s("h2",{attrs:{id:"_3、大屏异常-juc调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、大屏异常-juc调优"}},[a._v("#")]),a._v(" 3、大屏异常 | JUC调优")]),a._v(" "),s("p",[a._v("有些数据需要使用 HttpClient 来获取进行补全。提供数据的服务提供商有的响应时间可能会很长，也有可能会造成服务整体的阻塞。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008eGmZEly1gobr4whjzwj30l1058dfx.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("接口 A 通过 HttpClient 访问服务 2，响应 100ms 后返回；接口 B 访问服务 3，耗时 2 秒。HttpClient 本身是有一个最大连接数限制的，如果服务 3 迟迟不返回，就会造成 HttpClient 的连接数达到上限，"),s("strong",[a._v("概括来讲，就是同一服务，由于一个耗时非常长的接口，进而引起了整体的服务不可用")])]),a._v(" "),s("p",[a._v("这个时候，通过 jstack 打印栈信息，会发现大多数竟然阻塞在了接口 A 上，而不是耗时更长的接口 B，这个现象起初十分具有迷惑性，不过经过分析后，我们猜想其实是因为接口 A 的速度比较快，在问题发生点进入了更多的请求，它们全部都阻塞住的同时被打印出来了。")]),a._v(" "),s("p",[a._v("为了验证这个问题，我搭建了一个demo 工程，模拟了两个使用同一个 HttpClient 的接口。fast 接口用来访问百度，很快就能返回；slow 接口访问谷歌，由于众所周知的原因，会阻塞直到超时，大约 10 s。 利用ab对两个接口进行压测，同时使用 jstack 工具 dump 堆栈。首先使用 jps 命令找到进程号，然后把结果重定向到文件（可以参考 10271.jstack 文件）。")]),a._v(" "),s("p",[a._v("过滤一下 nio 关键字，可以查看 tomcat 相关的线程，足足有 200 个，这和 Spring Boot 默认的 maxThreads 个数不谋而合。更要命的是，有大多数线程，都处于 BLOCKED 状态，说明线程等待资源超时。通过grep fast | wc -l 分析，确实200个中有150个都是blocked的fast的进程。")]),a._v(" "),s("p",[a._v("问题找到了，解决方式就顺利成章了。")]),a._v(" "),s("p",[a._v("1、fast和slow争抢连接资源，通过线程池限流或者熔断处理")]),a._v(" "),s("p",[a._v("2、有时候slow的线程也不是一直slow，所以就得加入监控")]),a._v(" "),s("p",[a._v("3、使用带countdownLaunch对线程的执行顺序逻辑进行控制")]),a._v(" "),s("h2",{attrs:{id:"_4、接口延迟-swap调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、接口延迟-swap调优"}},[a._v("#")]),a._v(" "),s("strong",[a._v("4、接口延迟 | SWAP调优")])]),a._v(" "),s("p",[a._v("有一个关于服务的某个实例，经常发生服务卡顿。由于服务的并发量是比较高的，每多停顿 1 秒钟，几万用户的请求就会感到延迟。")]),a._v(" "),s("p",[a._v("我们统计、类比了此服务其他实例的 CPU、内存、网络、I/O 资源，区别并不是很大，所以一度怀疑是机器硬件的问题。")]),a._v(" "),s("p",[a._v("接下来我们对比了节点的 GC 日志，发现无论是 Minor GC，还是 Major GC，这个节点所花费的时间，都比其他实例长得多。")]),a._v(" "),s("p",[a._v("通过仔细观察，我们发现在 GC 发生的时候，vmstat 的 si、so 飙升的非常严重，这和其他实例有着明显的不同。")]),a._v(" "),s("p",[a._v("使用 free 命令再次确认，发现 SWAP 分区，使用的比例非常高，引起的具体原因是什么呢？")]),a._v(" "),s("p",[a._v("更详细的操作系统内存分布，从 /proc/meminfo 文件中可以看到具体的逻辑内存块大小，有多达 40 项的内存信息，这些信息都可以通过遍历 /proc 目录的一些文件获取。我们注意到 slabtop 命令显示的有一些异常，dentry（目录高速缓冲）占用非常高。")]),a._v(" "),s("p",[a._v("问题最终定位到是由于某个运维工程师删除日志时，定时执行了一句命令：")]),a._v(" "),s("p",[a._v('find / | grep "xxx.log"')]),a._v(" "),s("p",[a._v("他是想找一个叫做 要被删除 的日志文件，看看在哪台服务器上，结果，这些老服务器由于文件太多，扫描后这些文件信息都缓存到了 slab 区上。而服务器开了 swap，操作系统发现物理内存占满后，并没有立即释放 cache，导致每次 GC 都要和硬盘打一次交道。")]),a._v(" "),s("p",[s("strong",[a._v("解决方式就是关闭 SWAP 分区。")])]),a._v(" "),s("p",[a._v("swap 是很多性能场景的万恶之源，建议禁用。在高并发 SWAP 绝对能让你体验到它魔鬼性的一面：进程倒是死不了了，但 GC 时间长的却让人无法忍受。")]),a._v(" "),s("h2",{attrs:{id:"_5、内存溢出-cache调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、内存溢出-cache调优"}},[a._v("#")]),a._v(" 5、"),s("strong",[a._v("内存溢出 | Cache调优")])]),a._v(" "),s("blockquote",[s("p",[a._v("有一次线上遇到故障，重新启动后，使用 jstat 命令，发现 Old 区一直在增长。我使用 jmap 命令，导出了一份线上堆栈，然后使用 MAT 进行分析，通过对 GC Roots 的分析，发现了一个非常大的 HashMap 对象，这个原本是其他同事做缓存用的，但是做了一个无界缓存，没有设置超时时间或者 LRU 策略，在使用上又没有重写key类对象的hashcode和equals方法，对象无法取出也直接造成了堆内存占用一直上升，后来，将这个缓存改成 guava 的 Cache，并设置了弱引用，故障就消失了。")]),a._v(" "),s("p",[a._v("关于文件处理器的应用，在读取或者写入一些文件之后，由于发生了一些异常，"),s("strong",[a._v("close 方法又没有放在 finally")]),a._v(" 块里面，造成了文件句柄的泄漏。由于文件处理十分频繁，产生了严重的内存泄漏问题。")])]),a._v(" "),s("p",[a._v("内存溢出是一个结果，而"),s("strong",[a._v("内存泄漏")]),a._v("是一个原因。内存溢出的原因有"),s("strong",[a._v("内存空间不足、配置错误")]),a._v("等因素。一些错误的编程方式，不再被使用的对象、没有被回收、没有及时切断与 GC Roots 的联系，这就是内存泄漏。")]),a._v(" "),s("p",[a._v("举个例子，有团队使用了 HashMap 做缓存，但是并没有设置超时时间或者 LRU 策略，造成了放入 Map 对象的数据越来越多，而产生了内存泄漏。")]),a._v(" "),s("p",[a._v("再来看一个经常发生的内存泄漏的例子，也是由于 HashMap 产生的。代码如下，由于没有重写 Key 类的 hashCode 和 equals 方法，造成了放入 HashMap 的所有对象都无法被取出来，它们和外界失联了。所以下面的代码结果是 null。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//leak example")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMapLeakDemo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Key")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("title "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" map "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" integer "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("即使提供了 equals 方法和 hashCode 方法，也要非常小心，尽量避免使用自定义的对象作为 Key。")]),a._v(" "),s("p",[a._v("再看一个例子，关于文件处理器的应用，在读取或者写入一些文件之后，由于发生了一些异常，"),s("strong",[a._v("close 方法又没有放在 finally")]),a._v(" 块里面，造成了文件句柄的泄漏。由于文件处理十分频繁，产生了严重的内存泄漏问题。")]),a._v(" "),s("h2",{attrs:{id:"_6、cpu飙高-死循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、cpu飙高-死循环"}},[a._v("#")]),a._v(" 6、CPU飙高 | 死循环")]),a._v(" "),s("p",[a._v("我们有个线上应用，单节点在运行一段时间后，CPU 的使用会飙升，一旦飙升，一般怀疑某个业务逻辑的计算量太大，或者是触发了死循环（比如著名的 HashMap 高并发引起的死循环），但排查到最后其实是 GC 的问题。")]),a._v(" "),s("p",[a._v("（1）使用 top 命令，查找到使用 CPU 最多的某个进程，记录它的 pid。使用 Shift + P 快捷键可以按 CPU 的使用率进行排序。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("top\n")])])]),s("p",[a._v("（2）再次使用 top 命令，加 -H 参数，查看某个进程中使用 CPU 最多的某个线程，记录线程的 ID。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("top "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hp")]),a._v(" $pid\n")])])]),s("p",[a._v("（3）使用 printf 函数，将十进制的 tid 转化成十六进制。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("printf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v("x $tid\n")])])]),s("p",[a._v("（4）使用 jstack 命令，查看 Java 进程的线程栈。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("jstack $pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("$pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("log\n")])])]),s("p",[a._v("（5）使用 less 命令查看生成的文件，并查找刚才转化的十六进制 tid，找到发生问题的线程上下文。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("less $pid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("log\n")])])]),s("p",[a._v("我们在 jstack 日志搜关键字DEAD，以及中找到了 CPU 使用最多的几个线程id。")]),a._v(" "),s("p",[a._v("可以看到问题发生的根源，是我们的堆已经满了，但是又没有发生 OOM，于是 GC 进程就一直在那里回收，回收的效果又非常一般，造成 CPU 升高应用假死。接下来的具体问题排查，就需要把内存 dump 一份下来，使用 MAT 等工具分析具体原因了。")])])}),[],!1,null,null,null);s.default=n.exports}}]);