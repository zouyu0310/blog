(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{833:function(a,s,t){"use strict";t.r(s);var e=t(14),_=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-mybatis是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mybatis是什么"}},[a._v("#")]),a._v(" 1. MyBatis是什么？")]),a._v(" "),s("ul",[s("li",[a._v("Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，加载驱动、创建连接、创建statement等繁杂的过程，开发者开发时只需要关注如何编写SQL语句，可以严格控制sql执行性能，灵活度高。")]),a._v(" "),s("li",[a._v("作为一个半ORM框架，MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。")]),a._v(" "),s("li",[a._v("通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。")]),a._v(" "),s("li",[a._v("由于MyBatis专注于SQL本身，灵活度高，所以比较适合对性能的要求很高，或者需求变化较多的项目，如互联网项目。")])]),a._v(" "),s("h2",{attrs:{id:"_2-mybaits的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-mybaits的优缺点"}},[a._v("#")]),a._v(" 2. Mybaits的优缺点")]),a._v(" "),s("p",[a._v("优点：")]),a._v(" "),s("ul",[s("li",[a._v("基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。")]),a._v(" "),s("li",[a._v("与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；")]),a._v(" "),s("li",[a._v("很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。")]),a._v(" "),s("li",[a._v("能够与Spring很好的集成；")]),a._v(" "),s("li",[a._v("提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。")])]),a._v(" "),s("p",[a._v("缺点：")]),a._v(" "),s("ul",[s("li",[a._v("SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。")]),a._v(" "),s("li",[a._v("SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。")])]),a._v(" "),s("h2",{attrs:{id:"_3-为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里"}},[a._v("#")]),a._v(" 3. 为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？")]),a._v(" "),s("p",[a._v("Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。")]),a._v(" "),s("p",[a._v("而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。")]),a._v(" "),s("h2",{attrs:{id:"_4-hibernate-和-mybatis-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-hibernate-和-mybatis-的区别"}},[a._v("#")]),a._v(" 4. Hibernate 和 MyBatis 的区别")]),a._v(" "),s("p",[s("strong",[a._v("相同点")]),a._v("：都是对jdbc的封装，都是持久层的框架，都用于dao层的开发。")]),a._v(" "),s("p",[s("strong",[a._v("不同点")])]),a._v(" "),s("p",[a._v("1、映射关系")]),a._v(" "),s("p",[a._v("MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单。")]),a._v(" "),s("p",[a._v("Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂。")]),a._v(" "),s("p",[a._v("2、 SQL优化和移植性")]),a._v(" "),s("p",[a._v("Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。\nMyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。")]),a._v(" "),s("p",[a._v("3、开发难易程度和学习成本")]),a._v(" "),s("p",[a._v("Hibernate 是重量级框架，学习使用门槛高，适合于需求相对稳定，中小型的项目，比如：办公自动化系统")]),a._v(" "),s("p",[a._v("MyBatis 是轻量级框架，学习使用门槛低，适合于需求变化频繁，大型的项目，比如：互联网电子商务系统")]),a._v(" "),s("p",[s("strong",[a._v("总结")])]),a._v(" "),s("p",[a._v("MyBatis 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架，")]),a._v(" "),s("p",[a._v("Hibernate 是一个强大、方便、高效、复杂、间接、全自动化的持久层框架。")]),a._v(" "),s("h2",{attrs:{id:"_5-jdbc编程有哪些不足之处-mybatis是如何解决这些问题的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-jdbc编程有哪些不足之处-mybatis是如何解决这些问题的"}},[a._v("#")]),a._v(" 5. JDBC编程有哪些不足之处，MyBatis是如何解决这些问题的？")]),a._v(" "),s("p",[a._v("1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。")]),a._v(" "),s("p",[a._v("解决：在SqlMapConfig.xml中配置数据链接池，使用连接池管理数据库链接。")]),a._v(" "),s("p",[a._v("2、Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。")]),a._v(" "),s("p",[a._v("解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。")]),a._v(" "),s("p",[a._v("3、 向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。")]),a._v(" "),s("p",[a._v("解决： Mybatis自动将java对象映射至sql语句。")]),a._v(" "),s("p",[a._v("4、 对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。")]),a._v(" "),s("p",[a._v("解决：Mybatis自动将sql执行结果映射至java对象。")]),a._v(" "),s("h2",{attrs:{id:"_6-mybatis编程步骤是什么样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-mybatis编程步骤是什么样的"}},[a._v("#")]),a._v(" 6. MyBatis编程步骤是什么样的？")]),a._v(" "),s("p",[a._v("1、创建SqlSessionFactory\n2、通过SqlSessionFactory创建SqlSession\n3、 通过sqlsession执行数据库操作\n4、 调用session.commit()提交事务\n5、 调用session.close()关闭会话")]),a._v(" "),s("h2",{attrs:{id:"_7-mybatis与hibernate有哪些不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-mybatis与hibernate有哪些不同"}},[a._v("#")]),a._v(" 7. MyBatis与Hibernate有哪些不同？")]),a._v(" "),s("p",[a._v("1、Mybatis 和 hibernate 不同，它不完全是一个 ORM 框架，因为 MyBatis 需要 程序员自己编写 Sql 语句。")]),a._v(" "),s("p",[a._v("2、Mybatis 直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高，非常 适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需 求变化要求迅速输出成果。但是灵活的前提是 mybatis 无法做到数据库无关性， 如果需要实现支持多种数据库的软件，则需要自定义多套 sql 映射文件，工作量大。")]),a._v(" "),s("p",[a._v("3、Hibernate 对象/关系映射能力强，数据库无关性好，对于关系模型要求高的 软件，如果用 hibernate 开发可以节省很多代码，提高效率")]),a._v(" "),s("h2",{attrs:{id:"_8-mybaits-的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-mybaits-的优点"}},[a._v("#")]),a._v(" 8. Mybaits 的优点：")]),a._v(" "),s("p",[a._v("1、基于 SQL 语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任 何影响，SQL 写在 XML 里，解除 sql 与程序代码的耦合，便于统一管理；提供 XML 标签，支持编写动态 SQL 语句，并可重用。")]),a._v(" "),s("p",[a._v("2、与 JDBC 相比，减少了 50%以上的代码量，消除了 JDBC 大量冗余的代码，不 需要手动开关连接；")]),a._v(" "),s("p",[a._v("3、很好的与各种数据库兼容（因为 MyBatis 使用 JDBC 来连接数据库，所以只要 JDBC 支持的数据库 MyBatis 都支持）。")]),a._v(" "),s("p",[a._v("4、能够与 Spring 很好的集成； 5、提供映射标签，支持对象与数据库的 ORM 字段关系映射；提供对象关系映射 标签，支持对象关系组件维护")]),a._v(" "),s("h2",{attrs:{id:"_9-mybatis-框架的缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-mybatis-框架的缺点"}},[a._v("#")]),a._v(" 9. MyBatis 框架的缺点：")]),a._v(" "),s("p",[a._v("1、SQL 语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写 SQL 语句的功底有一定要求。")]),a._v(" "),s("p",[a._v("2、SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。")]),a._v(" "),s("h2",{attrs:{id:"_10-和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-和-的区别"}},[a._v("#")]),a._v(" 10. #{}和${}的区别？")]),a._v(" "),s("ul",[s("li",[a._v("#{}是占位符，预编译处理；${}是拼接符，字符串替换，没有预编译处理。")]),a._v(" "),s("li",[a._v("Mybatis在处理#{}时，#{}传入参数是以字符串传入，会将SQL中的#{}替换为?号，调用PreparedStatement的set方法来赋值。")]),a._v(" "),s("li",[a._v("Mybatis在处理时 ， 是 原 值 传 入 ， 就 是 把 {}时，是原值传入，就是把时，是原值传入，就是把{}替换成变量的值，相当于JDBC中的Statement编译")]),a._v(" "),s("li",[a._v("变量替换后，#{} 对应的变量自动加上单引号 ‘’；变量替换后，${} 对应的变量不会加上单引号 ‘’")]),a._v(" "),s("li",[a._v("#{} 可以有效的防止SQL注入，提高系统安全性；${} 不能防止SQL 注入")]),a._v(" "),s("li",[a._v("#{} 的变量替换是在DBMS 中；${} 的变量替换是在 DBMS 外")])]),a._v(" "),s("h2",{attrs:{id:"_11-通常一个xml映射文件-都会写一个dao接口与之对应-那么这个dao接口的工作原理是什么-dao接口里的方法、参数不同时-方法能重载吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-通常一个xml映射文件-都会写一个dao接口与之对应-那么这个dao接口的工作原理是什么-dao接口里的方法、参数不同时-方法能重载吗"}},[a._v("#")]),a._v(" 11. 通常一个Xml映射文件，都会写一个Dao接口与之对应，那么这个Dao接口的工作原理是什么？Dao接口里的方法、参数不同时，方法能重载吗？")]),a._v(" "),s("p",[a._v("Dao接口即Mapper接口。接口的全限名就是映射文件中的namespace的值；接口的方法名，就是映射文件中Mapper的Statement的id值；接口方法内的参数，就是传递给sql的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名的拼接字符串作为key值，可唯一定位一个MapperStatement。")]),a._v(" "),s("p",[a._v("Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。")]),a._v(" "),s("p",[a._v("Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。")]),a._v(" "),s("h2",{attrs:{id:"_12-在mapper中如何传递多个参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-在mapper中如何传递多个参数"}},[a._v("#")]),a._v(" 12. 在Mapper中如何传递多个参数？")]),a._v(" "),s("p",[a._v("1、若Dao层函数有多个参数，那么其对应的xml中，#{0}代表接收的是Dao层中的第一个参数，#{1}代表Dao中的第二个参数，以此类推。")]),a._v(" "),s("p",[a._v("2、使用@Param注解：在Dao层的参数中前加@Param注解,注解内的参数名为传递到Mapper中的参数名。")]),a._v(" "),s("p",[a._v("3、多个参数封装成Map，以HashMap的形式传递到Mapper中。")]),a._v(" "),s("h2",{attrs:{id:"_13-mybatis动态sql有什么用-执行原理是什么-有哪些动态sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-mybatis动态sql有什么用-执行原理是什么-有哪些动态sql"}},[a._v("#")]),a._v(" 13. Mybatis动态sql有什么用？执行原理是什么？有哪些动态sql？")]),a._v(" "),s("p",[a._v("Mybatis动态sql可以在xml映射文件内，以标签的形式编写动态sql，执行原理是根据表达式的值完成逻辑判断，并动态拼接sql的功能。")]),a._v(" "),s("p",[a._v("Mybatis提供了9种动态sql标签：trim、where、set、foreach、if、choose、when、otherwise、bind")]),a._v(" "),s("h2",{attrs:{id:"_14-xml映射文件中-不同的xml映射文件id是否可以重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-xml映射文件中-不同的xml映射文件id是否可以重复"}},[a._v("#")]),a._v(" 14. xml映射文件中，不同的xml映射文件id是否可以重复？")]),a._v(" "),s("p",[a._v("不同的xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；")]),a._v(" "),s("p",[a._v("原因是namespace+id是作为Map<String,MapperStatement>的key使用的，如果没有namespace，就剩下id，那么id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也不同。")]),a._v(" "),s("h2",{attrs:{id:"_15-mybatis实现一对一有几种方式-具体是怎么操作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-mybatis实现一对一有几种方式-具体是怎么操作的"}},[a._v("#")]),a._v(" 15. Mybatis实现一对一有几种方式？具体是怎么操作的？")]),a._v(" "),s("p",[a._v("有联合查询和嵌套查询两种方式。")]),a._v(" "),s("p",[a._v("联合查询是几个表联合查询，通过在resultMap里面配置association节点配置一对一的类就可以完成；")]),a._v(" "),s("p",[a._v("嵌套查询是先查一个表，根据这个表里面的结果的外键id，再去另外一个表里面查询数据，也是通过association配置，但另外一个表的查询是通过select配置的。")]),a._v(" "),s("h2",{attrs:{id:"_16-mybatis实现一对多有几种方式-具体是怎么操作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-mybatis实现一对多有几种方式-具体是怎么操作的"}},[a._v("#")]),a._v(" 16. Mybatis实现一对多有几种方式？具体是怎么操作的？")]),a._v(" "),s("p",[a._v("有联合查询和嵌套查询两种方式。")]),a._v(" "),s("p",[a._v("联合查询是几个表联合查询，只查询一次，通过在resultMap里面的collection节点配置一对多的类就可以完成；")]),a._v(" "),s("p",[a._v("嵌套查询是先查一个表，根据这个表里面的结果的外键id，再去另外一个表里面查询数据，也是通过collection，但另外一个表的查询是通过select配置的。")]),a._v(" "),s("h2",{attrs:{id:"_17-mybatis的一级、二级缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-mybatis的一级、二级缓存"}},[a._v("#")]),a._v(" 17. Mybatis的一级、二级缓存")]),a._v(" "),s("p",[a._v("1、 一级缓存：基于PerpetualCache的HashMap本地缓存，其存储作用域为Session，当Session flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存。\n2、 二级缓存与一级缓存机制相同，默认也是采用PerpetualCache，HashMap存储，不同在于其存储作用域为Mapper（namespace），并且可自定义存储源，如Ehcache。默认打不开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口（可用来保存对象的状态），可在它的映射文件中配置。")]),a._v(" "),s("p",[a._v("对于缓存数据更新机制，当某一个作用域（一级缓存Session/二级缓存Namespace）进行了增/删/改操作后，默认该作用域下所有select中的缓存将被clear。")]),a._v(" "),s("h2",{attrs:{id:"_18-使用mybatis的mapper接口调用时有哪些要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-使用mybatis的mapper接口调用时有哪些要求"}},[a._v("#")]),a._v(" 18. 使用MyBatis的Mapper接口调用时有哪些要求？")]),a._v(" "),s("p",[a._v("1、Mapper接口方法名和mapper.xml中定义的每个sql的id相同；\n2、Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType类型相同；\n3、Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同；\n4、Mapper.xml文件中的namespace即是mapper接口的类路径。")]),a._v(" "),s("h2",{attrs:{id:"_19-mybatis动态sql是做什么的-都有哪些动态sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-mybatis动态sql是做什么的-都有哪些动态sql"}},[a._v("#")]),a._v(" 19. Mybatis动态sql是做什么的？都有哪些动态sql？")]),a._v(" "),s("p",[a._v("Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能，Mybatis提供了9种动态sql标签trim|where|set|foreach|if|choose|when|otherwise|bind。")]),a._v(" "),s("p",[a._v("其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。")]),a._v(" "),s("h2",{attrs:{id:"_20-mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复"}},[a._v("#")]),a._v(" 20. Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？")]),a._v(" "),s("p",[a._v("不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。")]),a._v(" "),s("p",[a._v("原因就是namespace+id是作为Map<String, MappedStatement>的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。")])])}),[],!1,null,null,null);s.default=_.exports}}]);