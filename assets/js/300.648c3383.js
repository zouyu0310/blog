(window.webpackJsonp=window.webpackJsonp||[]).push([[300],{913:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"集合概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合概述"}},[t._v("#")]),t._v(" 集合概述")]),t._v(" "),s("h3",{attrs:{id:"java-集合概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-集合概览"}},[t._v("#")]),t._v(" Java 集合概览")]),t._v(" "),s("p",[t._v("Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 "),s("code",[t._v("Collection")]),t._v("接口，主要用于存放单一元素；另一个是 "),s("code",[t._v("Map")]),t._v(" 接口，主要用于存放键值对。对于"),s("code",[t._v("Collection")]),t._v(" 接口，下面又有三个主要的子接口："),s("code",[t._v("List")]),t._v("、"),s("code",[t._v("Set")]),t._v(" 和 "),s("code",[t._v("Queue")]),t._v("。")]),t._v(" "),s("p",[t._v("Java 集合框架如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/collection/java-collection-hierarchy.png",alt:""}})]),t._v(" "),s("p",[t._v("注：图中只列举了主要的继承派生关系，并没有列举所有关系。比方省略了"),s("code",[t._v("AbstractList")]),t._v(", "),s("code",[t._v("NavigableSet")]),t._v("等抽象类以及其他的一些辅助类，如想深入了解，可自行查看源码。")]),t._v(" "),s("h3",{attrs:{id:"说说-list-set-queue-map-四者的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说-list-set-queue-map-四者的区别"}},[t._v("#")]),t._v(" 说说 List, Set, Queue, Map 四者的区别？")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("List")]),t._v("(对付顺序的好帮手): 存储的元素是有序的、可重复的。")]),t._v(" "),s("li",[s("code",[t._v("Set")]),t._v("(注重独一无二的性质): 存储的元素是无序的、不可重复的。")]),t._v(" "),s("li",[s("code",[t._v("Queue")]),t._v("(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。")]),t._v(" "),s("li",[s("code",[t._v("Map")]),t._v('(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，"x" 代表 key，"y" 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。')])]),t._v(" "),s("h3",{attrs:{id:"集合框架底层数据结构总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合框架底层数据结构总结"}},[t._v("#")]),t._v(" 集合框架底层数据结构总结")]),t._v(" "),s("p",[t._v("先来看一下 "),s("code",[t._v("Collection")]),t._v(" 接口下面的集合。")]),t._v(" "),s("h4",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ArrayList")]),t._v("： "),s("code",[t._v("Object[]")]),t._v(" 数组")]),t._v(" "),s("li",[s("code",[t._v("Vector")]),t._v("："),s("code",[t._v("Object[]")]),t._v(" 数组")]),t._v(" "),s("li",[s("code",[t._v("LinkedList")]),t._v("： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)")])]),t._v(" "),s("h4",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HashSet")]),t._v("(无序，唯一): 基于 "),s("code",[t._v("HashMap")]),t._v(" 实现的，底层采用 "),s("code",[t._v("HashMap")]),t._v(" 来保存元素")]),t._v(" "),s("li",[s("code",[t._v("LinkedHashSet")]),t._v(": "),s("code",[t._v("LinkedHashSet")]),t._v(" 是 "),s("code",[t._v("HashSet")]),t._v(" 的子类，并且其内部是通过 "),s("code",[t._v("LinkedHashMap")]),t._v(" 来实现的。有点类似于我们之前说的 "),s("code",[t._v("LinkedHashMap")]),t._v(" 其内部是基于 "),s("code",[t._v("HashMap")]),t._v(" 实现一样，不过还是有一点点区别的")]),t._v(" "),s("li",[s("code",[t._v("TreeSet")]),t._v("(有序，唯一): 红黑树(自平衡的排序二叉树)")])]),t._v(" "),s("h4",{attrs:{id:"queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PriorityQueue")]),t._v(": "),s("code",[t._v("Object[]")]),t._v(" 数组来实现二叉堆")]),t._v(" "),s("li",[s("code",[t._v("ArrayQueue")]),t._v(": "),s("code",[t._v("Object[]")]),t._v(" 数组 + 双指针")])]),t._v(" "),s("p",[t._v("再来看看 "),s("code",[t._v("Map")]),t._v(" 接口下面的集合。")]),t._v(" "),s("h4",{attrs:{id:"map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HashMap")]),t._v("： JDK1.8 之前 "),s("code",[t._v("HashMap")]),t._v(" 由数组+链表组成的，数组是 "),s("code",[t._v("HashMap")]),t._v(" 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间")]),t._v(" "),s("li",[s("code",[t._v("LinkedHashMap")]),t._v("： "),s("code",[t._v("LinkedHashMap")]),t._v(" 继承自 "),s("code",[t._v("HashMap")]),t._v("，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，"),s("code",[t._v("LinkedHashMap")]),t._v(" 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看："),s("a",{attrs:{href:"https://www.imooc.com/article/22931",target:"_blank",rel:"noopener noreferrer"}},[t._v("《LinkedHashMap 源码详细分析（JDK1.8）》"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("code",[t._v("Hashtable")]),t._v("： 数组+链表组成的，数组是 "),s("code",[t._v("Hashtable")]),t._v(" 的主体，链表则是主要为了解决哈希冲突而存在的")]),t._v(" "),s("li",[s("code",[t._v("TreeMap")]),t._v("： 红黑树（自平衡的排序二叉树）")])]),t._v(" "),s("h3",{attrs:{id:"如何选用集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何选用集合"}},[t._v("#")]),t._v(" 如何选用集合?")]),t._v(" "),s("p",[t._v("主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用 "),s("code",[t._v("Map")]),t._v(" 接口下的集合，需要排序时选择 "),s("code",[t._v("TreeMap")]),t._v(",不需要排序时就选择 "),s("code",[t._v("HashMap")]),t._v(",需要保证线程安全就选用 "),s("code",[t._v("ConcurrentHashMap")]),t._v("。")]),t._v(" "),s("p",[t._v("当我们只需要存放元素值时，就选择实现"),s("code",[t._v("Collection")]),t._v(" 接口的集合，需要保证元素唯一时选择实现 "),s("code",[t._v("Set")]),t._v(" 接口的集合比如 "),s("code",[t._v("TreeSet")]),t._v(" 或 "),s("code",[t._v("HashSet")]),t._v("，不需要就选择实现 "),s("code",[t._v("List")]),t._v(" 接口的比如 "),s("code",[t._v("ArrayList")]),t._v(" 或 "),s("code",[t._v("LinkedList")]),t._v("，然后再根据实现这些接口的集合的特点来选用。")]),t._v(" "),s("h3",{attrs:{id:"为什么要使用集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用集合"}},[t._v("#")]),t._v(" 为什么要使用集合？")]),t._v(" "),s("p",[t._v("当我们需要保存一组类型相同的数据的时候，我们应该是用一个容器来保存，这个容器就是数组，但是，使用数组存储对象具有一定的弊端，\n因为我们在实际开发中，存储的数据的类型是多种多样的，于是，就出现了“集合”，集合同样也是用来存储多个数据的。")]),t._v(" "),s("p",[t._v("数组的缺点是一旦声明之后，长度就不可变了；同时，声明数组时的数据类型也决定了该数组存储的数据的类型；而且，数组存储的数据是有序的、可重复的，特点单一。\n但是集合提高了数据存储的灵活性，Java 集合不仅可以用来存储不同类型不同数量的对象，还可以保存具有映射关系的数据。")]),t._v(" "),s("h2",{attrs:{id:"collection-子接口之-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-list"}},[t._v("#")]),t._v(" Collection 子接口之 List")]),t._v(" "),s("h3",{attrs:{id:"arraylist-和-vector-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-vector-的区别"}},[t._v("#")]),t._v(" ArrayList 和 Vector 的区别?")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ArrayList")]),t._v(" 是 "),s("code",[t._v("List")]),t._v(" 的主要实现类，底层使用 "),s("code",[t._v("Object[]")]),t._v("存储，适用于频繁的查找工作，线程不安全 ；")]),t._v(" "),s("li",[s("code",[t._v("Vector")]),t._v(" 是 "),s("code",[t._v("List")]),t._v(" 的古老实现类，底层使用"),s("code",[t._v("Object[]")]),t._v(" 存储，线程安全的。")])]),t._v(" "),s("h3",{attrs:{id:"arraylist-与-linkedlist-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-linkedlist-区别"}},[t._v("#")]),t._v(" ArrayList 与 LinkedList 区别?")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("是否保证线程安全：")]),t._v(" "),s("code",[t._v("ArrayList")]),t._v(" 和 "),s("code",[t._v("LinkedList")]),t._v(" 都是不同步的，也就是不保证线程安全；")]),t._v(" "),s("li",[s("strong",[t._v("底层数据结构：")]),t._v(" "),s("code",[t._v("ArrayList")]),t._v(" 底层使用的是 "),s("strong",[s("code",[t._v("Object")]),t._v(" 数组")]),t._v("；"),s("code",[t._v("LinkedList")]),t._v(" 底层使用的是 "),s("strong",[t._v("双向链表")]),t._v(" 数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）")]),t._v(" "),s("li",[s("strong",[t._v("插入和删除是否受元素位置的影响：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ArrayList")]),t._v(" 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行"),s("code",[t._v("add(E e)")]),t._v("方法的时候， "),s("code",[t._v("ArrayList")]),t._v(" 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（"),s("code",[t._v("add(int index, E element)")]),t._v("）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。")]),t._v(" "),s("li",[s("code",[t._v("LinkedList")]),t._v(" 采用链表存储，所以，如果是在头尾插入或者删除元素不受元素位置的影响（"),s("code",[t._v("add(E e)")]),t._v("、"),s("code",[t._v("addFirst(E e)")]),t._v("、"),s("code",[t._v("addLast(E e)")]),t._v("、"),s("code",[t._v("removeFirst()")]),t._v(" 、 "),s("code",[t._v("removeLast()")]),t._v("），时间复杂度为 O(1)，如果是要在指定位置 "),s("code",[t._v("i")]),t._v(" 插入和删除元素的话（"),s("code",[t._v("add(int index, E element)")]),t._v("，"),s("code",[t._v("remove(Object o)")]),t._v("）， 时间复杂度为 O(n) ，因为需要先移动到指定位置再插入。")])])]),t._v(" "),s("li",[s("strong",[t._v("是否支持快速随机访问：")]),t._v(" "),s("code",[t._v("LinkedList")]),t._v(" 不支持高效的随机元素访问，而 "),s("code",[t._v("ArrayList")]),t._v("（实现了RandomAccess接口） 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于"),s("code",[t._v("get(int index)")]),t._v("方法)。")]),t._v(" "),s("li",[s("strong",[t._v("内存空间占用：")]),t._v(" "),s("code",[t._v("ArrayList")]),t._v(" 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。")])]),t._v(" "),s("p",[t._v("我们在项目中一般是不会使用到 "),s("code",[t._v("LinkedList")]),t._v(" 的，需要用到 "),s("code",[t._v("LinkedList")]),t._v(" 的场景几乎都可以使用  "),s("code",[t._v("ArrayList")]),t._v("  来代替，并且，性能通常会更好！就连 "),s("code",[t._v("LinkedList")]),t._v(" 的作者约书亚 · 布洛克（Josh Bloch）自己都说从来不会使用 "),s("code",[t._v("LinkedList")]),t._v(" 。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/redisimage-20220412110853807.png",alt:""}})]),t._v(" "),s("p",[t._v("另外，不要下意识地认为 "),s("code",[t._v("LinkedList")]),t._v("  作为链表就最适合元素增删的场景。我在上面也说了，"),s("code",[t._v("LinkedList")]),t._v("  仅仅在头尾插入或者删除元素的时候时间复杂度近似 O(1)，其他情况增删元素的时间复杂度都是 O(n) 。")]),t._v(" "),s("h4",{attrs:{id:"补充内容-双向链表和双向循环链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充内容-双向链表和双向循环链表"}},[t._v("#")]),t._v(" 补充内容:双向链表和双向循环链表")]),t._v(" "),s("p",[s("strong",[t._v("双向链表：")]),t._v(" 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png",alt:"双向链表"}})]),t._v(" "),s("p",[s("strong",[t._v("双向循环链表：")]),t._v(" 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png",alt:"双向循环链表"}})]),t._v(" "),s("h4",{attrs:{id:"补充内容-randomaccess-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充内容-randomaccess-接口"}},[t._v("#")]),t._v(" 补充内容:RandomAccess 接口")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RandomAccess")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("查看源码我们发现实际上 "),s("code",[t._v("RandomAccess")]),t._v(" 接口中什么都没有定义。所以，在我看来 "),s("code",[t._v("RandomAccess")]),t._v(" 接口不过是一个标识罢了。标识什么？ 标识实现这个接口的类具有随机访问功能。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("binarySearch（)")]),t._v(" 方法中，它要判断传入的 list 是否 "),s("code",[t._v("RandomAccess")]),t._v(" 的实例，如果是，调用"),s("code",[t._v("indexedBinarySearch()")]),t._v("方法，如果不是，那么调用"),s("code",[t._v("iteratorBinarySearch()")]),t._v("方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("binarySearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RandomAccess")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BINARYSEARCH_THRESHOLD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexedBinarySearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("iteratorBinarySearch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("ArrayList")]),t._v(" 实现了 "),s("code",[t._v("RandomAccess")]),t._v(" 接口， 而 "),s("code",[t._v("LinkedList")]),t._v(" 没有实现。为什么呢？我觉得还是和底层数据结构有关！"),s("code",[t._v("ArrayList")]),t._v(" 底层是数组，而 "),s("code",[t._v("LinkedList")]),t._v(" 底层是链表。数组天然支持随机访问，时间复杂度为 O(1)，所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O(n)，所以不支持快速随机访问。，"),s("code",[t._v("ArrayList")]),t._v(" 实现了 "),s("code",[t._v("RandomAccess")]),t._v(" 接口，就表明了他具有快速随机访问功能。 "),s("code",[t._v("RandomAccess")]),t._v(" 接口只是标识，并不是说 "),s("code",[t._v("ArrayList")]),t._v(" 实现 "),s("code",[t._v("RandomAccess")]),t._v(" 接口才具有快速随机访问功能的！")]),t._v(" "),s("h3",{attrs:{id:"说一说-arraylist-的扩容机制吧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一说-arraylist-的扩容机制吧"}},[t._v("#")]),t._v(" 说一说 ArrayList 的扩容机制吧")]),t._v(" "),s("p",[t._v("详见笔主的这篇文章: "),s("a",{attrs:{href:"https://javaguide.cn/java/collection/arraylist-source-code.html#_3-1-%E5%85%88%E4%BB%8E-arraylist-%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%B4%E8%B5%B7",target:"_blank",rel:"noopener noreferrer"}},[t._v("ArrayList 扩容机制分析"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"collection-子接口之-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-set"}},[t._v("#")]),t._v(" Collection 子接口之 Set")]),t._v(" "),s("h3",{attrs:{id:"comparable-和-comparator-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator-的区别"}},[t._v("#")]),t._v(" comparable 和 Comparator 的区别")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("comparable")]),t._v(" 接口实际上是出自"),s("code",[t._v("java.lang")]),t._v("包 它有一个 "),s("code",[t._v("compareTo(Object obj)")]),t._v("方法用来排序")]),t._v(" "),s("li",[s("code",[t._v("comparator")]),t._v("接口实际上是出自 java.util 包它有一个"),s("code",[t._v("compare(Object obj1, Object obj2)")]),t._v("方法用来排序")])]),t._v(" "),s("p",[t._v("一般我们需要对一个集合使用自定义排序时，我们就要重写"),s("code",[t._v("compareTo()")]),t._v("方法或"),s("code",[t._v("compare()")]),t._v("方法，当我们需要对某一个集合实现两种排序方式，比如一个 song 对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写"),s("code",[t._v("compareTo()")]),t._v("方法和使用自制的"),s("code",[t._v("Comparator")]),t._v("方法或者以两个 Comparator 来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的 "),s("code",[t._v("Collections.sort()")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"comparator-定制排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comparator-定制排序"}},[t._v("#")]),t._v(" Comparator 定制排序")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" arrayList "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"原始数组:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// void reverse(List list)：反转")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Collections.reverse(arrayList):"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// void sort(List list),按自然排序的升序排序")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Collections.sort(arrayList):"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定制排序的用法")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" o1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"定制排序后："')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Output:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("原始数组:\n[-1, 3, 3, -5, 7, 4, -9, -7]\nCollections.reverse(arrayList):\n[-7, -9, 4, 7, -5, 3, 3, -1]\nCollections.sort(arrayList):\n[-9, -7, -5, -1, 3, 3, 4, 7]\n定制排序后：\n[7, 4, 3, 3, -1, -5, -7, -9]\n")])])]),s("h4",{attrs:{id:"重写-compareto-方法实现按年龄来排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写-compareto-方法实现按年龄来排序"}},[t._v("#")]),t._v(" 重写 compareTo 方法实现按年龄来排序")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * T重写compareTo方法实现按年龄来排序\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" pdata "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"张三"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhangsan"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"李四"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lisi"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"王五"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wangwu"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小红"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiaohong"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 得到key的值的同时得到key所对应的值")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" keys "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Output：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("5-小红\n10-王五\n20-李四\n30-张三\n")])])]),s("h3",{attrs:{id:"无序性和不可重复性的含义是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无序性和不可重复性的含义是什么"}},[t._v("#")]),t._v(" 无序性和不可重复性的含义是什么")]),t._v(" "),s("ul",[s("li",[t._v("无序性不等于随机性 ，无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加 ，而是根据数据的哈希值决定的。")]),t._v(" "),s("li",[t._v("不可重复性是指添加的元素按照 "),s("code",[t._v("equals()")]),t._v(" 判断时 ，返回 false，需要同时重写 "),s("code",[t._v("equals()")]),t._v(" 方法和 "),s("code",[t._v("hashCode()")]),t._v(" 方法。")])]),t._v(" "),s("h3",{attrs:{id:"比较-hashset、linkedhashset-和-treeset-三者的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较-hashset、linkedhashset-和-treeset-三者的异同"}},[t._v("#")]),t._v(" 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HashSet")]),t._v("、"),s("code",[t._v("LinkedHashSet")]),t._v(" 和 "),s("code",[t._v("TreeSet")]),t._v(" 都是 "),s("code",[t._v("Set")]),t._v(" 接口的实现类，都能保证元素唯一，并且都不是线程安全的。")]),t._v(" "),s("li",[s("code",[t._v("HashSet")]),t._v("、"),s("code",[t._v("LinkedHashSet")]),t._v(" 和 "),s("code",[t._v("TreeSet")]),t._v(" 的主要区别在于底层数据结构不同。"),s("code",[t._v("HashSet")]),t._v(" 的底层数据结构是哈希表（基于 "),s("code",[t._v("HashMap")]),t._v(" 实现）。"),s("code",[t._v("LinkedHashSet")]),t._v(" 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。"),s("code",[t._v("TreeSet")]),t._v(" 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。")]),t._v(" "),s("li",[t._v("底层数据结构不同又导致这三者的应用场景不同。"),s("code",[t._v("HashSet")]),t._v(" 用于不需要保证元素插入和取出顺序的场景，"),s("code",[t._v("LinkedHashSet")]),t._v(" 用于保证元素的插入和取出顺序满足 FIFO 的场景，"),s("code",[t._v("TreeSet")]),t._v(" 用于支持对元素自定义排序规则的场景。")])]),t._v(" "),s("h2",{attrs:{id:"collection-子接口之-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-queue"}},[t._v("#")]),t._v(" Collection 子接口之 Queue")]),t._v(" "),s("h3",{attrs:{id:"queue-与-deque-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queue-与-deque-的区别"}},[t._v("#")]),t._v(" Queue 与 Deque 的区别")]),t._v(" "),s("p",[s("code",[t._v("Queue")]),t._v(" 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 "),s("strong",[t._v("先进先出（FIFO）")]),t._v(" 规则。")]),t._v(" "),s("p",[s("code",[t._v("Queue")]),t._v(" 扩展了 "),s("code",[t._v("Collection")]),t._v(" 的接口，根据 "),s("strong",[t._v("因为容量问题而导致操作失败后处理方式的不同")]),t._v(" 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("code",[t._v("Queue")]),t._v(" 接口")]),t._v(" "),s("th",[t._v("抛出异常")]),t._v(" "),s("th",[t._v("返回特殊值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("插入队尾")]),t._v(" "),s("td",[t._v("add(E e)")]),t._v(" "),s("td",[t._v("offer(E e)")])]),t._v(" "),s("tr",[s("td",[t._v("删除队首")]),t._v(" "),s("td",[t._v("remove()")]),t._v(" "),s("td",[t._v("poll()")])]),t._v(" "),s("tr",[s("td",[t._v("查询队首元素")]),t._v(" "),s("td",[t._v("element()")]),t._v(" "),s("td",[t._v("peek()")])])])]),t._v(" "),s("p",[s("code",[t._v("Deque")]),t._v(" 是双端队列，在队列的两端均可以插入或删除元素。")]),t._v(" "),s("p",[s("code",[t._v("Deque")]),t._v(" 扩展了 "),s("code",[t._v("Queue")]),t._v(" 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("code",[t._v("Deque")]),t._v(" 接口")]),t._v(" "),s("th",[t._v("抛出异常")]),t._v(" "),s("th",[t._v("返回特殊值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("插入队首")]),t._v(" "),s("td",[t._v("addFirst(E e)")]),t._v(" "),s("td",[t._v("offerFirst(E e)")])]),t._v(" "),s("tr",[s("td",[t._v("插入队尾")]),t._v(" "),s("td",[t._v("addLast(E e)")]),t._v(" "),s("td",[t._v("offerLast(E e)")])]),t._v(" "),s("tr",[s("td",[t._v("删除队首")]),t._v(" "),s("td",[t._v("removeFirst()")]),t._v(" "),s("td",[t._v("pollFirst()")])]),t._v(" "),s("tr",[s("td",[t._v("删除队尾")]),t._v(" "),s("td",[t._v("removeLast()")]),t._v(" "),s("td",[t._v("pollLast()")])]),t._v(" "),s("tr",[s("td",[t._v("查询队首元素")]),t._v(" "),s("td",[t._v("getFirst()")]),t._v(" "),s("td",[t._v("peekFirst()")])]),t._v(" "),s("tr",[s("td",[t._v("查询队尾元素")]),t._v(" "),s("td",[t._v("getLast()")]),t._v(" "),s("td",[t._v("peekLast()")])])])]),t._v(" "),s("p",[t._v("事实上，"),s("code",[t._v("Deque")]),t._v(" 还提供有 "),s("code",[t._v("push()")]),t._v(" 和 "),s("code",[t._v("pop()")]),t._v(" 等其他方法，可用于模拟栈。")]),t._v(" "),s("h3",{attrs:{id:"arraydeque-与-linkedlist-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque-与-linkedlist-的区别"}},[t._v("#")]),t._v(" ArrayDeque 与 LinkedList 的区别")]),t._v(" "),s("p",[s("code",[t._v("ArrayDeque")]),t._v(" 和 "),s("code",[t._v("LinkedList")]),t._v(" 都实现了 "),s("code",[t._v("Deque")]),t._v(" 接口，两者都具有队列的功能，但两者有什么区别呢？")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("ArrayDeque")]),t._v(" 是基于可变长的数组和双指针来实现，而 "),s("code",[t._v("LinkedList")]),t._v(" 则通过链表来实现。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("ArrayDeque")]),t._v(" 不支持存储 "),s("code",[t._v("NULL")]),t._v(" 数据，但 "),s("code",[t._v("LinkedList")]),t._v(" 支持。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("ArrayDeque")]),t._v(" 是在 JDK1.6 才被引入的，而"),s("code",[t._v("LinkedList")]),t._v(" 早在 JDK1.2 时就已经存在。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("ArrayDeque")]),t._v(" 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 "),s("code",[t._v("LinkedList")]),t._v(" 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。")])])]),t._v(" "),s("p",[t._v("从性能的角度上，选用 "),s("code",[t._v("ArrayDeque")]),t._v(" 来实现队列要比 "),s("code",[t._v("LinkedList")]),t._v(" 更好。此外，"),s("code",[t._v("ArrayDeque")]),t._v(" 也可以用于实现栈。")]),t._v(" "),s("h3",{attrs:{id:"说一说-priorityqueue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一说-priorityqueue"}},[t._v("#")]),t._v(" 说一说 PriorityQueue")]),t._v(" "),s("p",[s("code",[t._v("PriorityQueue")]),t._v(" 是在 JDK1.5 中被引入的, 其与 "),s("code",[t._v("Queue")]),t._v(" 的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。")]),t._v(" "),s("p",[t._v("这里列举其相关的一些要点：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("PriorityQueue")]),t._v(" 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据")]),t._v(" "),s("li",[s("code",[t._v("PriorityQueue")]),t._v(" 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。")]),t._v(" "),s("li",[s("code",[t._v("PriorityQueue")]),t._v(" 是非线程安全的，且不支持存储 "),s("code",[t._v("NULL")]),t._v(" 和 "),s("code",[t._v("non-comparable")]),t._v(" 的对象。")]),t._v(" "),s("li",[s("code",[t._v("PriorityQueue")]),t._v(" 默认是小顶堆，但可以接收一个 "),s("code",[t._v("Comparator")]),t._v(" 作为构造参数，从而来自定义元素优先级的先后。")])]),t._v(" "),s("p",[s("code",[t._v("PriorityQueue")]),t._v(" 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第K大的数、带权图的遍历等，所以需要会熟练使用才行。")])])}),[],!1,null,null,null);s.default=e.exports}}]);