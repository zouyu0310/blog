(window.webpackJsonp=window.webpackJsonp||[]).push([[449],{1100:function(e,t,r){"use strict";r.r(t);var a=r(14),i=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_59-hystrix之服务熔断案例-上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_59-hystrix之服务熔断案例-上"}},[e._v("#")]),e._v(" 59_Hystrix之服务熔断案例(上)")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://hutool.cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hutool国产工具类"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("修改cloud-provider-hystrix-payment8001")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Service\npublic class PaymentService{    \n\n    ...\n    \n    //=====服务熔断\n    @HystrixCommand(fallbackMethod = "paymentCircuitBreaker_fallback",commandProperties = {\n            @HystrixProperty(name = "circuitBreaker.enabled",value = "true"),// 是否开启断路器\n            @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value = "10"),// 请求次数\n            @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "10000"), // 时间窗口期\n            @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage",value = "60"),// 失败率达到多少后跳闸\n    })\n    public String paymentCircuitBreaker(@PathVariable("id") Integer id) {\n        if(id < 0) {\n            throw new RuntimeException("******id 不能负数");\n        }\n        String serialNumber = IdUtil.simpleUUID();\n\n        return Thread.currentThread().getName()+"\\t"+"调用成功，流水号: " + serialNumber;\n    }\n    public String paymentCircuitBreaker_fallback(@PathVariable("id") Integer id) {\n        return "id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: " +id;\n    }\n\n}\n\n')])])]),t("p",[e._v("HystrixCommandProperties配置类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("package com.netflix.hystrix;\n\n...\n\npublic abstract class HystrixCommandProperties {\n    private static final Logger logger = LoggerFactory.getLogger(HystrixCommandProperties.class);\n\n    /* defaults */\n    /* package */ static final Integer default_metricsRollingStatisticalWindow = 10000;// default => statisticalWindow: 10000 = 10 seconds (and default of 10 buckets so each bucket is 1 second)\n    private static final Integer default_metricsRollingStatisticalWindowBuckets = 10;// default => statisticalWindowBuckets: 10 = 10 buckets in a 10 second window so each bucket is 1 second\n    private static final Integer default_circuitBreakerRequestVolumeThreshold = 20;// default => statisticalWindowVolumeThreshold: 20 requests in 10 seconds must occur before statistics matter\n    private static final Integer default_circuitBreakerSleepWindowInMilliseconds = 5000;// default => sleepWindow: 5000 = 5 seconds that we will sleep before trying again after tripping the circuit\n    private static final Integer default_circuitBreakerErrorThresholdPercentage = 50;// default => errorThresholdPercentage = 50 = if 50%+ of requests in 10 seconds are failures or latent then we will trip the circuit\n    private static final Boolean default_circuitBreakerForceOpen = false;// default => forceCircuitOpen = false (we want to allow traffic)\n    /* package */ static final Boolean default_circuitBreakerForceClosed = false;// default => ignoreErrors = false \n    private static final Integer default_executionTimeoutInMilliseconds = 1000; // default => executionTimeoutInMilliseconds: 1000 = 1 second\n    private static final Boolean default_executionTimeoutEnabled = true;\n\n    ...\n}\n\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);