(window.webpackJsonp=window.webpackJsonp||[]).push([[381],{1006:function(t,a,s){"use strict";s.r(a);var o=s(14),n=Object(o.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"一、日志框架简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、日志框架简介"}},[t._v("#")]),t._v(" 一、日志框架简介")]),t._v(" "),a("h2",{attrs:{id:"市面上的日志框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#市面上的日志框架"}},[t._v("#")]),t._v(" 市面上的日志框架")]),t._v(" "),a("p",[a("code",[t._v("JUL")]),t._v("、"),a("code",[t._v("JCL")]),t._v("、"),a("code",[t._v("Jboss-logging")]),t._v("、"),a("code",[t._v("logback")]),t._v("、"),a("code",[t._v("log4j")]),t._v("、"),a("code",[t._v("log4j2")]),t._v("、"),a("code",[t._v("slf4j")]),t._v("....")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("日志门面 （日志的抽象层）")]),t._v(" "),a("th",[t._v("日志实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("s",[t._v("JCL（Jakarta Commons Logging)")]),t._v(" "),a("strong",[t._v("SLF4j（Simple Logging Facade for Java）")]),t._v(" "),a("s",[t._v("jboss-loggi")])]),t._v(" "),a("td",[t._v("JUL（java.util.logging） Log4j Log4j2 "),a("strong",[t._v("Logback")])])])])]),t._v(" "),a("p",[t._v("左边选一个门面（抽象层）、右边来选一个实现；")]),t._v(" "),a("blockquote",[a("p",[t._v("例：SLF4j--\x3eLogback")])]),t._v(" "),a("p",[t._v("Spring Boot选用 "),a("code",[t._v("SLF4j")]),t._v("和"),a("code",[t._v("logback")])]),t._v(" "),a("p",[t._v("Spring Boot 默认的日志记录框架使用的是 Logback，此外我们还可以选择 Log4j 和 Log4j2。其中 Log4j 可以认为是一个过时的函数库，已经停止更新，不推荐使用，相比之下，性能和功能也是最差的。logback 虽然是 Spring Boot 默认的，但性能上还是不及 Log4j2，因此，在现阶段，日志记录首选 Log4j2。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img/20200428122523.png",alt:""}})]),t._v(" "),a("p",[t._v("当然，在实际项目开发中，我们不会直接调用上面三款日志框架的 API 去记录日志，因为这样如果要切换日志框架的话代码需要修改的地方太多。因此，最佳实践是采用 SLF4J 来进行日志记录，SLF4J 是基于门面模式实现的一个通用日志框架，它本身并没有日志记录的功能，实际的日志记录还是需要依赖 Log4j、logback 或者 Log4j2。使用 SLF4J，可以实现简单快速地替换底层的日志框架而不会导致业务代码需要做相应的修改。SLF4J + Log4j2 是我们推荐的日志记录选型。")]),t._v(" "),a("p",[t._v("在使用 SLF4J 进行日志记录时，通常都需要在每个需要记录日志的类中定义 Logger 变量，如下所示：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slf4j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("slf4j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoggerFactory")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SmsController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LOGGER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoggerFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SmsController")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这显然属于重复性劳动，降低了开发效率，如果你在项目中引入了 Lombok，那么可以使用它提供的 @Slf4j 注解来自动生成上面那个变量，默认的变量名是 log，如果我们想采用惯用的 LOGGER 变量名，那么可以在工程的 main/java 目录中增加 lombok.config 文件，并在文件中增加 lombok.log.fieldName=LOGGER 的配置项即可。")]),t._v(" "),a("h1",{attrs:{id:"二、日志级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、日志级别"}},[t._v("#")]),t._v(" 二、日志级别")]),t._v(" "),a("p",[t._v("细说各日志框架整合配置前，我们先来大致了解下，最常见的日志的几个级别：ERROR, WARN, INFO, DEBUG和TRACE。像其他的，比如ALL、OFF和FATAL之类的开发过程中应该基本上是不会涉及的。所以以下从低到高一次介绍下常见的日志级别。")]),t._v(" "),a("ol",[a("li",[t._v("TRACE：追踪。一般上对核心系统进行性能调试或者跟踪问题时有用，此级别很低，一般上是不开启的，开启后日志会很快就打满磁盘的。")]),t._v(" "),a("li",[t._v("DEBUG:调试。这个大家应该不陌生了。开发过程中主要是打印记录一些运行信息之类的。")]),t._v(" "),a("li",[t._v("INFO:信息。这个是最常见的了，大部分默认就是这个级别的日志。一般上记录了一些交互信息，一些请求参数等等。可方便定位问题，或者还原现场环境的时候使用。此日志相对来说是比较重要的。")]),t._v(" "),a("li",[t._v("WARN:警告。这个一般上是记录潜在的可能会引发错误的信息。比如启动时，某某配置文件不存在或者某个参数未设置之类的。")]),t._v(" "),a("li",[t._v("ERROR:错误。这个也是比较常见的，一般上是在捕获异常时输出，虽然发生了错误，但不影响系统的正常运行。但可能会导致系统出错或是宕机等。")])]),t._v(" "),a("h1",{attrs:{id:"三、常见术语概念解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、常见术语概念解析"}},[t._v("#")]),t._v(" 三、常见术语概念解析")]),t._v(" "),a("ol",[a("li",[t._v("appender：主要控制日志输出到哪里，比如：文件、数据库、控制台打印等")]),t._v(" "),a("li",[t._v("logger: 用来设置某一个包或者具体某一个类的日志打印级别、以及指定appender")]),t._v(" "),a("li",[t._v('root：也是一个logger，是一个特殊的logger。所有的logger最终都会将输出流交给root，除非设置logger中配置了additivity="false"。')]),t._v(" "),a("li",[t._v("rollingPolicy：所有日志都放在一个文件是不好的，所以可以指定滚动策略，按照一定周期或文件大小切割存放日志文件。")]),t._v(" "),a("li",[t._v("RolloverStrategy：日志清理策略。通常是指日志保留的时间。")]),t._v(" "),a("li",[t._v("异步日志：单独开一个线程做日志的写操作，达到不阻塞主线程的目的")])]),t._v(" "),a("h1",{attrs:{id:"四、性能测试结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、性能测试结果"}},[t._v("#")]),t._v(" 四、性能测试结果"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/krislinzhao/IMGcloud/img/20200428123017.png",alt:""}})]),t._v(" "),a("p",[t._v("参考:"),a("a",{attrs:{href:"http://logging.apache.org/log4j/2.x/manual/async.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("log4j2官网"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);